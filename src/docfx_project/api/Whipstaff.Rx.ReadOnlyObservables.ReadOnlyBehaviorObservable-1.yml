### YamlMime:ManagedReference
items:
- uid: Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable`1
  commentId: T:Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable`1
  id: ReadOnlyBehaviorObservable`1
  parent: Whipstaff.Rx.ReadOnlyObservables
  children:
  - Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable`1.#ctor(System.Reactive.Subjects.BehaviorSubject{`0})
  - Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable`1.Subscribe(System.IObserver{`0})
  - Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable`1.TryGetValue(`0@)
  - Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable`1.Value
  langs:
  - csharp
  - vb
  name: ReadOnlyBehaviorObservable<T>
  nameWithType: ReadOnlyBehaviorObservable<T>
  fullName: Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable<T>
  type: Class
  source:
    path: Whipstaff.Rx
    isExternal: true
  assemblies:
  - Whipstaff.Rx
  namespace: Whipstaff.Rx.ReadOnlyObservables
  summary: "\nRepresents a <xref href=\"System.Reactive.Subjects.BehaviorSubject%601\" data-throw-if-not-resolved=\"false\"></xref> that has been wrapped to make it read only by hiding the next, error, completed methods.\n"
  syntax:
    content: 'public class ReadOnlyBehaviorObservable<T> : Object, IReadOnlyObservable<T>, IObservable<T>'
    typeParameters:
    - id: T
      description: The type being exposed by the subject.
    content.vb: >-
      Public Class ReadOnlyBehaviorObservable(Of T)
          Inherits Object
          Implements IReadOnlyObservable(Of T), IObservable(Of T)
  inheritance:
  - System.Object
  implements:
  - Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable{{T}}
  - System.IObservable{{T}}
  nameWithType.vb: ReadOnlyBehaviorObservable(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable(Of T)
  name.vb: ReadOnlyBehaviorObservable(Of T)
- uid: Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable`1.#ctor(System.Reactive.Subjects.BehaviorSubject{`0})
  commentId: M:Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable`1.#ctor(System.Reactive.Subjects.BehaviorSubject{`0})
  id: '#ctor(System.Reactive.Subjects.BehaviorSubject{`0})'
  parent: Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable`1
  langs:
  - csharp
  - vb
  name: ReadOnlyBehaviorObservable(BehaviorSubject<T>)
  nameWithType: ReadOnlyBehaviorObservable<T>.ReadOnlyBehaviorObservable(BehaviorSubject<T>)
  fullName: Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable<T>.ReadOnlyBehaviorObservable(System.Reactive.Subjects.BehaviorSubject<T>)
  type: Constructor
  source:
    path: Whipstaff.Rx
    isExternal: true
  assemblies:
  - Whipstaff.Rx
  namespace: Whipstaff.Rx.ReadOnlyObservables
  summary: "\n\n"
  syntax:
    content: public ReadOnlyBehaviorObservable(BehaviorSubject<T> behaviorSubject)
    parameters:
    - id: behaviorSubject
      type: System.Reactive.Subjects.BehaviorSubject{{T}}
    content.vb: Public Sub New(behaviorSubject As BehaviorSubject(Of T))
  overload: Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable`1.#ctor*
  nameWithType.vb: ReadOnlyBehaviorObservable(Of T).ReadOnlyBehaviorObservable(BehaviorSubject(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable(Of T).ReadOnlyBehaviorObservable(System.Reactive.Subjects.BehaviorSubject(Of T))
  name.vb: ReadOnlyBehaviorObservable(BehaviorSubject(Of T))
- uid: Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable`1.Subscribe(System.IObserver{`0})
  commentId: M:Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable`1.Subscribe(System.IObserver{`0})
  id: Subscribe(System.IObserver{`0})
  parent: Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable`1
  langs:
  - csharp
  - vb
  name: Subscribe(IObserver<T>)
  nameWithType: ReadOnlyBehaviorObservable<T>.Subscribe(IObserver<T>)
  fullName: Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable<T>.Subscribe(System.IObserver<T>)
  type: Method
  source:
    path: Whipstaff.Rx
    isExternal: true
  assemblies:
  - Whipstaff.Rx
  namespace: Whipstaff.Rx.ReadOnlyObservables
  syntax:
    content: public IDisposable Subscribe(IObserver<T> observer)
    parameters:
    - id: observer
      type: System.IObserver{{T}}
    return:
      type: System.IDisposable
    content.vb: Public Function Subscribe(observer As IObserver(Of T)) As IDisposable
  overload: Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable`1.Subscribe*
  nameWithType.vb: ReadOnlyBehaviorObservable(Of T).Subscribe(IObserver(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable(Of T).Subscribe(System.IObserver(Of T))
  name.vb: Subscribe(IObserver(Of T))
- uid: Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable`1.TryGetValue(`0@)
  commentId: M:Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable`1.TryGetValue(`0@)
  id: TryGetValue(`0@)
  parent: Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable`1
  langs:
  - csharp
  - vb
  name: TryGetValue(out T)
  nameWithType: ReadOnlyBehaviorObservable<T>.TryGetValue(out T)
  fullName: Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable<T>.TryGetValue(out T)
  type: Method
  source:
    path: Whipstaff.Rx
    isExternal: true
  assemblies:
  - Whipstaff.Rx
  namespace: Whipstaff.Rx.ReadOnlyObservables
  syntax:
    content: public bool TryGetValue(out T value)
    parameters:
    - id: value
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Public Function TryGetValue(ByRef value As T) As Boolean
  overload: Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable`1.TryGetValue*
  implements:
  - Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable{{T}}.TryGetValue({T}@)
  nameWithType.vb: ReadOnlyBehaviorObservable(Of T).TryGetValue(ByRef T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable(Of T).TryGetValue(ByRef T)
  name.vb: TryGetValue(ByRef T)
- uid: Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable`1.Value
  commentId: P:Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable`1.Value
  id: Value
  parent: Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable`1
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: ReadOnlyBehaviorObservable<T>.Value
  fullName: Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable<T>.Value
  type: Property
  source:
    path: Whipstaff.Rx
    isExternal: true
  assemblies:
  - Whipstaff.Rx
  namespace: Whipstaff.Rx.ReadOnlyObservables
  syntax:
    content: public T Value { get; }
    parameters: []
    return:
      type: '{T}'
    content.vb: Public ReadOnly Property Value As T
  overload: Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable`1.Value*
  implements:
  - Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable{{T}}.Value
  nameWithType.vb: ReadOnlyBehaviorObservable(Of T).Value
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable(Of T).Value
references:
- uid: Whipstaff.Rx.ReadOnlyObservables
  commentId: N:Whipstaff.Rx.ReadOnlyObservables
  isExternal: true
  name: Whipstaff.Rx.ReadOnlyObservables
  nameWithType: Whipstaff.Rx.ReadOnlyObservables
  fullName: Whipstaff.Rx.ReadOnlyObservables
- uid: Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable{{T}}
  commentId: T:Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable{``0}
  parent: Whipstaff.Rx.ReadOnlyObservables
  definition: Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable`1
  name: IReadOnlyObservable<T>
  nameWithType: IReadOnlyObservable<T>
  fullName: Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable<T>
  nameWithType.vb: IReadOnlyObservable(Of T)
  fullName.vb: Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable(Of T)
  name.vb: IReadOnlyObservable(Of T)
  spec.csharp:
  - uid: Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable`1
    name: IReadOnlyObservable
    nameWithType: IReadOnlyObservable
    fullName: Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable`1
    name: IReadOnlyObservable
    nameWithType: IReadOnlyObservable
    fullName: Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IObservable{{T}}
  commentId: '!:System.IObservable{``0}'
  definition: System.IObservable`1
  name: IObservable<T>
  nameWithType: IObservable<T>
  fullName: System.IObservable<T>
  nameWithType.vb: IObservable(Of T)
  fullName.vb: System.IObservable(Of T)
  name.vb: IObservable(Of T)
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable`1
  commentId: T:Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable`1
  isExternal: true
  name: IReadOnlyObservable<T>
  nameWithType: IReadOnlyObservable<T>
  fullName: Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable<T>
  nameWithType.vb: IReadOnlyObservable(Of T)
  fullName.vb: Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable(Of T)
  name.vb: IReadOnlyObservable(Of T)
  spec.csharp:
  - uid: Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable`1
    name: IReadOnlyObservable
    nameWithType: IReadOnlyObservable
    fullName: Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable`1
    name: IReadOnlyObservable
    nameWithType: IReadOnlyObservable
    fullName: Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IObservable`1
  isExternal: true
  name: IObservable<>
  nameWithType: IObservable<>
  fullName: System.IObservable<>
  nameWithType.vb: IObservable(Of )
  fullName.vb: System.IObservable(Of )
  name.vb: IObservable(Of )
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable`1.#ctor*
  commentId: Overload:Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable`1.#ctor
  isExternal: true
  name: ReadOnlyBehaviorObservable
  nameWithType: ReadOnlyBehaviorObservable<T>.ReadOnlyBehaviorObservable
  fullName: Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable<T>.ReadOnlyBehaviorObservable
  nameWithType.vb: ReadOnlyBehaviorObservable(Of T).ReadOnlyBehaviorObservable
  fullName.vb: Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable(Of T).ReadOnlyBehaviorObservable
- uid: System.Reactive.Subjects.BehaviorSubject{{T}}
  commentId: '!:System.Reactive.Subjects.BehaviorSubject{``0}'
  definition: System.Reactive.Subjects.BehaviorSubject`1
  name: BehaviorSubject<T>
  nameWithType: BehaviorSubject<T>
  fullName: System.Reactive.Subjects.BehaviorSubject<T>
  nameWithType.vb: BehaviorSubject(Of T)
  fullName.vb: System.Reactive.Subjects.BehaviorSubject(Of T)
  name.vb: BehaviorSubject(Of T)
  spec.csharp:
  - uid: System.Reactive.Subjects.BehaviorSubject`1
    name: BehaviorSubject
    nameWithType: BehaviorSubject
    fullName: System.Reactive.Subjects.BehaviorSubject
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Reactive.Subjects.BehaviorSubject`1
    name: BehaviorSubject
    nameWithType: BehaviorSubject
    fullName: System.Reactive.Subjects.BehaviorSubject
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reactive.Subjects.BehaviorSubject`1
  isExternal: true
  name: BehaviorSubject<>
  nameWithType: BehaviorSubject<>
  fullName: System.Reactive.Subjects.BehaviorSubject<>
  nameWithType.vb: BehaviorSubject(Of )
  fullName.vb: System.Reactive.Subjects.BehaviorSubject(Of )
  name.vb: BehaviorSubject(Of )
  spec.csharp:
  - uid: System.Reactive.Subjects.BehaviorSubject`1
    name: BehaviorSubject
    nameWithType: BehaviorSubject
    fullName: System.Reactive.Subjects.BehaviorSubject
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Reactive.Subjects.BehaviorSubject`1
    name: BehaviorSubject
    nameWithType: BehaviorSubject
    fullName: System.Reactive.Subjects.BehaviorSubject
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable`1.Subscribe*
  commentId: Overload:Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable`1.Subscribe
  isExternal: true
  name: Subscribe
  nameWithType: ReadOnlyBehaviorObservable<T>.Subscribe
  fullName: Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable<T>.Subscribe
  nameWithType.vb: ReadOnlyBehaviorObservable(Of T).Subscribe
  fullName.vb: Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable(Of T).Subscribe
- uid: System.IObserver{{T}}
  commentId: '!:System.IObserver{``0}'
  definition: System.IObserver`1
  name: IObserver<T>
  nameWithType: IObserver<T>
  fullName: System.IObserver<T>
  nameWithType.vb: IObserver(Of T)
  fullName.vb: System.IObserver(Of T)
  name.vb: IObserver(Of T)
  spec.csharp:
  - uid: System.IObserver`1
    name: IObserver
    nameWithType: IObserver
    fullName: System.IObserver
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IObserver`1
    name: IObserver
    nameWithType: IObserver
    fullName: System.IObserver
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.IObserver`1
  isExternal: true
  name: IObserver<>
  nameWithType: IObserver<>
  fullName: System.IObserver<>
  nameWithType.vb: IObserver(Of )
  fullName.vb: System.IObserver(Of )
  name.vb: IObserver(Of )
  spec.csharp:
  - uid: System.IObserver`1
    name: IObserver
    nameWithType: IObserver
    fullName: System.IObserver
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IObserver`1
    name: IObserver
    nameWithType: IObserver
    fullName: System.IObserver
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable`1.TryGetValue*
  commentId: Overload:Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable`1.TryGetValue
  isExternal: true
  name: TryGetValue
  nameWithType: ReadOnlyBehaviorObservable<T>.TryGetValue
  fullName: Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable<T>.TryGetValue
  nameWithType.vb: ReadOnlyBehaviorObservable(Of T).TryGetValue
  fullName.vb: Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable(Of T).TryGetValue
- uid: Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable{{T}}.TryGetValue({T}@)
  commentId: M:Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable{`0}.TryGetValue(`0@)
  parent: Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable{{T}}
  definition: Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable`1.TryGetValue(`0@)
  name: TryGetValue(T)
  nameWithType: IReadOnlyObservable<T>.TryGetValue(T)
  fullName: Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable<T>.TryGetValue(T)
  nameWithType.vb: IReadOnlyObservable(Of T).TryGetValue(T)
  fullName.vb: Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable(Of T).TryGetValue(T)
  spec.csharp:
  - uid: Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable`1.TryGetValue(`0@)
    name: TryGetValue
    nameWithType: IReadOnlyObservable<T>.TryGetValue
    fullName: Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable<T>.TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable`1.TryGetValue(`0@)
    name: TryGetValue
    nameWithType: IReadOnlyObservable(Of T).TryGetValue
    fullName: Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable(Of T).TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable`1.TryGetValue(`0@)
  commentId: M:Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable`1.TryGetValue(`0@)
  isExternal: true
  name: TryGetValue(T)
  nameWithType: IReadOnlyObservable<T>.TryGetValue(T)
  fullName: Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable<T>.TryGetValue(T)
  nameWithType.vb: IReadOnlyObservable(Of T).TryGetValue(T)
  fullName.vb: Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable(Of T).TryGetValue(T)
  spec.csharp:
  - uid: Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable`1.TryGetValue(`0@)
    name: TryGetValue
    nameWithType: IReadOnlyObservable<T>.TryGetValue
    fullName: Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable<T>.TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable`1.TryGetValue(`0@)
    name: TryGetValue
    nameWithType: IReadOnlyObservable(Of T).TryGetValue
    fullName: Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable(Of T).TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable`1.Value*
  commentId: Overload:Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable`1.Value
  isExternal: true
  name: Value
  nameWithType: ReadOnlyBehaviorObservable<T>.Value
  fullName: Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable<T>.Value
  nameWithType.vb: ReadOnlyBehaviorObservable(Of T).Value
  fullName.vb: Whipstaff.Rx.ReadOnlyObservables.ReadOnlyBehaviorObservable(Of T).Value
- uid: Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable{{T}}.Value
  commentId: P:Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable{`0}.Value
  parent: Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable{{T}}
  definition: Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable`1.Value
  name: Value
  nameWithType: IReadOnlyObservable<T>.Value
  fullName: Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable<T>.Value
  nameWithType.vb: IReadOnlyObservable(Of T).Value
  fullName.vb: Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable(Of T).Value
- uid: Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable`1.Value
  commentId: P:Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable`1.Value
  isExternal: true
  name: Value
  nameWithType: IReadOnlyObservable<T>.Value
  fullName: Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable<T>.Value
  nameWithType.vb: IReadOnlyObservable(Of T).Value
  fullName.vb: Whipstaff.Rx.ReadOnlyObservables.IReadOnlyObservable(Of T).Value
