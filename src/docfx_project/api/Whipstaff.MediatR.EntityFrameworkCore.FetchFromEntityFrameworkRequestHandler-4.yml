### YamlMime:ManagedReference
items:
- uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4
  commentId: T:Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4
  id: FetchFromEntityFrameworkRequestHandler`4
  parent: Whipstaff.MediatR.EntityFrameworkCore
  children:
  - Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.#ctor(System.Func{System.Threading.Tasks.Task{`1}})
  - Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetDbSet(`1)
  - Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetResultAsync(System.Linq.IQueryable{`3},System.Threading.CancellationToken)
  - Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetSelector
  - Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetWherePredicate(`0)
  - Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.Handle(`0,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>
  nameWithType: FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>
  fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>
  type: Class
  source:
    path: Whipstaff.MediatR.EntityFrameworkCore
    isExternal: true
  assemblies:
  - Whipstaff.MediatR.EntityFrameworkCore
  namespace: Whipstaff.MediatR.EntityFrameworkCore
  summary: "\nMediatR request handler for acting on an entity framework dbset.\n"
  syntax:
    content: 'public abstract class FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult> : Object, IRequestHandler<TRequest, TResult> where TRequest : IRequest<TResult> where TDbContext : DbContext where TEntity : class'
    typeParameters:
    - id: TRequest
      description: The type for the MediatR Request.
    - id: TDbContext
      description: The type for the Entity Framework DB Context.
    - id: TEntity
      description: The type for the POCO object.
    - id: TResult
      description: The type for the Result.
    content.vb: >-
      Public MustInherit Class FetchFromEntityFrameworkRequestHandler(Of TRequest As IRequest(Of TResult), TDbContext As DbContext, TEntity As Class, TResult)
          Inherits Object
          Implements IRequestHandler(Of TRequest, TResult)
  inheritance:
  - System.Object
  derivedClasses:
  - Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkByInt32IdRequestHandler`4
  - Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkByLongIdRequestHandler`4
  implements:
  - MediatR.IRequestHandler{{TRequest},{TResult}}
  nameWithType.vb: FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult)
  name.vb: FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult)
- uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.#ctor(System.Func{System.Threading.Tasks.Task{`1}})
  commentId: M:Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.#ctor(System.Func{System.Threading.Tasks.Task{`1}})
  id: '#ctor(System.Func{System.Threading.Tasks.Task{`1}})'
  parent: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4
  langs:
  - csharp
  - vb
  name: FetchFromEntityFrameworkRequestHandler(Func<Task<TDbContext>>)
  nameWithType: FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.FetchFromEntityFrameworkRequestHandler(Func<Task<TDbContext>>)
  fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.FetchFromEntityFrameworkRequestHandler(System.Func<System.Threading.Tasks.Task<TDbContext>>)
  type: Constructor
  source:
    path: Whipstaff.MediatR.EntityFrameworkCore
    isExternal: true
  assemblies:
  - Whipstaff.MediatR.EntityFrameworkCore
  namespace: Whipstaff.MediatR.EntityFrameworkCore
  summary: "\nInitializes a new instance of the <xref href=\"Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler%604\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  syntax:
    content: protected FetchFromEntityFrameworkRequestHandler(Func<Task<TDbContext>> dbContextFactory)
    parameters:
    - id: dbContextFactory
      type: System.Func{System.Threading.Tasks.Task{{TDbContext}}}
      description: The factory for the database context.
    content.vb: Protected Sub New(dbContextFactory As Func(Of Task(Of TDbContext)))
  overload: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.#ctor*
  nameWithType.vb: FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).FetchFromEntityFrameworkRequestHandler(Func(Of Task(Of TDbContext)))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).FetchFromEntityFrameworkRequestHandler(System.Func(Of System.Threading.Tasks.Task(Of TDbContext)))
  name.vb: FetchFromEntityFrameworkRequestHandler(Func(Of Task(Of TDbContext)))
- uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.Handle(`0,System.Threading.CancellationToken)
  commentId: M:Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.Handle(`0,System.Threading.CancellationToken)
  id: Handle(`0,System.Threading.CancellationToken)
  parent: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4
  langs:
  - csharp
  - vb
  name: Handle(TRequest, CancellationToken)
  nameWithType: FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.Handle(TRequest, CancellationToken)
  fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.Handle(TRequest, System.Threading.CancellationToken)
  type: Method
  source:
    path: Whipstaff.MediatR.EntityFrameworkCore
    isExternal: true
  assemblies:
  - Whipstaff.MediatR.EntityFrameworkCore
  namespace: Whipstaff.MediatR.EntityFrameworkCore
  syntax:
    content: public Task<TResult> Handle(TRequest request, CancellationToken cancellationToken)
    parameters:
    - id: request
      type: '{TRequest}'
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{{TResult}}
    content.vb: Public Function Handle(request As TRequest, cancellationToken As CancellationToken) As Task(Of TResult)
  overload: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.Handle*
  nameWithType.vb: FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).Handle(TRequest, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).Handle(TRequest, System.Threading.CancellationToken)
- uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetWherePredicate(`0)
  commentId: M:Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetWherePredicate(`0)
  id: GetWherePredicate(`0)
  parent: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4
  langs:
  - csharp
  - vb
  name: GetWherePredicate(TRequest)
  nameWithType: FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetWherePredicate(TRequest)
  fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetWherePredicate(TRequest)
  type: Method
  source:
    path: Whipstaff.MediatR.EntityFrameworkCore
    isExternal: true
  assemblies:
  - Whipstaff.MediatR.EntityFrameworkCore
  namespace: Whipstaff.MediatR.EntityFrameworkCore
  summary: "\nGets the Where predicate for the query.\n"
  syntax:
    content: protected abstract Expression<Func<TEntity, bool>> GetWherePredicate(TRequest request)
    parameters:
    - id: request
      type: '{TRequest}'
      description: MediatR request.
    return:
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
      description: Where predicate for the query.
    content.vb: Protected MustOverride Function GetWherePredicate(request As TRequest) As Expression(Of Func(Of TEntity, Boolean))
  overload: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetWherePredicate*
  nameWithType.vb: FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetWherePredicate(TRequest)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetWherePredicate(TRequest)
- uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetSelector
  commentId: M:Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetSelector
  id: GetSelector
  parent: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4
  langs:
  - csharp
  - vb
  name: GetSelector()
  nameWithType: FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetSelector()
  fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetSelector()
  type: Method
  source:
    path: Whipstaff.MediatR.EntityFrameworkCore
    isExternal: true
  assemblies:
  - Whipstaff.MediatR.EntityFrameworkCore
  namespace: Whipstaff.MediatR.EntityFrameworkCore
  summary: "\nGets the Selector for the result output from the query.\n"
  syntax:
    content: protected abstract Expression<Func<TEntity, TResult>> GetSelector()
    return:
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},{TResult}}}
      description: Selector for the result output from the query.
    content.vb: Protected MustOverride Function GetSelector As Expression(Of Func(Of TEntity, TResult))
  overload: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetSelector*
  nameWithType.vb: FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetSelector()
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetSelector()
- uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetDbSet(`1)
  commentId: M:Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetDbSet(`1)
  id: GetDbSet(`1)
  parent: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4
  langs:
  - csharp
  - vb
  name: GetDbSet(TDbContext)
  nameWithType: FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetDbSet(TDbContext)
  fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetDbSet(TDbContext)
  type: Method
  source:
    path: Whipstaff.MediatR.EntityFrameworkCore
    isExternal: true
  assemblies:
  - Whipstaff.MediatR.EntityFrameworkCore
  namespace: Whipstaff.MediatR.EntityFrameworkCore
  summary: "\nGets the DBSet from the DBContext that contains the relevant entity.\n"
  syntax:
    content: protected abstract DbSet<TEntity> GetDbSet(TDbContext dbContext)
    parameters:
    - id: dbContext
      type: '{TDbContext}'
      description: Database Context.
    return:
      type: Microsoft.EntityFrameworkCore.DbSet{{TEntity}}
      description: DBSet from the DBContext that contains the relevant entity.
    content.vb: Protected MustOverride Function GetDbSet(dbContext As TDbContext) As DbSet(Of TEntity)
  overload: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetDbSet*
  nameWithType.vb: FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetDbSet(TDbContext)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetDbSet(TDbContext)
- uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetResultAsync(System.Linq.IQueryable{`3},System.Threading.CancellationToken)
  commentId: M:Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetResultAsync(System.Linq.IQueryable{`3},System.Threading.CancellationToken)
  id: GetResultAsync(System.Linq.IQueryable{`3},System.Threading.CancellationToken)
  parent: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4
  langs:
  - csharp
  - vb
  name: GetResultAsync(IQueryable<TResult>, CancellationToken)
  nameWithType: FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetResultAsync(IQueryable<TResult>, CancellationToken)
  fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetResultAsync(System.Linq.IQueryable<TResult>, System.Threading.CancellationToken)
  type: Method
  source:
    path: Whipstaff.MediatR.EntityFrameworkCore
    isExternal: true
  assemblies:
  - Whipstaff.MediatR.EntityFrameworkCore
  namespace: Whipstaff.MediatR.EntityFrameworkCore
  summary: "\nGets the result from the query.\n"
  syntax:
    content: protected abstract Task<TResult> GetResultAsync(IQueryable<TResult> queryable, CancellationToken cancellationToken)
    parameters:
    - id: queryable
      type: System.Linq.IQueryable{{TResult}}
      description: Query to process.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: Result from query.
    content.vb: Protected MustOverride Function GetResultAsync(queryable As IQueryable(Of TResult), cancellationToken As CancellationToken) As Task(Of TResult)
  overload: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetResultAsync*
  nameWithType.vb: FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetResultAsync(IQueryable(Of TResult), CancellationToken)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetResultAsync(System.Linq.IQueryable(Of TResult), System.Threading.CancellationToken)
  name.vb: GetResultAsync(IQueryable(Of TResult), CancellationToken)
references:
- uid: Whipstaff.MediatR.EntityFrameworkCore
  commentId: N:Whipstaff.MediatR.EntityFrameworkCore
  isExternal: true
  name: Whipstaff.MediatR.EntityFrameworkCore
  nameWithType: Whipstaff.MediatR.EntityFrameworkCore
  fullName: Whipstaff.MediatR.EntityFrameworkCore
- uid: MediatR.IRequestHandler{{TRequest},{TResult}}
  commentId: '!:MediatR.IRequestHandler{`0,`3}'
  definition: MediatR.IRequestHandler`2
  name: IRequestHandler<TRequest, TResult>
  nameWithType: IRequestHandler<TRequest, TResult>
  fullName: MediatR.IRequestHandler<TRequest, TResult>
  nameWithType.vb: IRequestHandler(Of TRequest, TResult)
  fullName.vb: MediatR.IRequestHandler(Of TRequest, TResult)
  name.vb: IRequestHandler(Of TRequest, TResult)
  spec.csharp:
  - uid: MediatR.IRequestHandler`2
    name: IRequestHandler
    nameWithType: IRequestHandler
    fullName: MediatR.IRequestHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MediatR.IRequestHandler`2
    name: IRequestHandler
    nameWithType: IRequestHandler
    fullName: MediatR.IRequestHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: MediatR.IRequestHandler`2
  isExternal: true
  name: IRequestHandler<, >
  nameWithType: IRequestHandler<, >
  fullName: MediatR.IRequestHandler<, >
  nameWithType.vb: IRequestHandler(Of , )
  fullName.vb: MediatR.IRequestHandler(Of , )
  name.vb: IRequestHandler(Of , )
  spec.csharp:
  - uid: MediatR.IRequestHandler`2
    name: IRequestHandler
    nameWithType: IRequestHandler
    fullName: MediatR.IRequestHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MediatR.IRequestHandler`2
    name: IRequestHandler
    nameWithType: IRequestHandler
    fullName: MediatR.IRequestHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.#ctor*
  commentId: Overload:Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.#ctor
  isExternal: true
  name: FetchFromEntityFrameworkRequestHandler
  nameWithType: FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.FetchFromEntityFrameworkRequestHandler
  fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.FetchFromEntityFrameworkRequestHandler
  nameWithType.vb: FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).FetchFromEntityFrameworkRequestHandler
  fullName.vb: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).FetchFromEntityFrameworkRequestHandler
- uid: System.Func{System.Threading.Tasks.Task{{TDbContext}}}
  commentId: '!:System.Func{System.Threading.Tasks.Task{`1}}'
  definition: System.Func`1
  name: Func<Task<TDbContext>>
  nameWithType: Func<Task<TDbContext>>
  fullName: System.Func<System.Threading.Tasks.Task<TDbContext>>
  nameWithType.vb: Func(Of Task(Of TDbContext))
  fullName.vb: System.Func(Of System.Threading.Tasks.Task(Of TDbContext))
  name.vb: Func(Of Task(Of TDbContext))
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`1
  isExternal: true
  name: Func<>
  nameWithType: Func<>
  fullName: System.Func<>
  nameWithType.vb: Func(Of )
  fullName.vb: System.Func(Of )
  name.vb: Func(Of )
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.Handle*
  commentId: Overload:Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.Handle
  isExternal: true
  name: Handle
  nameWithType: FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.Handle
  fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.Handle
  nameWithType.vb: FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).Handle
  fullName.vb: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).Handle
- uid: '{TRequest}'
  commentId: '!:TRequest'
  definition: TRequest
  name: TRequest
  nameWithType: TRequest
  fullName: TRequest
- uid: System.Threading.CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{{TResult}}
  commentId: '!:System.Threading.Tasks.Task{``0}'
  definition: System.Threading.Tasks.Task`1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TRequest
  name: TRequest
  nameWithType: TRequest
  fullName: TRequest
- uid: System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetWherePredicate*
  commentId: Overload:Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetWherePredicate
  isExternal: true
  name: GetWherePredicate
  nameWithType: FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetWherePredicate
  fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetWherePredicate
  nameWithType.vb: FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetWherePredicate
  fullName.vb: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetWherePredicate
- uid: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
  commentId: '!:System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}}'
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TEntity, Boolean>>
  nameWithType: Expression<Func<TEntity, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of TEntity, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean))
  name.vb: Expression(Of Func(Of TEntity, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<>
  nameWithType: Expression<>
  fullName: System.Linq.Expressions.Expression<>
  nameWithType.vb: Expression(Of )
  fullName.vb: System.Linq.Expressions.Expression(Of )
  name.vb: Expression(Of )
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetSelector*
  commentId: Overload:Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetSelector
  isExternal: true
  name: GetSelector
  nameWithType: FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetSelector
  fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetSelector
  nameWithType.vb: FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetSelector
  fullName.vb: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetSelector
- uid: System.Linq.Expressions.Expression{System.Func{{TEntity},{TResult}}}
  commentId: '!:System.Linq.Expressions.Expression{System.Func{`2,`3}}'
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TEntity, TResult>>
  nameWithType: Expression<Func<TEntity, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<TEntity, TResult>>
  nameWithType.vb: Expression(Of Func(Of TEntity, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TResult))
  name.vb: Expression(Of Func(Of TEntity, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetDbSet*
  commentId: Overload:Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetDbSet
  isExternal: true
  name: GetDbSet
  nameWithType: FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetDbSet
  fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetDbSet
  nameWithType.vb: FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetDbSet
  fullName.vb: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetDbSet
- uid: '{TDbContext}'
  commentId: '!:TDbContext'
  definition: TDbContext
  name: TDbContext
  nameWithType: TDbContext
  fullName: TDbContext
- uid: Microsoft.EntityFrameworkCore.DbSet{{TEntity}}
  commentId: '!:Microsoft.EntityFrameworkCore.DbSet{`2}'
  definition: Microsoft.EntityFrameworkCore.DbSet`1
  name: DbSet<TEntity>
  nameWithType: DbSet<TEntity>
  fullName: Microsoft.EntityFrameworkCore.DbSet<TEntity>
  nameWithType.vb: DbSet(Of TEntity)
  fullName.vb: Microsoft.EntityFrameworkCore.DbSet(Of TEntity)
  name.vb: DbSet(Of TEntity)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.DbSet`1
    name: DbSet
    nameWithType: DbSet
    fullName: Microsoft.EntityFrameworkCore.DbSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.DbSet`1
    name: DbSet
    nameWithType: DbSet
    fullName: Microsoft.EntityFrameworkCore.DbSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: TDbContext
  name: TDbContext
  nameWithType: TDbContext
  fullName: TDbContext
- uid: Microsoft.EntityFrameworkCore.DbSet`1
  isExternal: true
  name: DbSet<>
  nameWithType: DbSet<>
  fullName: Microsoft.EntityFrameworkCore.DbSet<>
  nameWithType.vb: DbSet(Of )
  fullName.vb: Microsoft.EntityFrameworkCore.DbSet(Of )
  name.vb: DbSet(Of )
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.DbSet`1
    name: DbSet
    nameWithType: DbSet
    fullName: Microsoft.EntityFrameworkCore.DbSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.DbSet`1
    name: DbSet
    nameWithType: DbSet
    fullName: Microsoft.EntityFrameworkCore.DbSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetResultAsync*
  commentId: Overload:Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetResultAsync
  isExternal: true
  name: GetResultAsync
  nameWithType: FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetResultAsync
  fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetResultAsync
  nameWithType.vb: FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetResultAsync
  fullName.vb: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetResultAsync
- uid: System.Linq.IQueryable{{TResult}}
  commentId: '!:System.Linq.IQueryable{`3}'
  definition: System.Linq.IQueryable`1
  name: IQueryable<TResult>
  nameWithType: IQueryable<TResult>
  fullName: System.Linq.IQueryable<TResult>
  nameWithType.vb: IQueryable(Of TResult)
  fullName.vb: System.Linq.IQueryable(Of TResult)
  name.vb: IQueryable(Of TResult)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable`1
  isExternal: true
  name: IQueryable<>
  nameWithType: IQueryable<>
  fullName: System.Linq.IQueryable<>
  nameWithType.vb: IQueryable(Of )
  fullName.vb: System.Linq.IQueryable(Of )
  name.vb: IQueryable(Of )
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
