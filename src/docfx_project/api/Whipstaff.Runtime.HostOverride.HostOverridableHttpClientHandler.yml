### YamlMime:ManagedReference
items:
- uid: Whipstaff.Runtime.HostOverride.HostOverridableHttpClientHandler
  commentId: T:Whipstaff.Runtime.HostOverride.HostOverridableHttpClientHandler
  id: HostOverridableHttpClientHandler
  parent: Whipstaff.Runtime.HostOverride
  children:
  - Whipstaff.Runtime.HostOverride.HostOverridableHttpClientHandler.#ctor(Whipstaff.Runtime.HostOverride.IHostOverride)
  - Whipstaff.Runtime.HostOverride.HostOverridableHttpClientHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: HostOverridableHttpClientHandler
  nameWithType: HostOverridableHttpClientHandler
  fullName: Whipstaff.Runtime.HostOverride.HostOverridableHttpClientHandler
  type: Class
  source:
    path: Whipstaff.Runtime
    isExternal: true
  assemblies:
  - Whipstaff.Runtime
  namespace: Whipstaff.Runtime.HostOverride
  summary: "\nHttp Client Handler that allows host overriding.\n"
  remarks: "\nBased upon: https://stackoverflow.com/questions/58547451/is-it-possible-to-set-custom-dns-resolver-in-cs-httpclient\nSplit out logic to make it re-usable in different scenario&apos;s without having to re-implement this class.\n"
  syntax:
    content: 'public class HostOverridableHttpClientHandler : HttpClientHandler'
    content.vb: >-
      Public Class HostOverridableHttpClientHandler
          Inherits HttpClientHandler
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Whipstaff.Runtime.HostOverride.HostOverridableHttpClientHandler.#ctor(Whipstaff.Runtime.HostOverride.IHostOverride)
  commentId: M:Whipstaff.Runtime.HostOverride.HostOverridableHttpClientHandler.#ctor(Whipstaff.Runtime.HostOverride.IHostOverride)
  id: '#ctor(Whipstaff.Runtime.HostOverride.IHostOverride)'
  parent: Whipstaff.Runtime.HostOverride.HostOverridableHttpClientHandler
  langs:
  - csharp
  - vb
  name: HostOverridableHttpClientHandler(IHostOverride)
  nameWithType: HostOverridableHttpClientHandler.HostOverridableHttpClientHandler(IHostOverride)
  fullName: Whipstaff.Runtime.HostOverride.HostOverridableHttpClientHandler.HostOverridableHttpClientHandler(Whipstaff.Runtime.HostOverride.IHostOverride)
  type: Constructor
  source:
    path: Whipstaff.Runtime
    isExternal: true
  assemblies:
  - Whipstaff.Runtime
  namespace: Whipstaff.Runtime.HostOverride
  summary: "\nInitializes a new instance of the <xref href=\"Whipstaff.Runtime.HostOverride.HostOverridableHttpClientHandler\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  syntax:
    content: public HostOverridableHttpClientHandler(IHostOverride hostOverride)
    parameters:
    - id: hostOverride
      type: Whipstaff.Runtime.HostOverride.IHostOverride
      description: Implementation of a host override helper.
    content.vb: Public Sub New(hostOverride As IHostOverride)
  overload: Whipstaff.Runtime.HostOverride.HostOverridableHttpClientHandler.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Whipstaff.Runtime.HostOverride.HostOverridableHttpClientHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  commentId: M:Whipstaff.Runtime.HostOverride.HostOverridableHttpClientHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  id: SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: Whipstaff.Runtime.HostOverride.HostOverridableHttpClientHandler
  langs:
  - csharp
  - vb
  name: SendAsync(HttpRequestMessage, CancellationToken)
  nameWithType: HostOverridableHttpClientHandler.SendAsync(HttpRequestMessage, CancellationToken)
  fullName: Whipstaff.Runtime.HostOverride.HostOverridableHttpClientHandler.SendAsync(System.Net.Http.HttpRequestMessage, System.Threading.CancellationToken)
  type: Method
  source:
    path: Whipstaff.Runtime
    isExternal: true
  assemblies:
  - Whipstaff.Runtime
  namespace: Whipstaff.Runtime.HostOverride
  syntax:
    content: protected override Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
    content.vb: Protected Overrides Function SendAsync(request As HttpRequestMessage, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)
  overload: Whipstaff.Runtime.HostOverride.HostOverridableHttpClientHandler.SendAsync*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
references:
- uid: Whipstaff.Runtime.HostOverride
  commentId: N:Whipstaff.Runtime.HostOverride
  isExternal: true
  name: Whipstaff.Runtime.HostOverride
  nameWithType: Whipstaff.Runtime.HostOverride
  fullName: Whipstaff.Runtime.HostOverride
- uid: Whipstaff.Runtime.HostOverride.HostOverridableHttpClientHandler.#ctor*
  commentId: Overload:Whipstaff.Runtime.HostOverride.HostOverridableHttpClientHandler.#ctor
  isExternal: true
  name: HostOverridableHttpClientHandler
  nameWithType: HostOverridableHttpClientHandler.HostOverridableHttpClientHandler
  fullName: Whipstaff.Runtime.HostOverride.HostOverridableHttpClientHandler.HostOverridableHttpClientHandler
- uid: Whipstaff.Runtime.HostOverride.IHostOverride
  commentId: T:Whipstaff.Runtime.HostOverride.IHostOverride
  parent: Whipstaff.Runtime.HostOverride
  isExternal: true
  name: IHostOverride
  nameWithType: IHostOverride
  fullName: Whipstaff.Runtime.HostOverride.IHostOverride
- uid: Whipstaff.Runtime.HostOverride.HostOverridableHttpClientHandler.SendAsync*
  commentId: Overload:Whipstaff.Runtime.HostOverride.HostOverridableHttpClientHandler.SendAsync
  isExternal: true
  name: SendAsync
  nameWithType: HostOverridableHttpClientHandler.SendAsync
  fullName: Whipstaff.Runtime.HostOverride.HostOverridableHttpClientHandler.SendAsync
- uid: System.Net.Http.HttpRequestMessage
  isExternal: true
  name: HttpRequestMessage
  nameWithType: HttpRequestMessage
  fullName: System.Net.Http.HttpRequestMessage
- uid: System.Threading.CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
  commentId: '!:System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}'
  definition: System.Threading.Tasks.Task`1
  name: Task<HttpResponseMessage>
  nameWithType: Task<HttpResponseMessage>
  fullName: System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>
  nameWithType.vb: Task(Of HttpResponseMessage)
  fullName.vb: System.Threading.Tasks.Task(Of System.Net.Http.HttpResponseMessage)
  name.vb: Task(Of HttpResponseMessage)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.Http.HttpResponseMessage
    name: HttpResponseMessage
    nameWithType: HttpResponseMessage
    fullName: System.Net.Http.HttpResponseMessage
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Net.Http.HttpResponseMessage
    name: HttpResponseMessage
    nameWithType: HttpResponseMessage
    fullName: System.Net.Http.HttpResponseMessage
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
