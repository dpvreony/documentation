### YamlMime:ManagedReference
items:
- uid: Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager`1
  commentId: T:Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager`1
  id: QueueProcessManager`1
  parent: Whipstaff.MediatR.Foundatio.QueueProcessing
  children:
  - Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager`1.#ctor(Foundatio.Queues.IQueue{`0},Microsoft.Extensions.Logging.ILogger{Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager{`0}})
  - Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager`1.ExecuteAsync(System.Threading.CancellationToken)
  - Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager`1.OnMessageReceivedAsync(Foundatio.Queues.IQueueEntry{`0})
  langs:
  - csharp
  - vb
  name: QueueProcessManager<TMessage>
  nameWithType: QueueProcessManager<TMessage>
  fullName: Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager<TMessage>
  type: Class
  source:
    path: Whipstaff.MediatR.Foundatio
    isExternal: true
  assemblies:
  - Whipstaff.MediatR.Foundatio
  namespace: Whipstaff.MediatR.Foundatio.QueueProcessing
  summary: "\nA process manager for dealing with a Foundatio based queue mechanism.\n"
  syntax:
    content: 'public abstract class QueueProcessManager<TMessage> : BackgroundService where TMessage : class'
    typeParameters:
    - id: TMessage
      description: Type for the message being processed on the queue.
    content.vb: >-
      Public MustInherit Class QueueProcessManager(Of TMessage As Class)
          Inherits BackgroundService
  inheritance:
  - System.Object
  nameWithType.vb: QueueProcessManager(Of TMessage)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager(Of TMessage)
  name.vb: QueueProcessManager(Of TMessage)
- uid: Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager`1.#ctor(Foundatio.Queues.IQueue{`0},Microsoft.Extensions.Logging.ILogger{Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager{`0}})
  commentId: M:Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager`1.#ctor(Foundatio.Queues.IQueue{`0},Microsoft.Extensions.Logging.ILogger{Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager{`0}})
  id: '#ctor(Foundatio.Queues.IQueue{`0},Microsoft.Extensions.Logging.ILogger{Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager{`0}})'
  parent: Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager`1
  langs:
  - csharp
  - vb
  name: QueueProcessManager(IQueue<TMessage>, ILogger<QueueProcessManager<TMessage>>)
  nameWithType: QueueProcessManager<TMessage>.QueueProcessManager(IQueue<TMessage>, ILogger<QueueProcessManager<TMessage>>)
  fullName: Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager<TMessage>.QueueProcessManager(Foundatio.Queues.IQueue<TMessage>, Microsoft.Extensions.Logging.ILogger<Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager<TMessage>>)
  type: Constructor
  source:
    path: Whipstaff.MediatR.Foundatio
    isExternal: true
  assemblies:
  - Whipstaff.MediatR.Foundatio
  namespace: Whipstaff.MediatR.Foundatio.QueueProcessing
  summary: "\nInitializes a new instance of the <xref href=\"Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager%601\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  syntax:
    content: protected QueueProcessManager(IQueue<TMessage> queue, ILogger<QueueProcessManager<TMessage>> logger)
    parameters:
    - id: queue
      type: Foundatio.Queues.IQueue{{TMessage}}
      description: The queue to monitor.
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger{Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager{{TMessage}}}
      description: Logging framework instance.
    content.vb: Protected Sub New(queue As IQueue(Of TMessage), logger As ILogger(Of QueueProcessManager(Of TMessage)))
  overload: Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager`1.#ctor*
  nameWithType.vb: QueueProcessManager(Of TMessage).QueueProcessManager(IQueue(Of TMessage), ILogger(Of QueueProcessManager(Of TMessage)))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager(Of TMessage).QueueProcessManager(Foundatio.Queues.IQueue(Of TMessage), Microsoft.Extensions.Logging.ILogger(Of Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager(Of TMessage)))
  name.vb: QueueProcessManager(IQueue(Of TMessage), ILogger(Of QueueProcessManager(Of TMessage)))
- uid: Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager`1.ExecuteAsync(System.Threading.CancellationToken)
  commentId: M:Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager`1.ExecuteAsync(System.Threading.CancellationToken)
  id: ExecuteAsync(System.Threading.CancellationToken)
  parent: Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager`1
  langs:
  - csharp
  - vb
  name: ExecuteAsync(CancellationToken)
  nameWithType: QueueProcessManager<TMessage>.ExecuteAsync(CancellationToken)
  fullName: Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager<TMessage>.ExecuteAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: Whipstaff.MediatR.Foundatio
    isExternal: true
  assemblies:
  - Whipstaff.MediatR.Foundatio
  namespace: Whipstaff.MediatR.Foundatio.QueueProcessing
  syntax:
    content: protected override sealed Task ExecuteAsync(CancellationToken stoppingToken)
    parameters:
    - id: stoppingToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Protected NotOverridable Overrides Function ExecuteAsync(stoppingToken As CancellationToken) As Task
  overload: Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager`1.ExecuteAsync*
  nameWithType.vb: QueueProcessManager(Of TMessage).ExecuteAsync(CancellationToken)
  modifiers.csharp:
  - protected
  - override
  - sealed
  modifiers.vb:
  - Protected
  - Overrides
  - NotOverridable
  fullName.vb: Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager(Of TMessage).ExecuteAsync(System.Threading.CancellationToken)
- uid: Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager`1.OnMessageReceivedAsync(Foundatio.Queues.IQueueEntry{`0})
  commentId: M:Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager`1.OnMessageReceivedAsync(Foundatio.Queues.IQueueEntry{`0})
  id: OnMessageReceivedAsync(Foundatio.Queues.IQueueEntry{`0})
  parent: Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager`1
  langs:
  - csharp
  - vb
  name: OnMessageReceivedAsync(IQueueEntry<TMessage>)
  nameWithType: QueueProcessManager<TMessage>.OnMessageReceivedAsync(IQueueEntry<TMessage>)
  fullName: Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager<TMessage>.OnMessageReceivedAsync(Foundatio.Queues.IQueueEntry<TMessage>)
  type: Method
  source:
    path: Whipstaff.MediatR.Foundatio
    isExternal: true
  assemblies:
  - Whipstaff.MediatR.Foundatio
  namespace: Whipstaff.MediatR.Foundatio.QueueProcessing
  summary: "\nLogic for processing the message when it is received.\n"
  syntax:
    content: protected abstract Task OnMessageReceivedAsync(IQueueEntry<TMessage> queueEntry)
    parameters:
    - id: queueEntry
      type: Foundatio.Queues.IQueueEntry{{TMessage}}
      description: The message received from the queue.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the result of the asynchronous operation.
    content.vb: Protected MustOverride Function OnMessageReceivedAsync(queueEntry As IQueueEntry(Of TMessage)) As Task
  overload: Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager`1.OnMessageReceivedAsync*
  nameWithType.vb: QueueProcessManager(Of TMessage).OnMessageReceivedAsync(IQueueEntry(Of TMessage))
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager(Of TMessage).OnMessageReceivedAsync(Foundatio.Queues.IQueueEntry(Of TMessage))
  name.vb: OnMessageReceivedAsync(IQueueEntry(Of TMessage))
references:
- uid: Whipstaff.MediatR.Foundatio.QueueProcessing
  commentId: N:Whipstaff.MediatR.Foundatio.QueueProcessing
  isExternal: true
  name: Whipstaff.MediatR.Foundatio.QueueProcessing
  nameWithType: Whipstaff.MediatR.Foundatio.QueueProcessing
  fullName: Whipstaff.MediatR.Foundatio.QueueProcessing
- uid: Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager`1.#ctor*
  commentId: Overload:Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager`1.#ctor
  isExternal: true
  name: QueueProcessManager
  nameWithType: QueueProcessManager<TMessage>.QueueProcessManager
  fullName: Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager<TMessage>.QueueProcessManager
  nameWithType.vb: QueueProcessManager(Of TMessage).QueueProcessManager
  fullName.vb: Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager(Of TMessage).QueueProcessManager
- uid: Foundatio.Queues.IQueue{{TMessage}}
  commentId: '!:Foundatio.Queues.IQueue{`0}'
  definition: Foundatio.Queues.IQueue`1
  name: IQueue<TMessage>
  nameWithType: IQueue<TMessage>
  fullName: Foundatio.Queues.IQueue<TMessage>
  nameWithType.vb: IQueue(Of TMessage)
  fullName.vb: Foundatio.Queues.IQueue(Of TMessage)
  name.vb: IQueue(Of TMessage)
  spec.csharp:
  - uid: Foundatio.Queues.IQueue`1
    name: IQueue
    nameWithType: IQueue
    fullName: Foundatio.Queues.IQueue
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Foundatio.Queues.IQueue`1
    name: IQueue
    nameWithType: IQueue
    fullName: Foundatio.Queues.IQueue
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging.ILogger{Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager{{TMessage}}}
  commentId: '!:Microsoft.Extensions.Logging.ILogger{Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager{`0}}'
  definition: Microsoft.Extensions.Logging.ILogger`1
  name: ILogger<QueueProcessManager<TMessage>>
  nameWithType: ILogger<QueueProcessManager<TMessage>>
  fullName: Microsoft.Extensions.Logging.ILogger<Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager<TMessage>>
  nameWithType.vb: ILogger(Of QueueProcessManager(Of TMessage))
  fullName.vb: Microsoft.Extensions.Logging.ILogger(Of Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager(Of TMessage))
  name.vb: ILogger(Of QueueProcessManager(Of TMessage))
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager`1
    name: QueueProcessManager
    nameWithType: QueueProcessManager
    fullName: Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager`1
    name: QueueProcessManager
    nameWithType: QueueProcessManager
    fullName: Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Foundatio.Queues.IQueue`1
  isExternal: true
  name: IQueue<>
  nameWithType: IQueue<>
  fullName: Foundatio.Queues.IQueue<>
  nameWithType.vb: IQueue(Of )
  fullName.vb: Foundatio.Queues.IQueue(Of )
  name.vb: IQueue(Of )
  spec.csharp:
  - uid: Foundatio.Queues.IQueue`1
    name: IQueue
    nameWithType: IQueue
    fullName: Foundatio.Queues.IQueue
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Foundatio.Queues.IQueue`1
    name: IQueue
    nameWithType: IQueue
    fullName: Foundatio.Queues.IQueue
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging.ILogger`1
  isExternal: true
  name: ILogger<>
  nameWithType: ILogger<>
  fullName: Microsoft.Extensions.Logging.ILogger<>
  nameWithType.vb: ILogger(Of )
  fullName.vb: Microsoft.Extensions.Logging.ILogger(Of )
  name.vb: ILogger(Of )
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager`1.ExecuteAsync*
  commentId: Overload:Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager`1.ExecuteAsync
  isExternal: true
  name: ExecuteAsync
  nameWithType: QueueProcessManager<TMessage>.ExecuteAsync
  fullName: Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager<TMessage>.ExecuteAsync
  nameWithType.vb: QueueProcessManager(Of TMessage).ExecuteAsync
  fullName.vb: Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager(Of TMessage).ExecuteAsync
- uid: System.Threading.CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager`1.OnMessageReceivedAsync*
  commentId: Overload:Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager`1.OnMessageReceivedAsync
  isExternal: true
  name: OnMessageReceivedAsync
  nameWithType: QueueProcessManager<TMessage>.OnMessageReceivedAsync
  fullName: Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager<TMessage>.OnMessageReceivedAsync
  nameWithType.vb: QueueProcessManager(Of TMessage).OnMessageReceivedAsync
  fullName.vb: Whipstaff.MediatR.Foundatio.QueueProcessing.QueueProcessManager(Of TMessage).OnMessageReceivedAsync
- uid: Foundatio.Queues.IQueueEntry{{TMessage}}
  commentId: '!:Foundatio.Queues.IQueueEntry{`0}'
  definition: Foundatio.Queues.IQueueEntry`1
  name: IQueueEntry<TMessage>
  nameWithType: IQueueEntry<TMessage>
  fullName: Foundatio.Queues.IQueueEntry<TMessage>
  nameWithType.vb: IQueueEntry(Of TMessage)
  fullName.vb: Foundatio.Queues.IQueueEntry(Of TMessage)
  name.vb: IQueueEntry(Of TMessage)
  spec.csharp:
  - uid: Foundatio.Queues.IQueueEntry`1
    name: IQueueEntry
    nameWithType: IQueueEntry
    fullName: Foundatio.Queues.IQueueEntry
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Foundatio.Queues.IQueueEntry`1
    name: IQueueEntry
    nameWithType: IQueueEntry
    fullName: Foundatio.Queues.IQueueEntry
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TMessage
    nameWithType: TMessage
    fullName: TMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Foundatio.Queues.IQueueEntry`1
  commentId: '!:Foundatio.Queues.IQueueEntry`1'
  isExternal: true
  name: IQueueEntry<>
  nameWithType: IQueueEntry<>
  fullName: Foundatio.Queues.IQueueEntry<>
  nameWithType.vb: IQueueEntry(Of )
  fullName.vb: Foundatio.Queues.IQueueEntry(Of )
  name.vb: IQueueEntry(Of )
  spec.csharp:
  - uid: Foundatio.Queues.IQueueEntry`1
    name: IQueueEntry
    nameWithType: IQueueEntry
    fullName: Foundatio.Queues.IQueueEntry
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Foundatio.Queues.IQueueEntry`1
    name: IQueueEntry
    nameWithType: IQueueEntry
    fullName: Foundatio.Queues.IQueueEntry
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
