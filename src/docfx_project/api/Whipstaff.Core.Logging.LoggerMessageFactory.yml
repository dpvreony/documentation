### YamlMime:ManagedReference
items:
- uid: Whipstaff.Core.Logging.LoggerMessageFactory
  commentId: T:Whipstaff.Core.Logging.LoggerMessageFactory
  id: LoggerMessageFactory
  parent: Whipstaff.Core.Logging
  children:
  - Whipstaff.Core.Logging.LoggerMessageFactory.GetBasicLoggerMessageActionForLogLevelAndEventId(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId)
  - Whipstaff.Core.Logging.LoggerMessageFactory.GetCountOfMediatRHandlersRegisteredLoggerMessageAction
  - Whipstaff.Core.Logging.LoggerMessageFactory.GetCriticalBasicLoggerMessageActionForEventId(Microsoft.Extensions.Logging.EventId)
  - Whipstaff.Core.Logging.LoggerMessageFactory.GetDbContextSaveResultLoggerMessageAction
  - Whipstaff.Core.Logging.LoggerMessageFactory.GetDebugBasicLoggerMessageActionForEventId(Microsoft.Extensions.Logging.EventId)
  - Whipstaff.Core.Logging.LoggerMessageFactory.GetErrorBasicLoggerMessageActionForEventId(Microsoft.Extensions.Logging.EventId)
  - Whipstaff.Core.Logging.LoggerMessageFactory.GetInformationBasicLoggerMessageActionForEventId(Microsoft.Extensions.Logging.EventId)
  - Whipstaff.Core.Logging.LoggerMessageFactory.GetNoMediatRHandlersRegisteredForTypeLoggerMessageAction
  - Whipstaff.Core.Logging.LoggerMessageFactory.GetWarningBasicLoggerMessageActionForEventId(Microsoft.Extensions.Logging.EventId)
  langs:
  - csharp
  - vb
  name: LoggerMessageFactory
  nameWithType: LoggerMessageFactory
  fullName: Whipstaff.Core.Logging.LoggerMessageFactory
  type: Class
  source:
    path: Whipstaff.Core
    isExternal: true
  assemblies:
  - Whipstaff.Core
  namespace: Whipstaff.Core.Logging
  summary: "\nFactory Methods for Logger Messages.\n"
  syntax:
    content: 'public static class LoggerMessageFactory : Object'
    content.vb: >-
      Public Module LoggerMessageFactory
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Whipstaff.Core.Logging.LoggerMessageFactory.GetDbContextSaveResultLoggerMessageAction
  commentId: M:Whipstaff.Core.Logging.LoggerMessageFactory.GetDbContextSaveResultLoggerMessageAction
  id: GetDbContextSaveResultLoggerMessageAction
  parent: Whipstaff.Core.Logging.LoggerMessageFactory
  langs:
  - csharp
  - vb
  name: GetDbContextSaveResultLoggerMessageAction()
  nameWithType: LoggerMessageFactory.GetDbContextSaveResultLoggerMessageAction()
  fullName: Whipstaff.Core.Logging.LoggerMessageFactory.GetDbContextSaveResultLoggerMessageAction()
  type: Method
  source:
    path: Whipstaff.Core
    isExternal: true
  assemblies:
  - Whipstaff.Core
  namespace: Whipstaff.Core.Logging
  summary: "\nGets the Logger Message definition for the DbContext Save Result event.\n"
  syntax:
    content: public static Action<ILogger, int, Exception> GetDbContextSaveResultLoggerMessageAction()
    return:
      type: System.Action{Microsoft.Extensions.Logging.ILogger,System.Int32,System.Exception}
      description: Log Message Action.
    content.vb: Public Shared Function GetDbContextSaveResultLoggerMessageAction As Action(Of ILogger, Integer, Exception)
  overload: Whipstaff.Core.Logging.LoggerMessageFactory.GetDbContextSaveResultLoggerMessageAction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Whipstaff.Core.Logging.LoggerMessageFactory.GetNoMediatRHandlersRegisteredForTypeLoggerMessageAction
  commentId: M:Whipstaff.Core.Logging.LoggerMessageFactory.GetNoMediatRHandlersRegisteredForTypeLoggerMessageAction
  id: GetNoMediatRHandlersRegisteredForTypeLoggerMessageAction
  parent: Whipstaff.Core.Logging.LoggerMessageFactory
  langs:
  - csharp
  - vb
  name: GetNoMediatRHandlersRegisteredForTypeLoggerMessageAction()
  nameWithType: LoggerMessageFactory.GetNoMediatRHandlersRegisteredForTypeLoggerMessageAction()
  fullName: Whipstaff.Core.Logging.LoggerMessageFactory.GetNoMediatRHandlersRegisteredForTypeLoggerMessageAction()
  type: Method
  source:
    path: Whipstaff.Core
    isExternal: true
  assemblies:
  - Whipstaff.Core
  namespace: Whipstaff.Core.Logging
  summary: "\nGets the Logger Message definition for &quot;No MediatR handlers registered for type&quot; event.\n"
  syntax:
    content: public static Action<ILogger, Type, Exception> GetNoMediatRHandlersRegisteredForTypeLoggerMessageAction()
    return:
      type: System.Action{Microsoft.Extensions.Logging.ILogger,System.Type,System.Exception}
      description: Log Message Action.
    content.vb: Public Shared Function GetNoMediatRHandlersRegisteredForTypeLoggerMessageAction As Action(Of ILogger, Type, Exception)
  overload: Whipstaff.Core.Logging.LoggerMessageFactory.GetNoMediatRHandlersRegisteredForTypeLoggerMessageAction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Whipstaff.Core.Logging.LoggerMessageFactory.GetCountOfMediatRHandlersRegisteredLoggerMessageAction
  commentId: M:Whipstaff.Core.Logging.LoggerMessageFactory.GetCountOfMediatRHandlersRegisteredLoggerMessageAction
  id: GetCountOfMediatRHandlersRegisteredLoggerMessageAction
  parent: Whipstaff.Core.Logging.LoggerMessageFactory
  langs:
  - csharp
  - vb
  name: GetCountOfMediatRHandlersRegisteredLoggerMessageAction()
  nameWithType: LoggerMessageFactory.GetCountOfMediatRHandlersRegisteredLoggerMessageAction()
  fullName: Whipstaff.Core.Logging.LoggerMessageFactory.GetCountOfMediatRHandlersRegisteredLoggerMessageAction()
  type: Method
  source:
    path: Whipstaff.Core
    isExternal: true
  assemblies:
  - Whipstaff.Core
  namespace: Whipstaff.Core.Logging
  summary: "\nGets the Logger Message definition for the &quot;Number of MediatR handlers registered for type&quot; event.\n"
  syntax:
    content: public static Action<ILogger, Type, int, Exception> GetCountOfMediatRHandlersRegisteredLoggerMessageAction()
    return:
      type: System.Action{Microsoft.Extensions.Logging.ILogger,System.Type,System.Int32,System.Exception}
      description: Log Message Action.
    content.vb: Public Shared Function GetCountOfMediatRHandlersRegisteredLoggerMessageAction As Action(Of ILogger, Type, Integer, Exception)
  overload: Whipstaff.Core.Logging.LoggerMessageFactory.GetCountOfMediatRHandlersRegisteredLoggerMessageAction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Whipstaff.Core.Logging.LoggerMessageFactory.GetCriticalBasicLoggerMessageActionForEventId(Microsoft.Extensions.Logging.EventId)
  commentId: M:Whipstaff.Core.Logging.LoggerMessageFactory.GetCriticalBasicLoggerMessageActionForEventId(Microsoft.Extensions.Logging.EventId)
  id: GetCriticalBasicLoggerMessageActionForEventId(Microsoft.Extensions.Logging.EventId)
  parent: Whipstaff.Core.Logging.LoggerMessageFactory
  langs:
  - csharp
  - vb
  name: GetCriticalBasicLoggerMessageActionForEventId(EventId)
  nameWithType: LoggerMessageFactory.GetCriticalBasicLoggerMessageActionForEventId(EventId)
  fullName: Whipstaff.Core.Logging.LoggerMessageFactory.GetCriticalBasicLoggerMessageActionForEventId(Microsoft.Extensions.Logging.EventId)
  type: Method
  source:
    path: Whipstaff.Core
    isExternal: true
  assemblies:
  - Whipstaff.Core
  namespace: Whipstaff.Core.Logging
  summary: "\nGets a basic debug logger message action for an event id. Useful for basic logging of events where there is only\never a basic message.\n"
  syntax:
    content: public static Action<ILogger, string, Exception> GetCriticalBasicLoggerMessageActionForEventId(EventId eventId)
    parameters:
    - id: eventId
      type: Microsoft.Extensions.Logging.EventId
      description: The event id to define a log message action for.
    return:
      type: System.Action{Microsoft.Extensions.Logging.ILogger,System.String,System.Exception}
      description: Log Message Action.
    content.vb: Public Shared Function GetCriticalBasicLoggerMessageActionForEventId(eventId As EventId) As Action(Of ILogger, String, Exception)
  overload: Whipstaff.Core.Logging.LoggerMessageFactory.GetCriticalBasicLoggerMessageActionForEventId*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Whipstaff.Core.Logging.LoggerMessageFactory.GetDebugBasicLoggerMessageActionForEventId(Microsoft.Extensions.Logging.EventId)
  commentId: M:Whipstaff.Core.Logging.LoggerMessageFactory.GetDebugBasicLoggerMessageActionForEventId(Microsoft.Extensions.Logging.EventId)
  id: GetDebugBasicLoggerMessageActionForEventId(Microsoft.Extensions.Logging.EventId)
  parent: Whipstaff.Core.Logging.LoggerMessageFactory
  langs:
  - csharp
  - vb
  name: GetDebugBasicLoggerMessageActionForEventId(EventId)
  nameWithType: LoggerMessageFactory.GetDebugBasicLoggerMessageActionForEventId(EventId)
  fullName: Whipstaff.Core.Logging.LoggerMessageFactory.GetDebugBasicLoggerMessageActionForEventId(Microsoft.Extensions.Logging.EventId)
  type: Method
  source:
    path: Whipstaff.Core
    isExternal: true
  assemblies:
  - Whipstaff.Core
  namespace: Whipstaff.Core.Logging
  summary: "\nGets a basic debug logger message action for an event id. Useful for basic logging of events where there is only\never a basic message.\n"
  syntax:
    content: public static Action<ILogger, string, Exception> GetDebugBasicLoggerMessageActionForEventId(EventId eventId)
    parameters:
    - id: eventId
      type: Microsoft.Extensions.Logging.EventId
      description: The event id to define a log message action for.
    return:
      type: System.Action{Microsoft.Extensions.Logging.ILogger,System.String,System.Exception}
      description: Log Message Action.
    content.vb: Public Shared Function GetDebugBasicLoggerMessageActionForEventId(eventId As EventId) As Action(Of ILogger, String, Exception)
  overload: Whipstaff.Core.Logging.LoggerMessageFactory.GetDebugBasicLoggerMessageActionForEventId*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Whipstaff.Core.Logging.LoggerMessageFactory.GetErrorBasicLoggerMessageActionForEventId(Microsoft.Extensions.Logging.EventId)
  commentId: M:Whipstaff.Core.Logging.LoggerMessageFactory.GetErrorBasicLoggerMessageActionForEventId(Microsoft.Extensions.Logging.EventId)
  id: GetErrorBasicLoggerMessageActionForEventId(Microsoft.Extensions.Logging.EventId)
  parent: Whipstaff.Core.Logging.LoggerMessageFactory
  langs:
  - csharp
  - vb
  name: GetErrorBasicLoggerMessageActionForEventId(EventId)
  nameWithType: LoggerMessageFactory.GetErrorBasicLoggerMessageActionForEventId(EventId)
  fullName: Whipstaff.Core.Logging.LoggerMessageFactory.GetErrorBasicLoggerMessageActionForEventId(Microsoft.Extensions.Logging.EventId)
  type: Method
  source:
    path: Whipstaff.Core
    isExternal: true
  assemblies:
  - Whipstaff.Core
  namespace: Whipstaff.Core.Logging
  summary: "\nGets a basic error logger message action for an event id. Useful for basic logging of events where there is only\never a basic message.\n"
  syntax:
    content: public static Action<ILogger, string, Exception> GetErrorBasicLoggerMessageActionForEventId(EventId eventId)
    parameters:
    - id: eventId
      type: Microsoft.Extensions.Logging.EventId
      description: The event id to define a log message action for.
    return:
      type: System.Action{Microsoft.Extensions.Logging.ILogger,System.String,System.Exception}
      description: Log Message Action.
    content.vb: Public Shared Function GetErrorBasicLoggerMessageActionForEventId(eventId As EventId) As Action(Of ILogger, String, Exception)
  overload: Whipstaff.Core.Logging.LoggerMessageFactory.GetErrorBasicLoggerMessageActionForEventId*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Whipstaff.Core.Logging.LoggerMessageFactory.GetInformationBasicLoggerMessageActionForEventId(Microsoft.Extensions.Logging.EventId)
  commentId: M:Whipstaff.Core.Logging.LoggerMessageFactory.GetInformationBasicLoggerMessageActionForEventId(Microsoft.Extensions.Logging.EventId)
  id: GetInformationBasicLoggerMessageActionForEventId(Microsoft.Extensions.Logging.EventId)
  parent: Whipstaff.Core.Logging.LoggerMessageFactory
  langs:
  - csharp
  - vb
  name: GetInformationBasicLoggerMessageActionForEventId(EventId)
  nameWithType: LoggerMessageFactory.GetInformationBasicLoggerMessageActionForEventId(EventId)
  fullName: Whipstaff.Core.Logging.LoggerMessageFactory.GetInformationBasicLoggerMessageActionForEventId(Microsoft.Extensions.Logging.EventId)
  type: Method
  source:
    path: Whipstaff.Core
    isExternal: true
  assemblies:
  - Whipstaff.Core
  namespace: Whipstaff.Core.Logging
  summary: "\nGets a basic information logger message action for an event id. Useful for basic logging of events where there is only\never a basic message.\n"
  syntax:
    content: public static Action<ILogger, string, Exception> GetInformationBasicLoggerMessageActionForEventId(EventId eventId)
    parameters:
    - id: eventId
      type: Microsoft.Extensions.Logging.EventId
      description: The event id to define a log message action for.
    return:
      type: System.Action{Microsoft.Extensions.Logging.ILogger,System.String,System.Exception}
      description: Log Message Action.
    content.vb: Public Shared Function GetInformationBasicLoggerMessageActionForEventId(eventId As EventId) As Action(Of ILogger, String, Exception)
  overload: Whipstaff.Core.Logging.LoggerMessageFactory.GetInformationBasicLoggerMessageActionForEventId*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Whipstaff.Core.Logging.LoggerMessageFactory.GetWarningBasicLoggerMessageActionForEventId(Microsoft.Extensions.Logging.EventId)
  commentId: M:Whipstaff.Core.Logging.LoggerMessageFactory.GetWarningBasicLoggerMessageActionForEventId(Microsoft.Extensions.Logging.EventId)
  id: GetWarningBasicLoggerMessageActionForEventId(Microsoft.Extensions.Logging.EventId)
  parent: Whipstaff.Core.Logging.LoggerMessageFactory
  langs:
  - csharp
  - vb
  name: GetWarningBasicLoggerMessageActionForEventId(EventId)
  nameWithType: LoggerMessageFactory.GetWarningBasicLoggerMessageActionForEventId(EventId)
  fullName: Whipstaff.Core.Logging.LoggerMessageFactory.GetWarningBasicLoggerMessageActionForEventId(Microsoft.Extensions.Logging.EventId)
  type: Method
  source:
    path: Whipstaff.Core
    isExternal: true
  assemblies:
  - Whipstaff.Core
  namespace: Whipstaff.Core.Logging
  summary: "\nGets a basic information logger message action for an event id. Useful for basic logging of events where there is only\never a basic message.\n"
  syntax:
    content: public static Action<ILogger, string, Exception> GetWarningBasicLoggerMessageActionForEventId(EventId eventId)
    parameters:
    - id: eventId
      type: Microsoft.Extensions.Logging.EventId
      description: The event id to define a log message action for.
    return:
      type: System.Action{Microsoft.Extensions.Logging.ILogger,System.String,System.Exception}
      description: Log Message Action.
    content.vb: Public Shared Function GetWarningBasicLoggerMessageActionForEventId(eventId As EventId) As Action(Of ILogger, String, Exception)
  overload: Whipstaff.Core.Logging.LoggerMessageFactory.GetWarningBasicLoggerMessageActionForEventId*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Whipstaff.Core.Logging.LoggerMessageFactory.GetBasicLoggerMessageActionForLogLevelAndEventId(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId)
  commentId: M:Whipstaff.Core.Logging.LoggerMessageFactory.GetBasicLoggerMessageActionForLogLevelAndEventId(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId)
  id: GetBasicLoggerMessageActionForLogLevelAndEventId(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId)
  parent: Whipstaff.Core.Logging.LoggerMessageFactory
  langs:
  - csharp
  - vb
  name: GetBasicLoggerMessageActionForLogLevelAndEventId(LogLevel, EventId)
  nameWithType: LoggerMessageFactory.GetBasicLoggerMessageActionForLogLevelAndEventId(LogLevel, EventId)
  fullName: Whipstaff.Core.Logging.LoggerMessageFactory.GetBasicLoggerMessageActionForLogLevelAndEventId(Microsoft.Extensions.Logging.LogLevel, Microsoft.Extensions.Logging.EventId)
  type: Method
  source:
    path: Whipstaff.Core
    isExternal: true
  assemblies:
  - Whipstaff.Core
  namespace: Whipstaff.Core.Logging
  summary: "\nGets a basic log message action where there will only ever be a basic message.\n"
  syntax:
    content: public static Action<ILogger, string, Exception> GetBasicLoggerMessageActionForLogLevelAndEventId(LogLevel logLevel, EventId eventId)
    parameters:
    - id: logLevel
      type: Microsoft.Extensions.Logging.LogLevel
      description: The logging level.
    - id: eventId
      type: Microsoft.Extensions.Logging.EventId
      description: The event id.
    return:
      type: System.Action{Microsoft.Extensions.Logging.ILogger,System.String,System.Exception}
      description: Log Message Action.
    content.vb: Public Shared Function GetBasicLoggerMessageActionForLogLevelAndEventId(logLevel As LogLevel, eventId As EventId) As Action(Of ILogger, String, Exception)
  overload: Whipstaff.Core.Logging.LoggerMessageFactory.GetBasicLoggerMessageActionForLogLevelAndEventId*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Whipstaff.Core.Logging
  commentId: N:Whipstaff.Core.Logging
  isExternal: true
  name: Whipstaff.Core.Logging
  nameWithType: Whipstaff.Core.Logging
  fullName: Whipstaff.Core.Logging
- uid: Whipstaff.Core.Logging.LoggerMessageFactory.GetDbContextSaveResultLoggerMessageAction*
  commentId: Overload:Whipstaff.Core.Logging.LoggerMessageFactory.GetDbContextSaveResultLoggerMessageAction
  isExternal: true
  name: GetDbContextSaveResultLoggerMessageAction
  nameWithType: LoggerMessageFactory.GetDbContextSaveResultLoggerMessageAction
  fullName: Whipstaff.Core.Logging.LoggerMessageFactory.GetDbContextSaveResultLoggerMessageAction
- uid: System.Action{Microsoft.Extensions.Logging.ILogger,System.Int32,System.Exception}
  commentId: '!:System.Action{Microsoft.Extensions.Logging.ILogger,System.Int32,System.Exception}'
  definition: System.Action`3
  name: Action<ILogger, Int32, Exception>
  nameWithType: Action<ILogger, Int32, Exception>
  fullName: System.Action<Microsoft.Extensions.Logging.ILogger, System.Int32, System.Exception>
  nameWithType.vb: Action(Of ILogger, Int32, Exception)
  fullName.vb: System.Action(Of Microsoft.Extensions.Logging.ILogger, System.Int32, System.Exception)
  name.vb: Action(Of ILogger, Int32, Exception)
  spec.csharp:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Extensions.Logging.ILogger
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Extensions.Logging.ILogger
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`3
  isExternal: true
  name: Action<, , >
  nameWithType: Action<, , >
  fullName: System.Action<, , >
  nameWithType.vb: Action(Of , , )
  fullName.vb: System.Action(Of , , )
  name.vb: Action(Of , , )
  spec.csharp:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Whipstaff.Core.Logging.LoggerMessageFactory.GetNoMediatRHandlersRegisteredForTypeLoggerMessageAction*
  commentId: Overload:Whipstaff.Core.Logging.LoggerMessageFactory.GetNoMediatRHandlersRegisteredForTypeLoggerMessageAction
  isExternal: true
  name: GetNoMediatRHandlersRegisteredForTypeLoggerMessageAction
  nameWithType: LoggerMessageFactory.GetNoMediatRHandlersRegisteredForTypeLoggerMessageAction
  fullName: Whipstaff.Core.Logging.LoggerMessageFactory.GetNoMediatRHandlersRegisteredForTypeLoggerMessageAction
- uid: System.Action{Microsoft.Extensions.Logging.ILogger,System.Type,System.Exception}
  commentId: '!:System.Action{Microsoft.Extensions.Logging.ILogger,System.Type,System.Exception}'
  definition: System.Action`3
  name: Action<ILogger, Type, Exception>
  nameWithType: Action<ILogger, Type, Exception>
  fullName: System.Action<Microsoft.Extensions.Logging.ILogger, System.Type, System.Exception>
  nameWithType.vb: Action(Of ILogger, Type, Exception)
  fullName.vb: System.Action(Of Microsoft.Extensions.Logging.ILogger, System.Type, System.Exception)
  name.vb: Action(Of ILogger, Type, Exception)
  spec.csharp:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Extensions.Logging.ILogger
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Extensions.Logging.ILogger
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Whipstaff.Core.Logging.LoggerMessageFactory.GetCountOfMediatRHandlersRegisteredLoggerMessageAction*
  commentId: Overload:Whipstaff.Core.Logging.LoggerMessageFactory.GetCountOfMediatRHandlersRegisteredLoggerMessageAction
  isExternal: true
  name: GetCountOfMediatRHandlersRegisteredLoggerMessageAction
  nameWithType: LoggerMessageFactory.GetCountOfMediatRHandlersRegisteredLoggerMessageAction
  fullName: Whipstaff.Core.Logging.LoggerMessageFactory.GetCountOfMediatRHandlersRegisteredLoggerMessageAction
- uid: System.Action{Microsoft.Extensions.Logging.ILogger,System.Type,System.Int32,System.Exception}
  commentId: '!:System.Action{Microsoft.Extensions.Logging.ILogger,System.Type,System.Int32,System.Exception}'
  definition: System.Action`4
  name: Action<ILogger, Type, Int32, Exception>
  nameWithType: Action<ILogger, Type, Int32, Exception>
  fullName: System.Action<Microsoft.Extensions.Logging.ILogger, System.Type, System.Int32, System.Exception>
  nameWithType.vb: Action(Of ILogger, Type, Int32, Exception)
  fullName.vb: System.Action(Of Microsoft.Extensions.Logging.ILogger, System.Type, System.Int32, System.Exception)
  name.vb: Action(Of ILogger, Type, Int32, Exception)
  spec.csharp:
  - uid: System.Action`4
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Extensions.Logging.ILogger
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`4
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Extensions.Logging.ILogger
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`4
  commentId: '!:System.Action`4'
  isExternal: true
  name: Action<, , , >
  nameWithType: Action<, , , >
  fullName: System.Action<, , , >
  nameWithType.vb: Action(Of , , , )
  fullName.vb: System.Action(Of , , , )
  name.vb: Action(Of , , , )
  spec.csharp:
  - uid: System.Action`4
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`4
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Whipstaff.Core.Logging.LoggerMessageFactory.GetCriticalBasicLoggerMessageActionForEventId*
  commentId: Overload:Whipstaff.Core.Logging.LoggerMessageFactory.GetCriticalBasicLoggerMessageActionForEventId
  isExternal: true
  name: GetCriticalBasicLoggerMessageActionForEventId
  nameWithType: LoggerMessageFactory.GetCriticalBasicLoggerMessageActionForEventId
  fullName: Whipstaff.Core.Logging.LoggerMessageFactory.GetCriticalBasicLoggerMessageActionForEventId
- uid: Microsoft.Extensions.Logging.EventId
  isExternal: true
  name: EventId
  nameWithType: EventId
  fullName: Microsoft.Extensions.Logging.EventId
- uid: System.Action{Microsoft.Extensions.Logging.ILogger,System.String,System.Exception}
  commentId: '!:System.Action{Microsoft.Extensions.Logging.ILogger,System.String,System.Exception}'
  definition: System.Action`3
  name: Action<ILogger, String, Exception>
  nameWithType: Action<ILogger, String, Exception>
  fullName: System.Action<Microsoft.Extensions.Logging.ILogger, System.String, System.Exception>
  nameWithType.vb: Action(Of ILogger, String, Exception)
  fullName.vb: System.Action(Of Microsoft.Extensions.Logging.ILogger, System.String, System.Exception)
  name.vb: Action(Of ILogger, String, Exception)
  spec.csharp:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Extensions.Logging.ILogger
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Extensions.Logging.ILogger
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Whipstaff.Core.Logging.LoggerMessageFactory.GetDebugBasicLoggerMessageActionForEventId*
  commentId: Overload:Whipstaff.Core.Logging.LoggerMessageFactory.GetDebugBasicLoggerMessageActionForEventId
  isExternal: true
  name: GetDebugBasicLoggerMessageActionForEventId
  nameWithType: LoggerMessageFactory.GetDebugBasicLoggerMessageActionForEventId
  fullName: Whipstaff.Core.Logging.LoggerMessageFactory.GetDebugBasicLoggerMessageActionForEventId
- uid: Whipstaff.Core.Logging.LoggerMessageFactory.GetErrorBasicLoggerMessageActionForEventId*
  commentId: Overload:Whipstaff.Core.Logging.LoggerMessageFactory.GetErrorBasicLoggerMessageActionForEventId
  isExternal: true
  name: GetErrorBasicLoggerMessageActionForEventId
  nameWithType: LoggerMessageFactory.GetErrorBasicLoggerMessageActionForEventId
  fullName: Whipstaff.Core.Logging.LoggerMessageFactory.GetErrorBasicLoggerMessageActionForEventId
- uid: Whipstaff.Core.Logging.LoggerMessageFactory.GetInformationBasicLoggerMessageActionForEventId*
  commentId: Overload:Whipstaff.Core.Logging.LoggerMessageFactory.GetInformationBasicLoggerMessageActionForEventId
  isExternal: true
  name: GetInformationBasicLoggerMessageActionForEventId
  nameWithType: LoggerMessageFactory.GetInformationBasicLoggerMessageActionForEventId
  fullName: Whipstaff.Core.Logging.LoggerMessageFactory.GetInformationBasicLoggerMessageActionForEventId
- uid: Whipstaff.Core.Logging.LoggerMessageFactory.GetWarningBasicLoggerMessageActionForEventId*
  commentId: Overload:Whipstaff.Core.Logging.LoggerMessageFactory.GetWarningBasicLoggerMessageActionForEventId
  isExternal: true
  name: GetWarningBasicLoggerMessageActionForEventId
  nameWithType: LoggerMessageFactory.GetWarningBasicLoggerMessageActionForEventId
  fullName: Whipstaff.Core.Logging.LoggerMessageFactory.GetWarningBasicLoggerMessageActionForEventId
- uid: Whipstaff.Core.Logging.LoggerMessageFactory.GetBasicLoggerMessageActionForLogLevelAndEventId*
  commentId: Overload:Whipstaff.Core.Logging.LoggerMessageFactory.GetBasicLoggerMessageActionForLogLevelAndEventId
  isExternal: true
  name: GetBasicLoggerMessageActionForLogLevelAndEventId
  nameWithType: LoggerMessageFactory.GetBasicLoggerMessageActionForLogLevelAndEventId
  fullName: Whipstaff.Core.Logging.LoggerMessageFactory.GetBasicLoggerMessageActionForLogLevelAndEventId
- uid: Microsoft.Extensions.Logging.LogLevel
  commentId: '!:Microsoft.Extensions.Logging.LogLevel'
  isExternal: true
  name: LogLevel
  nameWithType: LogLevel
  fullName: Microsoft.Extensions.Logging.LogLevel
