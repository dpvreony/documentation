### YamlMime:ManagedReference
items:
- uid: Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory
  commentId: T:Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory
  id: ExclusiveReactiveCommandsFactory
  parent: Whipstaff.ReactiveUI.ReactiveCommands
  children:
  - Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory.GetExclusiveCommands``10(System.Func{``0,``1},System.Func{``2,``3},System.Func{``4,``5},System.Func{``6,``7},System.Func{``8,``9})
  - Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory.GetExclusiveCommands``12(System.Func{``0,``1},System.Func{``2,``3},System.Func{``4,``5},System.Func{``6,``7},System.Func{``8,``9},System.Func{``10,``11})
  - Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory.GetExclusiveCommands``4(System.Func{``0,``1},System.Func{``2,``3})
  - Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory.GetExclusiveCommands``4(System.Func{``0,``1},System.IObservable{System.Boolean},System.Func{``2,``3},System.IObservable{System.Boolean})
  - Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory.GetExclusiveCommands``6(System.Func{``0,``1},System.Func{``2,``3},System.Func{``4,``5})
  - Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory.GetExclusiveCommands``8(System.Func{``0,``1},System.Func{``2,``3},System.Func{``4,``5},System.Func{``6,``7})
  langs:
  - csharp
  - vb
  name: ExclusiveReactiveCommandsFactory
  nameWithType: ExclusiveReactiveCommandsFactory
  fullName: Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory
  type: Class
  source:
    path: Whipstaff.ReactiveUI
    isExternal: true
  assemblies:
  - Whipstaff.ReactiveUI
  namespace: Whipstaff.ReactiveUI.ReactiveCommands
  summary: "\nFactory to produce commands that have an exclusive lock against each other.\n"
  syntax:
    content: 'public static class ExclusiveReactiveCommandsFactory : Object'
    content.vb: >-
      Public Module ExclusiveReactiveCommandsFactory
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory.GetExclusiveCommands``4(System.Func{``0,``1},System.Func{``2,``3})
  commentId: M:Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory.GetExclusiveCommands``4(System.Func{``0,``1},System.Func{``2,``3})
  id: GetExclusiveCommands``4(System.Func{``0,``1},System.Func{``2,``3})
  parent: Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory
  langs:
  - csharp
  - vb
  name: GetExclusiveCommands<TParam1, TResult1, TParam2, TResult2>(Func<TParam1, TResult1>, Func<TParam2, TResult2>)
  nameWithType: ExclusiveReactiveCommandsFactory.GetExclusiveCommands<TParam1, TResult1, TParam2, TResult2>(Func<TParam1, TResult1>, Func<TParam2, TResult2>)
  fullName: Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory.GetExclusiveCommands<TParam1, TResult1, TParam2, TResult2>(System.Func<TParam1, TResult1>, System.Func<TParam2, TResult2>)
  type: Method
  source:
    path: Whipstaff.ReactiveUI
    isExternal: true
  assemblies:
  - Whipstaff.ReactiveUI
  namespace: Whipstaff.ReactiveUI.ReactiveCommands
  summary: "\nCreates 2 commands that have mutually exclusive execution.\n"
  syntax:
    content: public static ValueTuple<BehaviorSubject<int>, IDisposable, ReactiveCommand<TParam1, TResult1>, ReactiveCommand<TParam2, TResult2>> GetExclusiveCommands<TParam1, TResult1, TParam2, TResult2>(Func<TParam1, TResult1> commandFunc1, Func<TParam2, TResult2> commandFunc2)
    parameters:
    - id: commandFunc1
      type: System.Func{{TParam1},{TResult1}}
      description: Function to execute in the first command.
    - id: commandFunc2
      type: System.Func{{TParam2},{TResult2}}
      description: Function to execute in the second command.
    typeParameters:
    - id: TParam1
      description: The input type for the first command.
    - id: TResult1
      description: The result type for the first command.
    - id: TParam2
      description: The input type for the second command.
    - id: TResult2
      description: The result type for the second command.
    return:
      type: System.ValueTuple{System.Reactive.Subjects.BehaviorSubject{System.Int32},System.IDisposable,ReactiveUI.ReactiveCommand{{TParam1},{TResult1}},ReactiveUI.ReactiveCommand{{TParam2},{TResult2}}}
      description: A tuple representing the exclusive lock subject and the created commands.
    content.vb: Public Shared Function GetExclusiveCommands(Of TParam1, TResult1, TParam2, TResult2)(commandFunc1 As Func(Of TParam1, TResult1), commandFunc2 As Func(Of TParam2, TResult2)) As ValueTuple(Of BehaviorSubject(Of Integer), IDisposable, ReactiveCommand(Of TParam1, TResult1), ReactiveCommand(Of TParam2, TResult2))
  overload: Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory.GetExclusiveCommands*
  nameWithType.vb: ExclusiveReactiveCommandsFactory.GetExclusiveCommands(Of TParam1, TResult1, TParam2, TResult2)(Func(Of TParam1, TResult1), Func(Of TParam2, TResult2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory.GetExclusiveCommands(Of TParam1, TResult1, TParam2, TResult2)(System.Func(Of TParam1, TResult1), System.Func(Of TParam2, TResult2))
  name.vb: GetExclusiveCommands(Of TParam1, TResult1, TParam2, TResult2)(Func(Of TParam1, TResult1), Func(Of TParam2, TResult2))
- uid: Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory.GetExclusiveCommands``4(System.Func{``0,``1},System.IObservable{System.Boolean},System.Func{``2,``3},System.IObservable{System.Boolean})
  commentId: M:Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory.GetExclusiveCommands``4(System.Func{``0,``1},System.IObservable{System.Boolean},System.Func{``2,``3},System.IObservable{System.Boolean})
  id: GetExclusiveCommands``4(System.Func{``0,``1},System.IObservable{System.Boolean},System.Func{``2,``3},System.IObservable{System.Boolean})
  parent: Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory
  langs:
  - csharp
  - vb
  name: GetExclusiveCommands<TParam1, TResult1, TParam2, TResult2>(Func<TParam1, TResult1>, IObservable<Boolean>, Func<TParam2, TResult2>, IObservable<Boolean>)
  nameWithType: ExclusiveReactiveCommandsFactory.GetExclusiveCommands<TParam1, TResult1, TParam2, TResult2>(Func<TParam1, TResult1>, IObservable<Boolean>, Func<TParam2, TResult2>, IObservable<Boolean>)
  fullName: Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory.GetExclusiveCommands<TParam1, TResult1, TParam2, TResult2>(System.Func<TParam1, TResult1>, System.IObservable<System.Boolean>, System.Func<TParam2, TResult2>, System.IObservable<System.Boolean>)
  type: Method
  source:
    path: Whipstaff.ReactiveUI
    isExternal: true
  assemblies:
  - Whipstaff.ReactiveUI
  namespace: Whipstaff.ReactiveUI.ReactiveCommands
  summary: "\nCreates 2 commands that have mutually exclusive execution.\n"
  syntax:
    content: public static ValueTuple<BehaviorSubject<int>, IDisposable, ReactiveCommand<TParam1, TResult1>, ReactiveCommand<TParam2, TResult2>> GetExclusiveCommands<TParam1, TResult1, TParam2, TResult2>(Func<TParam1, TResult1> commandFunc1, IObservable<bool> commandCanExecute1, Func<TParam2, TResult2> commandFunc2, IObservable<bool> commandCanExecute2)
    parameters:
    - id: commandFunc1
      type: System.Func{{TParam1},{TResult1}}
      description: Function to execute in the first command.
    - id: commandCanExecute1
      type: System.IObservable{System.Boolean}
      description: Observable indicating whether the first command can execute.
    - id: commandFunc2
      type: System.Func{{TParam2},{TResult2}}
      description: Function to execute in the second command.
    - id: commandCanExecute2
      type: System.IObservable{System.Boolean}
      description: Observable indicating whether the second command can execute.
    typeParameters:
    - id: TParam1
      description: The input type for the first command.
    - id: TResult1
      description: The result type for the first command.
    - id: TParam2
      description: The input type for the second command.
    - id: TResult2
      description: The result type for the second command.
    return:
      type: System.ValueTuple{System.Reactive.Subjects.BehaviorSubject{System.Int32},System.IDisposable,ReactiveUI.ReactiveCommand{{TParam1},{TResult1}},ReactiveUI.ReactiveCommand{{TParam2},{TResult2}}}
      description: A tuple representing the exclusive lock subject and the created commands.
    content.vb: Public Shared Function GetExclusiveCommands(Of TParam1, TResult1, TParam2, TResult2)(commandFunc1 As Func(Of TParam1, TResult1), commandCanExecute1 As IObservable(Of Boolean), commandFunc2 As Func(Of TParam2, TResult2), commandCanExecute2 As IObservable(Of Boolean)) As ValueTuple(Of BehaviorSubject(Of Integer), IDisposable, ReactiveCommand(Of TParam1, TResult1), ReactiveCommand(Of TParam2, TResult2))
  overload: Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory.GetExclusiveCommands*
  nameWithType.vb: ExclusiveReactiveCommandsFactory.GetExclusiveCommands(Of TParam1, TResult1, TParam2, TResult2)(Func(Of TParam1, TResult1), IObservable(Of Boolean), Func(Of TParam2, TResult2), IObservable(Of Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory.GetExclusiveCommands(Of TParam1, TResult1, TParam2, TResult2)(System.Func(Of TParam1, TResult1), System.IObservable(Of System.Boolean), System.Func(Of TParam2, TResult2), System.IObservable(Of System.Boolean))
  name.vb: GetExclusiveCommands(Of TParam1, TResult1, TParam2, TResult2)(Func(Of TParam1, TResult1), IObservable(Of Boolean), Func(Of TParam2, TResult2), IObservable(Of Boolean))
- uid: Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory.GetExclusiveCommands``6(System.Func{``0,``1},System.Func{``2,``3},System.Func{``4,``5})
  commentId: M:Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory.GetExclusiveCommands``6(System.Func{``0,``1},System.Func{``2,``3},System.Func{``4,``5})
  id: GetExclusiveCommands``6(System.Func{``0,``1},System.Func{``2,``3},System.Func{``4,``5})
  parent: Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory
  langs:
  - csharp
  - vb
  name: GetExclusiveCommands<TParam1, TResult1, TParam2, TResult2, TParam3, TResult3>(Func<TParam1, TResult1>, Func<TParam2, TResult2>, Func<TParam3, TResult3>)
  nameWithType: ExclusiveReactiveCommandsFactory.GetExclusiveCommands<TParam1, TResult1, TParam2, TResult2, TParam3, TResult3>(Func<TParam1, TResult1>, Func<TParam2, TResult2>, Func<TParam3, TResult3>)
  fullName: Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory.GetExclusiveCommands<TParam1, TResult1, TParam2, TResult2, TParam3, TResult3>(System.Func<TParam1, TResult1>, System.Func<TParam2, TResult2>, System.Func<TParam3, TResult3>)
  type: Method
  source:
    path: Whipstaff.ReactiveUI
    isExternal: true
  assemblies:
  - Whipstaff.ReactiveUI
  namespace: Whipstaff.ReactiveUI.ReactiveCommands
  summary: "\nCreates 3 commands that have mutually exclusive execution.\n"
  syntax:
    content: public static ValueTuple<BehaviorSubject<int>, IDisposable, ReactiveCommand<TParam1, TResult1>, ReactiveCommand<TParam2, TResult2>, ReactiveCommand<TParam3, TResult3>> GetExclusiveCommands<TParam1, TResult1, TParam2, TResult2, TParam3, TResult3>(Func<TParam1, TResult1> commandFunc1, Func<TParam2, TResult2> commandFunc2, Func<TParam3, TResult3> commandFunc3)
    parameters:
    - id: commandFunc1
      type: System.Func{{TParam1},{TResult1}}
      description: Function to execute in the first command.
    - id: commandFunc2
      type: System.Func{{TParam2},{TResult2}}
      description: Function to execute in the second command.
    - id: commandFunc3
      type: System.Func{{TParam3},{TResult3}}
      description: Function to execute in the third command.
    typeParameters:
    - id: TParam1
      description: The input type for the first command.
    - id: TResult1
      description: The result type for the first command.
    - id: TParam2
      description: The input type for the second command.
    - id: TResult2
      description: The result type for the second command.
    - id: TParam3
      description: The input type for the third command.
    - id: TResult3
      description: The result type for the third command.
    return:
      type: System.ValueTuple{System.Reactive.Subjects.BehaviorSubject{System.Int32},System.IDisposable,ReactiveUI.ReactiveCommand{{TParam1},{TResult1}},ReactiveUI.ReactiveCommand{{TParam2},{TResult2}},ReactiveUI.ReactiveCommand{{TParam3},{TResult3}}}
      description: A tuple representing the exclusive lock subject and the created commands.
    content.vb: Public Shared Function GetExclusiveCommands(Of TParam1, TResult1, TParam2, TResult2, TParam3, TResult3)(commandFunc1 As Func(Of TParam1, TResult1), commandFunc2 As Func(Of TParam2, TResult2), commandFunc3 As Func(Of TParam3, TResult3)) As ValueTuple(Of BehaviorSubject(Of Integer), IDisposable, ReactiveCommand(Of TParam1, TResult1), ReactiveCommand(Of TParam2, TResult2), ReactiveCommand(Of TParam3, TResult3))
  overload: Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory.GetExclusiveCommands*
  nameWithType.vb: ExclusiveReactiveCommandsFactory.GetExclusiveCommands(Of TParam1, TResult1, TParam2, TResult2, TParam3, TResult3)(Func(Of TParam1, TResult1), Func(Of TParam2, TResult2), Func(Of TParam3, TResult3))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory.GetExclusiveCommands(Of TParam1, TResult1, TParam2, TResult2, TParam3, TResult3)(System.Func(Of TParam1, TResult1), System.Func(Of TParam2, TResult2), System.Func(Of TParam3, TResult3))
  name.vb: GetExclusiveCommands(Of TParam1, TResult1, TParam2, TResult2, TParam3, TResult3)(Func(Of TParam1, TResult1), Func(Of TParam2, TResult2), Func(Of TParam3, TResult3))
- uid: Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory.GetExclusiveCommands``8(System.Func{``0,``1},System.Func{``2,``3},System.Func{``4,``5},System.Func{``6,``7})
  commentId: M:Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory.GetExclusiveCommands``8(System.Func{``0,``1},System.Func{``2,``3},System.Func{``4,``5},System.Func{``6,``7})
  id: GetExclusiveCommands``8(System.Func{``0,``1},System.Func{``2,``3},System.Func{``4,``5},System.Func{``6,``7})
  parent: Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory
  langs:
  - csharp
  - vb
  name: GetExclusiveCommands<TParam1, TResult1, TParam2, TResult2, TParam3, TResult3, TParam4, TResult4>(Func<TParam1, TResult1>, Func<TParam2, TResult2>, Func<TParam3, TResult3>, Func<TParam4, TResult4>)
  nameWithType: ExclusiveReactiveCommandsFactory.GetExclusiveCommands<TParam1, TResult1, TParam2, TResult2, TParam3, TResult3, TParam4, TResult4>(Func<TParam1, TResult1>, Func<TParam2, TResult2>, Func<TParam3, TResult3>, Func<TParam4, TResult4>)
  fullName: Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory.GetExclusiveCommands<TParam1, TResult1, TParam2, TResult2, TParam3, TResult3, TParam4, TResult4>(System.Func<TParam1, TResult1>, System.Func<TParam2, TResult2>, System.Func<TParam3, TResult3>, System.Func<TParam4, TResult4>)
  type: Method
  source:
    path: Whipstaff.ReactiveUI
    isExternal: true
  assemblies:
  - Whipstaff.ReactiveUI
  namespace: Whipstaff.ReactiveUI.ReactiveCommands
  summary: "\nCreates 4 commands that have mutually exclusive execution.\n"
  syntax:
    content: public static ValueTuple<BehaviorSubject<int>, IDisposable, ReactiveCommand<TParam1, TResult1>, ReactiveCommand<TParam2, TResult2>, ReactiveCommand<TParam3, TResult3>, ReactiveCommand<TParam4, TResult4>> GetExclusiveCommands<TParam1, TResult1, TParam2, TResult2, TParam3, TResult3, TParam4, TResult4>(Func<TParam1, TResult1> commandFunc1, Func<TParam2, TResult2> commandFunc2, Func<TParam3, TResult3> commandFunc3, Func<TParam4, TResult4> commandFunc4)
    parameters:
    - id: commandFunc1
      type: System.Func{{TParam1},{TResult1}}
      description: Function to execute in the first command.
    - id: commandFunc2
      type: System.Func{{TParam2},{TResult2}}
      description: Function to execute in the second command.
    - id: commandFunc3
      type: System.Func{{TParam3},{TResult3}}
      description: Function to execute in the third command.
    - id: commandFunc4
      type: System.Func{{TParam4},{TResult4}}
      description: Function to execute in the fourth command.
    typeParameters:
    - id: TParam1
      description: The input type for the first command.
    - id: TResult1
      description: The result type for the first command.
    - id: TParam2
      description: The input type for the second command.
    - id: TResult2
      description: The result type for the second command.
    - id: TParam3
      description: The input type for the third command.
    - id: TResult3
      description: The result type for the third command.
    - id: TParam4
      description: The input type for the fourth command.
    - id: TResult4
      description: The result type for the fourth command.
    return:
      type: System.ValueTuple{System.Reactive.Subjects.BehaviorSubject{System.Int32},System.IDisposable,ReactiveUI.ReactiveCommand{{TParam1},{TResult1}},ReactiveUI.ReactiveCommand{{TParam2},{TResult2}},ReactiveUI.ReactiveCommand{{TParam3},{TResult3}},ReactiveUI.ReactiveCommand{{TParam4},{TResult4}}}
      description: A tuple representing the exclusive lock subject and the created commands.
    content.vb: Public Shared Function GetExclusiveCommands(Of TParam1, TResult1, TParam2, TResult2, TParam3, TResult3, TParam4, TResult4)(commandFunc1 As Func(Of TParam1, TResult1), commandFunc2 As Func(Of TParam2, TResult2), commandFunc3 As Func(Of TParam3, TResult3), commandFunc4 As Func(Of TParam4, TResult4)) As ValueTuple(Of BehaviorSubject(Of Integer), IDisposable, ReactiveCommand(Of TParam1, TResult1), ReactiveCommand(Of TParam2, TResult2), ReactiveCommand(Of TParam3, TResult3), ReactiveCommand(Of TParam4, TResult4))
  overload: Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory.GetExclusiveCommands*
  nameWithType.vb: ExclusiveReactiveCommandsFactory.GetExclusiveCommands(Of TParam1, TResult1, TParam2, TResult2, TParam3, TResult3, TParam4, TResult4)(Func(Of TParam1, TResult1), Func(Of TParam2, TResult2), Func(Of TParam3, TResult3), Func(Of TParam4, TResult4))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory.GetExclusiveCommands(Of TParam1, TResult1, TParam2, TResult2, TParam3, TResult3, TParam4, TResult4)(System.Func(Of TParam1, TResult1), System.Func(Of TParam2, TResult2), System.Func(Of TParam3, TResult3), System.Func(Of TParam4, TResult4))
  name.vb: GetExclusiveCommands(Of TParam1, TResult1, TParam2, TResult2, TParam3, TResult3, TParam4, TResult4)(Func(Of TParam1, TResult1), Func(Of TParam2, TResult2), Func(Of TParam3, TResult3), Func(Of TParam4, TResult4))
- uid: Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory.GetExclusiveCommands``10(System.Func{``0,``1},System.Func{``2,``3},System.Func{``4,``5},System.Func{``6,``7},System.Func{``8,``9})
  commentId: M:Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory.GetExclusiveCommands``10(System.Func{``0,``1},System.Func{``2,``3},System.Func{``4,``5},System.Func{``6,``7},System.Func{``8,``9})
  id: GetExclusiveCommands``10(System.Func{``0,``1},System.Func{``2,``3},System.Func{``4,``5},System.Func{``6,``7},System.Func{``8,``9})
  parent: Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory
  langs:
  - csharp
  - vb
  name: GetExclusiveCommands<TParam1, TResult1, TParam2, TResult2, TParam3, TResult3, TParam4, TResult4, TParam5, TResult5>(Func<TParam1, TResult1>, Func<TParam2, TResult2>, Func<TParam3, TResult3>, Func<TParam4, TResult4>, Func<TParam5, TResult5>)
  nameWithType: ExclusiveReactiveCommandsFactory.GetExclusiveCommands<TParam1, TResult1, TParam2, TResult2, TParam3, TResult3, TParam4, TResult4, TParam5, TResult5>(Func<TParam1, TResult1>, Func<TParam2, TResult2>, Func<TParam3, TResult3>, Func<TParam4, TResult4>, Func<TParam5, TResult5>)
  fullName: Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory.GetExclusiveCommands<TParam1, TResult1, TParam2, TResult2, TParam3, TResult3, TParam4, TResult4, TParam5, TResult5>(System.Func<TParam1, TResult1>, System.Func<TParam2, TResult2>, System.Func<TParam3, TResult3>, System.Func<TParam4, TResult4>, System.Func<TParam5, TResult5>)
  type: Method
  source:
    path: Whipstaff.ReactiveUI
    isExternal: true
  assemblies:
  - Whipstaff.ReactiveUI
  namespace: Whipstaff.ReactiveUI.ReactiveCommands
  summary: "\nCreates 5 commands that have mutually exclusive execution.\n"
  syntax:
    content: public static ValueTuple<BehaviorSubject<int>, IDisposable, ReactiveCommand<TParam1, TResult1>, ReactiveCommand<TParam2, TResult2>, ReactiveCommand<TParam3, TResult3>, ReactiveCommand<TParam4, TResult4>, ReactiveCommand<TParam5, TResult5>> GetExclusiveCommands<TParam1, TResult1, TParam2, TResult2, TParam3, TResult3, TParam4, TResult4, TParam5, TResult5>(Func<TParam1, TResult1> commandFunc1, Func<TParam2, TResult2> commandFunc2, Func<TParam3, TResult3> commandFunc3, Func<TParam4, TResult4> commandFunc4, Func<TParam5, TResult5> commandFunc5)
    parameters:
    - id: commandFunc1
      type: System.Func{{TParam1},{TResult1}}
      description: Function to execute in the first command.
    - id: commandFunc2
      type: System.Func{{TParam2},{TResult2}}
      description: Function to execute in the second command.
    - id: commandFunc3
      type: System.Func{{TParam3},{TResult3}}
      description: Function to execute in the third command.
    - id: commandFunc4
      type: System.Func{{TParam4},{TResult4}}
      description: Function to execute in the fourth command.
    - id: commandFunc5
      type: System.Func{{TParam5},{TResult5}}
      description: Function to execute in the fifth command.
    typeParameters:
    - id: TParam1
      description: The input type for the first command.
    - id: TResult1
      description: The result type for the first command.
    - id: TParam2
      description: The input type for the second command.
    - id: TResult2
      description: The result type for the second command.
    - id: TParam3
      description: The input type for the third command.
    - id: TResult3
      description: The result type for the third command.
    - id: TParam4
      description: The input type for the fourth command.
    - id: TResult4
      description: The result type for the fourth command.
    - id: TParam5
      description: The input type for the fifth command.
    - id: TResult5
      description: The result type for the fifth command.
    return:
      type: System.ValueTuple{System.Reactive.Subjects.BehaviorSubject{System.Int32},System.IDisposable,ReactiveUI.ReactiveCommand{{TParam1},{TResult1}},ReactiveUI.ReactiveCommand{{TParam2},{TResult2}},ReactiveUI.ReactiveCommand{{TParam3},{TResult3}},ReactiveUI.ReactiveCommand{{TParam4},{TResult4}},ReactiveUI.ReactiveCommand{{TParam5},{TResult5}}}
      description: A tuple representing the exclusive lock subject and the created commands.
    content.vb: Public Shared Function GetExclusiveCommands(Of TParam1, TResult1, TParam2, TResult2, TParam3, TResult3, TParam4, TResult4, TParam5, TResult5)(commandFunc1 As Func(Of TParam1, TResult1), commandFunc2 As Func(Of TParam2, TResult2), commandFunc3 As Func(Of TParam3, TResult3), commandFunc4 As Func(Of TParam4, TResult4), commandFunc5 As Func(Of TParam5, TResult5)) As ValueTuple(Of BehaviorSubject(Of Integer), IDisposable, ReactiveCommand(Of TParam1, TResult1), ReactiveCommand(Of TParam2, TResult2), ReactiveCommand(Of TParam3, TResult3), ReactiveCommand(Of TParam4, TResult4), ReactiveCommand(Of TParam5, TResult5))
  overload: Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory.GetExclusiveCommands*
  nameWithType.vb: ExclusiveReactiveCommandsFactory.GetExclusiveCommands(Of TParam1, TResult1, TParam2, TResult2, TParam3, TResult3, TParam4, TResult4, TParam5, TResult5)(Func(Of TParam1, TResult1), Func(Of TParam2, TResult2), Func(Of TParam3, TResult3), Func(Of TParam4, TResult4), Func(Of TParam5, TResult5))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory.GetExclusiveCommands(Of TParam1, TResult1, TParam2, TResult2, TParam3, TResult3, TParam4, TResult4, TParam5, TResult5)(System.Func(Of TParam1, TResult1), System.Func(Of TParam2, TResult2), System.Func(Of TParam3, TResult3), System.Func(Of TParam4, TResult4), System.Func(Of TParam5, TResult5))
  name.vb: GetExclusiveCommands(Of TParam1, TResult1, TParam2, TResult2, TParam3, TResult3, TParam4, TResult4, TParam5, TResult5)(Func(Of TParam1, TResult1), Func(Of TParam2, TResult2), Func(Of TParam3, TResult3), Func(Of TParam4, TResult4), Func(Of TParam5, TResult5))
- uid: Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory.GetExclusiveCommands``12(System.Func{``0,``1},System.Func{``2,``3},System.Func{``4,``5},System.Func{``6,``7},System.Func{``8,``9},System.Func{``10,``11})
  commentId: M:Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory.GetExclusiveCommands``12(System.Func{``0,``1},System.Func{``2,``3},System.Func{``4,``5},System.Func{``6,``7},System.Func{``8,``9},System.Func{``10,``11})
  id: GetExclusiveCommands``12(System.Func{``0,``1},System.Func{``2,``3},System.Func{``4,``5},System.Func{``6,``7},System.Func{``8,``9},System.Func{``10,``11})
  parent: Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory
  langs:
  - csharp
  - vb
  name: GetExclusiveCommands<TParam1, TResult1, TParam2, TResult2, TParam3, TResult3, TParam4, TResult4, TParam5, TResult5, TParam6, TResult6>(Func<TParam1, TResult1>, Func<TParam2, TResult2>, Func<TParam3, TResult3>, Func<TParam4, TResult4>, Func<TParam5, TResult5>, Func<TParam6, TResult6>)
  nameWithType: ExclusiveReactiveCommandsFactory.GetExclusiveCommands<TParam1, TResult1, TParam2, TResult2, TParam3, TResult3, TParam4, TResult4, TParam5, TResult5, TParam6, TResult6>(Func<TParam1, TResult1>, Func<TParam2, TResult2>, Func<TParam3, TResult3>, Func<TParam4, TResult4>, Func<TParam5, TResult5>, Func<TParam6, TResult6>)
  fullName: Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory.GetExclusiveCommands<TParam1, TResult1, TParam2, TResult2, TParam3, TResult3, TParam4, TResult4, TParam5, TResult5, TParam6, TResult6>(System.Func<TParam1, TResult1>, System.Func<TParam2, TResult2>, System.Func<TParam3, TResult3>, System.Func<TParam4, TResult4>, System.Func<TParam5, TResult5>, System.Func<TParam6, TResult6>)
  type: Method
  source:
    path: Whipstaff.ReactiveUI
    isExternal: true
  assemblies:
  - Whipstaff.ReactiveUI
  namespace: Whipstaff.ReactiveUI.ReactiveCommands
  summary: "\nCreates 6 commands that have mutually exclusive execution.\n"
  syntax:
    content: public static ValueTuple<BehaviorSubject<int>, IDisposable, ReactiveCommand<TParam1, TResult1>, ReactiveCommand<TParam2, TResult2>, ReactiveCommand<TParam3, TResult3>, ReactiveCommand<TParam4, TResult4>, ReactiveCommand<TParam5, TResult5>, ValueTuple<ReactiveCommand<TParam6, TResult6>>> GetExclusiveCommands<TParam1, TResult1, TParam2, TResult2, TParam3, TResult3, TParam4, TResult4, TParam5, TResult5, TParam6, TResult6>(Func<TParam1, TResult1> commandFunc1, Func<TParam2, TResult2> commandFunc2, Func<TParam3, TResult3> commandFunc3, Func<TParam4, TResult4> commandFunc4, Func<TParam5, TResult5> commandFunc5, Func<TParam6, TResult6> commandFunc6)
    parameters:
    - id: commandFunc1
      type: System.Func{{TParam1},{TResult1}}
      description: Function to execute in the first command.
    - id: commandFunc2
      type: System.Func{{TParam2},{TResult2}}
      description: Function to execute in the second command.
    - id: commandFunc3
      type: System.Func{{TParam3},{TResult3}}
      description: Function to execute in the third command.
    - id: commandFunc4
      type: System.Func{{TParam4},{TResult4}}
      description: Function to execute in the fourth command.
    - id: commandFunc5
      type: System.Func{{TParam5},{TResult5}}
      description: Function to execute in the fifth command.
    - id: commandFunc6
      type: System.Func{{TParam6},{TResult6}}
      description: Function to execute in the sixth command.
    typeParameters:
    - id: TParam1
      description: The input type for the first command.
    - id: TResult1
      description: The result type for the first command.
    - id: TParam2
      description: The input type for the second command.
    - id: TResult2
      description: The result type for the second command.
    - id: TParam3
      description: The input type for the third command.
    - id: TResult3
      description: The result type for the third command.
    - id: TParam4
      description: The input type for the fourth command.
    - id: TResult4
      description: The result type for the fourth command.
    - id: TParam5
      description: The input type for the fifth command.
    - id: TResult5
      description: The result type for the fifth command.
    - id: TParam6
      description: The input type for the sixth command.
    - id: TResult6
      description: The result type for the sixth command.
    return:
      type: System.ValueTuple{System.Reactive.Subjects.BehaviorSubject{System.Int32},System.IDisposable,ReactiveUI.ReactiveCommand{{TParam1},{TResult1}},ReactiveUI.ReactiveCommand{{TParam2},{TResult2}},ReactiveUI.ReactiveCommand{{TParam3},{TResult3}},ReactiveUI.ReactiveCommand{{TParam4},{TResult4}},ReactiveUI.ReactiveCommand{{TParam5},{TResult5}},System.ValueTuple{ReactiveUI.ReactiveCommand{{TParam6},{TResult6}}}}
      description: A tuple representing the exclusive lock subject and the created commands.
    content.vb: Public Shared Function GetExclusiveCommands(Of TParam1, TResult1, TParam2, TResult2, TParam3, TResult3, TParam4, TResult4, TParam5, TResult5, TParam6, TResult6)(commandFunc1 As Func(Of TParam1, TResult1), commandFunc2 As Func(Of TParam2, TResult2), commandFunc3 As Func(Of TParam3, TResult3), commandFunc4 As Func(Of TParam4, TResult4), commandFunc5 As Func(Of TParam5, TResult5), commandFunc6 As Func(Of TParam6, TResult6)) As ValueTuple(Of BehaviorSubject(Of Integer), IDisposable, ReactiveCommand(Of TParam1, TResult1), ReactiveCommand(Of TParam2, TResult2), ReactiveCommand(Of TParam3, TResult3), ReactiveCommand(Of TParam4, TResult4), ReactiveCommand(Of TParam5, TResult5), ValueTuple(Of ReactiveCommand(Of TParam6, TResult6)))
  overload: Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory.GetExclusiveCommands*
  nameWithType.vb: ExclusiveReactiveCommandsFactory.GetExclusiveCommands(Of TParam1, TResult1, TParam2, TResult2, TParam3, TResult3, TParam4, TResult4, TParam5, TResult5, TParam6, TResult6)(Func(Of TParam1, TResult1), Func(Of TParam2, TResult2), Func(Of TParam3, TResult3), Func(Of TParam4, TResult4), Func(Of TParam5, TResult5), Func(Of TParam6, TResult6))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory.GetExclusiveCommands(Of TParam1, TResult1, TParam2, TResult2, TParam3, TResult3, TParam4, TResult4, TParam5, TResult5, TParam6, TResult6)(System.Func(Of TParam1, TResult1), System.Func(Of TParam2, TResult2), System.Func(Of TParam3, TResult3), System.Func(Of TParam4, TResult4), System.Func(Of TParam5, TResult5), System.Func(Of TParam6, TResult6))
  name.vb: GetExclusiveCommands(Of TParam1, TResult1, TParam2, TResult2, TParam3, TResult3, TParam4, TResult4, TParam5, TResult5, TParam6, TResult6)(Func(Of TParam1, TResult1), Func(Of TParam2, TResult2), Func(Of TParam3, TResult3), Func(Of TParam4, TResult4), Func(Of TParam5, TResult5), Func(Of TParam6, TResult6))
references:
- uid: Whipstaff.ReactiveUI.ReactiveCommands
  commentId: N:Whipstaff.ReactiveUI.ReactiveCommands
  isExternal: true
  name: Whipstaff.ReactiveUI.ReactiveCommands
  nameWithType: Whipstaff.ReactiveUI.ReactiveCommands
  fullName: Whipstaff.ReactiveUI.ReactiveCommands
- uid: Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory.GetExclusiveCommands*
  commentId: Overload:Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory.GetExclusiveCommands
  isExternal: true
  name: GetExclusiveCommands
  nameWithType: ExclusiveReactiveCommandsFactory.GetExclusiveCommands
  fullName: Whipstaff.ReactiveUI.ReactiveCommands.ExclusiveReactiveCommandsFactory.GetExclusiveCommands
- uid: System.Func{{TParam1},{TResult1}}
  commentId: '!:System.Func{``0,``1}'
  definition: System.Func`2
  name: Func<TParam1, TResult1>
  nameWithType: Func<TParam1, TResult1>
  fullName: System.Func<TParam1, TResult1>
  nameWithType.vb: Func(Of TParam1, TResult1)
  fullName.vb: System.Func(Of TParam1, TResult1)
  name.vb: Func(Of TParam1, TResult1)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParam1
    nameWithType: TParam1
    fullName: TParam1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult1
    nameWithType: TResult1
    fullName: TResult1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParam1
    nameWithType: TParam1
    fullName: TParam1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult1
    nameWithType: TResult1
    fullName: TResult1
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TParam2},{TResult2}}
  commentId: '!:System.Func{``2,``3}'
  definition: System.Func`2
  name: Func<TParam2, TResult2>
  nameWithType: Func<TParam2, TResult2>
  fullName: System.Func<TParam2, TResult2>
  nameWithType.vb: Func(Of TParam2, TResult2)
  fullName.vb: System.Func(Of TParam2, TResult2)
  name.vb: Func(Of TParam2, TResult2)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParam2
    nameWithType: TParam2
    fullName: TParam2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult2
    nameWithType: TResult2
    fullName: TResult2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParam2
    nameWithType: TParam2
    fullName: TParam2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult2
    nameWithType: TResult2
    fullName: TResult2
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple{System.Reactive.Subjects.BehaviorSubject{System.Int32},System.IDisposable,ReactiveUI.ReactiveCommand{{TParam1},{TResult1}},ReactiveUI.ReactiveCommand{{TParam2},{TResult2}}}
  commentId: '!:System.ValueTuple{System.Reactive.Subjects.BehaviorSubject{System.Int32},System.IDisposable,ReactiveUI.ReactiveCommand{``0,``1},ReactiveUI.ReactiveCommand{``2,``3}}'
  definition: System.ValueTuple`4
  name: ValueTuple<BehaviorSubject<Int32>, IDisposable, ReactiveCommand<TParam1, TResult1>, ReactiveCommand<TParam2, TResult2>>
  nameWithType: ValueTuple<BehaviorSubject<Int32>, IDisposable, ReactiveCommand<TParam1, TResult1>, ReactiveCommand<TParam2, TResult2>>
  fullName: System.ValueTuple<System.Reactive.Subjects.BehaviorSubject<System.Int32>, System.IDisposable, ReactiveUI.ReactiveCommand<TParam1, TResult1>, ReactiveUI.ReactiveCommand<TParam2, TResult2>>
  nameWithType.vb: ValueTuple(Of BehaviorSubject(Of Int32), IDisposable, ReactiveCommand(Of TParam1, TResult1), ReactiveCommand(Of TParam2, TResult2))
  fullName.vb: System.ValueTuple(Of System.Reactive.Subjects.BehaviorSubject(Of System.Int32), System.IDisposable, ReactiveUI.ReactiveCommand(Of TParam1, TResult1), ReactiveUI.ReactiveCommand(Of TParam2, TResult2))
  name.vb: ValueTuple(Of BehaviorSubject(Of Int32), IDisposable, ReactiveCommand(Of TParam1, TResult1), ReactiveCommand(Of TParam2, TResult2))
  spec.csharp:
  - uid: System.ValueTuple`4
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reactive.Subjects.BehaviorSubject`1
    name: BehaviorSubject
    nameWithType: BehaviorSubject
    fullName: System.Reactive.Subjects.BehaviorSubject
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IDisposable
    name: IDisposable
    nameWithType: IDisposable
    fullName: System.IDisposable
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ReactiveUI.ReactiveCommand`2
    name: ReactiveCommand
    nameWithType: ReactiveCommand
    fullName: ReactiveUI.ReactiveCommand
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParam1
    nameWithType: TParam1
    fullName: TParam1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult1
    nameWithType: TResult1
    fullName: TResult1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ReactiveUI.ReactiveCommand`2
    name: ReactiveCommand
    nameWithType: ReactiveCommand
    fullName: ReactiveUI.ReactiveCommand
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParam2
    nameWithType: TParam2
    fullName: TParam2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult2
    nameWithType: TResult2
    fullName: TResult2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`4
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reactive.Subjects.BehaviorSubject`1
    name: BehaviorSubject
    nameWithType: BehaviorSubject
    fullName: System.Reactive.Subjects.BehaviorSubject
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IDisposable
    name: IDisposable
    nameWithType: IDisposable
    fullName: System.IDisposable
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ReactiveUI.ReactiveCommand`2
    name: ReactiveCommand
    nameWithType: ReactiveCommand
    fullName: ReactiveUI.ReactiveCommand
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParam1
    nameWithType: TParam1
    fullName: TParam1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult1
    nameWithType: TResult1
    fullName: TResult1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ReactiveUI.ReactiveCommand`2
    name: ReactiveCommand
    nameWithType: ReactiveCommand
    fullName: ReactiveUI.ReactiveCommand
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParam2
    nameWithType: TParam2
    fullName: TParam2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult2
    nameWithType: TResult2
    fullName: TResult2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: System.Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: System.Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple`4
  isExternal: true
  name: ValueTuple<, , , >
  nameWithType: ValueTuple<, , , >
  fullName: System.ValueTuple<, , , >
  nameWithType.vb: ValueTuple(Of , , , )
  fullName.vb: System.ValueTuple(Of , , , )
  name.vb: ValueTuple(Of , , , )
  spec.csharp:
  - uid: System.ValueTuple`4
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`4
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IObservable{System.Boolean}
  commentId: '!:System.IObservable{System.Boolean}'
  definition: System.IObservable`1
  name: IObservable<Boolean>
  nameWithType: IObservable<Boolean>
  fullName: System.IObservable<System.Boolean>
  nameWithType.vb: IObservable(Of Boolean)
  fullName.vb: System.IObservable(Of System.Boolean)
  name.vb: IObservable(Of Boolean)
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IObservable`1
  isExternal: true
  name: IObservable<>
  nameWithType: IObservable<>
  fullName: System.IObservable<>
  nameWithType.vb: IObservable(Of )
  fullName.vb: System.IObservable(Of )
  name.vb: IObservable(Of )
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TParam3},{TResult3}}
  commentId: '!:System.Func{``4,``5}'
  definition: System.Func`2
  name: Func<TParam3, TResult3>
  nameWithType: Func<TParam3, TResult3>
  fullName: System.Func<TParam3, TResult3>
  nameWithType.vb: Func(Of TParam3, TResult3)
  fullName.vb: System.Func(Of TParam3, TResult3)
  name.vb: Func(Of TParam3, TResult3)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParam3
    nameWithType: TParam3
    fullName: TParam3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult3
    nameWithType: TResult3
    fullName: TResult3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParam3
    nameWithType: TParam3
    fullName: TParam3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult3
    nameWithType: TResult3
    fullName: TResult3
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple{System.Reactive.Subjects.BehaviorSubject{System.Int32},System.IDisposable,ReactiveUI.ReactiveCommand{{TParam1},{TResult1}},ReactiveUI.ReactiveCommand{{TParam2},{TResult2}},ReactiveUI.ReactiveCommand{{TParam3},{TResult3}}}
  commentId: '!:System.ValueTuple{System.Reactive.Subjects.BehaviorSubject{System.Int32},System.IDisposable,ReactiveUI.ReactiveCommand{``0,``1},ReactiveUI.ReactiveCommand{``2,``3},ReactiveUI.ReactiveCommand{``4,``5}}'
  definition: System.ValueTuple`5
  name: ValueTuple<BehaviorSubject<Int32>, IDisposable, ReactiveCommand<TParam1, TResult1>, ReactiveCommand<TParam2, TResult2>, ReactiveCommand<TParam3, TResult3>>
  nameWithType: ValueTuple<BehaviorSubject<Int32>, IDisposable, ReactiveCommand<TParam1, TResult1>, ReactiveCommand<TParam2, TResult2>, ReactiveCommand<TParam3, TResult3>>
  fullName: System.ValueTuple<System.Reactive.Subjects.BehaviorSubject<System.Int32>, System.IDisposable, ReactiveUI.ReactiveCommand<TParam1, TResult1>, ReactiveUI.ReactiveCommand<TParam2, TResult2>, ReactiveUI.ReactiveCommand<TParam3, TResult3>>
  nameWithType.vb: ValueTuple(Of BehaviorSubject(Of Int32), IDisposable, ReactiveCommand(Of TParam1, TResult1), ReactiveCommand(Of TParam2, TResult2), ReactiveCommand(Of TParam3, TResult3))
  fullName.vb: System.ValueTuple(Of System.Reactive.Subjects.BehaviorSubject(Of System.Int32), System.IDisposable, ReactiveUI.ReactiveCommand(Of TParam1, TResult1), ReactiveUI.ReactiveCommand(Of TParam2, TResult2), ReactiveUI.ReactiveCommand(Of TParam3, TResult3))
  name.vb: ValueTuple(Of BehaviorSubject(Of Int32), IDisposable, ReactiveCommand(Of TParam1, TResult1), ReactiveCommand(Of TParam2, TResult2), ReactiveCommand(Of TParam3, TResult3))
  spec.csharp:
  - uid: System.ValueTuple`5
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reactive.Subjects.BehaviorSubject`1
    name: BehaviorSubject
    nameWithType: BehaviorSubject
    fullName: System.Reactive.Subjects.BehaviorSubject
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IDisposable
    name: IDisposable
    nameWithType: IDisposable
    fullName: System.IDisposable
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ReactiveUI.ReactiveCommand`2
    name: ReactiveCommand
    nameWithType: ReactiveCommand
    fullName: ReactiveUI.ReactiveCommand
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParam1
    nameWithType: TParam1
    fullName: TParam1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult1
    nameWithType: TResult1
    fullName: TResult1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ReactiveUI.ReactiveCommand`2
    name: ReactiveCommand
    nameWithType: ReactiveCommand
    fullName: ReactiveUI.ReactiveCommand
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParam2
    nameWithType: TParam2
    fullName: TParam2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult2
    nameWithType: TResult2
    fullName: TResult2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ReactiveUI.ReactiveCommand`2
    name: ReactiveCommand
    nameWithType: ReactiveCommand
    fullName: ReactiveUI.ReactiveCommand
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParam3
    nameWithType: TParam3
    fullName: TParam3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult3
    nameWithType: TResult3
    fullName: TResult3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`5
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reactive.Subjects.BehaviorSubject`1
    name: BehaviorSubject
    nameWithType: BehaviorSubject
    fullName: System.Reactive.Subjects.BehaviorSubject
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IDisposable
    name: IDisposable
    nameWithType: IDisposable
    fullName: System.IDisposable
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ReactiveUI.ReactiveCommand`2
    name: ReactiveCommand
    nameWithType: ReactiveCommand
    fullName: ReactiveUI.ReactiveCommand
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParam1
    nameWithType: TParam1
    fullName: TParam1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult1
    nameWithType: TResult1
    fullName: TResult1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ReactiveUI.ReactiveCommand`2
    name: ReactiveCommand
    nameWithType: ReactiveCommand
    fullName: ReactiveUI.ReactiveCommand
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParam2
    nameWithType: TParam2
    fullName: TParam2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult2
    nameWithType: TResult2
    fullName: TResult2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ReactiveUI.ReactiveCommand`2
    name: ReactiveCommand
    nameWithType: ReactiveCommand
    fullName: ReactiveUI.ReactiveCommand
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParam3
    nameWithType: TParam3
    fullName: TParam3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult3
    nameWithType: TResult3
    fullName: TResult3
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple`5
  isExternal: true
  name: ValueTuple<, , , , >
  nameWithType: ValueTuple<, , , , >
  fullName: System.ValueTuple<, , , , >
  nameWithType.vb: ValueTuple(Of , , , , )
  fullName.vb: System.ValueTuple(Of , , , , )
  name.vb: ValueTuple(Of , , , , )
  spec.csharp:
  - uid: System.ValueTuple`5
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`5
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TParam4},{TResult4}}
  commentId: '!:System.Func{``6,``7}'
  definition: System.Func`2
  name: Func<TParam4, TResult4>
  nameWithType: Func<TParam4, TResult4>
  fullName: System.Func<TParam4, TResult4>
  nameWithType.vb: Func(Of TParam4, TResult4)
  fullName.vb: System.Func(Of TParam4, TResult4)
  name.vb: Func(Of TParam4, TResult4)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParam4
    nameWithType: TParam4
    fullName: TParam4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult4
    nameWithType: TResult4
    fullName: TResult4
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParam4
    nameWithType: TParam4
    fullName: TParam4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult4
    nameWithType: TResult4
    fullName: TResult4
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple{System.Reactive.Subjects.BehaviorSubject{System.Int32},System.IDisposable,ReactiveUI.ReactiveCommand{{TParam1},{TResult1}},ReactiveUI.ReactiveCommand{{TParam2},{TResult2}},ReactiveUI.ReactiveCommand{{TParam3},{TResult3}},ReactiveUI.ReactiveCommand{{TParam4},{TResult4}}}
  commentId: '!:System.ValueTuple{System.Reactive.Subjects.BehaviorSubject{System.Int32},System.IDisposable,ReactiveUI.ReactiveCommand{``0,``1},ReactiveUI.ReactiveCommand{``2,``3},ReactiveUI.ReactiveCommand{``4,``5},ReactiveUI.ReactiveCommand{``6,``7}}'
  definition: System.ValueTuple`6
  name: ValueTuple<BehaviorSubject<Int32>, IDisposable, ReactiveCommand<TParam1, TResult1>, ReactiveCommand<TParam2, TResult2>, ReactiveCommand<TParam3, TResult3>, ReactiveCommand<TParam4, TResult4>>
  nameWithType: ValueTuple<BehaviorSubject<Int32>, IDisposable, ReactiveCommand<TParam1, TResult1>, ReactiveCommand<TParam2, TResult2>, ReactiveCommand<TParam3, TResult3>, ReactiveCommand<TParam4, TResult4>>
  fullName: System.ValueTuple<System.Reactive.Subjects.BehaviorSubject<System.Int32>, System.IDisposable, ReactiveUI.ReactiveCommand<TParam1, TResult1>, ReactiveUI.ReactiveCommand<TParam2, TResult2>, ReactiveUI.ReactiveCommand<TParam3, TResult3>, ReactiveUI.ReactiveCommand<TParam4, TResult4>>
  nameWithType.vb: ValueTuple(Of BehaviorSubject(Of Int32), IDisposable, ReactiveCommand(Of TParam1, TResult1), ReactiveCommand(Of TParam2, TResult2), ReactiveCommand(Of TParam3, TResult3), ReactiveCommand(Of TParam4, TResult4))
  fullName.vb: System.ValueTuple(Of System.Reactive.Subjects.BehaviorSubject(Of System.Int32), System.IDisposable, ReactiveUI.ReactiveCommand(Of TParam1, TResult1), ReactiveUI.ReactiveCommand(Of TParam2, TResult2), ReactiveUI.ReactiveCommand(Of TParam3, TResult3), ReactiveUI.ReactiveCommand(Of TParam4, TResult4))
  name.vb: ValueTuple(Of BehaviorSubject(Of Int32), IDisposable, ReactiveCommand(Of TParam1, TResult1), ReactiveCommand(Of TParam2, TResult2), ReactiveCommand(Of TParam3, TResult3), ReactiveCommand(Of TParam4, TResult4))
  spec.csharp:
  - uid: System.ValueTuple`6
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reactive.Subjects.BehaviorSubject`1
    name: BehaviorSubject
    nameWithType: BehaviorSubject
    fullName: System.Reactive.Subjects.BehaviorSubject
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IDisposable
    name: IDisposable
    nameWithType: IDisposable
    fullName: System.IDisposable
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ReactiveUI.ReactiveCommand`2
    name: ReactiveCommand
    nameWithType: ReactiveCommand
    fullName: ReactiveUI.ReactiveCommand
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParam1
    nameWithType: TParam1
    fullName: TParam1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult1
    nameWithType: TResult1
    fullName: TResult1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ReactiveUI.ReactiveCommand`2
    name: ReactiveCommand
    nameWithType: ReactiveCommand
    fullName: ReactiveUI.ReactiveCommand
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParam2
    nameWithType: TParam2
    fullName: TParam2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult2
    nameWithType: TResult2
    fullName: TResult2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ReactiveUI.ReactiveCommand`2
    name: ReactiveCommand
    nameWithType: ReactiveCommand
    fullName: ReactiveUI.ReactiveCommand
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParam3
    nameWithType: TParam3
    fullName: TParam3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult3
    nameWithType: TResult3
    fullName: TResult3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ReactiveUI.ReactiveCommand`2
    name: ReactiveCommand
    nameWithType: ReactiveCommand
    fullName: ReactiveUI.ReactiveCommand
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParam4
    nameWithType: TParam4
    fullName: TParam4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult4
    nameWithType: TResult4
    fullName: TResult4
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`6
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reactive.Subjects.BehaviorSubject`1
    name: BehaviorSubject
    nameWithType: BehaviorSubject
    fullName: System.Reactive.Subjects.BehaviorSubject
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IDisposable
    name: IDisposable
    nameWithType: IDisposable
    fullName: System.IDisposable
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ReactiveUI.ReactiveCommand`2
    name: ReactiveCommand
    nameWithType: ReactiveCommand
    fullName: ReactiveUI.ReactiveCommand
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParam1
    nameWithType: TParam1
    fullName: TParam1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult1
    nameWithType: TResult1
    fullName: TResult1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ReactiveUI.ReactiveCommand`2
    name: ReactiveCommand
    nameWithType: ReactiveCommand
    fullName: ReactiveUI.ReactiveCommand
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParam2
    nameWithType: TParam2
    fullName: TParam2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult2
    nameWithType: TResult2
    fullName: TResult2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ReactiveUI.ReactiveCommand`2
    name: ReactiveCommand
    nameWithType: ReactiveCommand
    fullName: ReactiveUI.ReactiveCommand
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParam3
    nameWithType: TParam3
    fullName: TParam3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult3
    nameWithType: TResult3
    fullName: TResult3
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ReactiveUI.ReactiveCommand`2
    name: ReactiveCommand
    nameWithType: ReactiveCommand
    fullName: ReactiveUI.ReactiveCommand
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParam4
    nameWithType: TParam4
    fullName: TParam4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult4
    nameWithType: TResult4
    fullName: TResult4
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple`6
  isExternal: true
  name: ValueTuple<, , , , , >
  nameWithType: ValueTuple<, , , , , >
  fullName: System.ValueTuple<, , , , , >
  nameWithType.vb: ValueTuple(Of , , , , , )
  fullName.vb: System.ValueTuple(Of , , , , , )
  name.vb: ValueTuple(Of , , , , , )
  spec.csharp:
  - uid: System.ValueTuple`6
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`6
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TParam5},{TResult5}}
  commentId: '!:System.Func{``8,``9}'
  definition: System.Func`2
  name: Func<TParam5, TResult5>
  nameWithType: Func<TParam5, TResult5>
  fullName: System.Func<TParam5, TResult5>
  nameWithType.vb: Func(Of TParam5, TResult5)
  fullName.vb: System.Func(Of TParam5, TResult5)
  name.vb: Func(Of TParam5, TResult5)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParam5
    nameWithType: TParam5
    fullName: TParam5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult5
    nameWithType: TResult5
    fullName: TResult5
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParam5
    nameWithType: TParam5
    fullName: TParam5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult5
    nameWithType: TResult5
    fullName: TResult5
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple{System.Reactive.Subjects.BehaviorSubject{System.Int32},System.IDisposable,ReactiveUI.ReactiveCommand{{TParam1},{TResult1}},ReactiveUI.ReactiveCommand{{TParam2},{TResult2}},ReactiveUI.ReactiveCommand{{TParam3},{TResult3}},ReactiveUI.ReactiveCommand{{TParam4},{TResult4}},ReactiveUI.ReactiveCommand{{TParam5},{TResult5}}}
  commentId: '!:System.ValueTuple{System.Reactive.Subjects.BehaviorSubject{System.Int32},System.IDisposable,ReactiveUI.ReactiveCommand{``0,``1},ReactiveUI.ReactiveCommand{``2,``3},ReactiveUI.ReactiveCommand{``4,``5},ReactiveUI.ReactiveCommand{``6,``7},ReactiveUI.ReactiveCommand{``8,``9}}'
  definition: System.ValueTuple`7
  name: ValueTuple<BehaviorSubject<Int32>, IDisposable, ReactiveCommand<TParam1, TResult1>, ReactiveCommand<TParam2, TResult2>, ReactiveCommand<TParam3, TResult3>, ReactiveCommand<TParam4, TResult4>, ReactiveCommand<TParam5, TResult5>>
  nameWithType: ValueTuple<BehaviorSubject<Int32>, IDisposable, ReactiveCommand<TParam1, TResult1>, ReactiveCommand<TParam2, TResult2>, ReactiveCommand<TParam3, TResult3>, ReactiveCommand<TParam4, TResult4>, ReactiveCommand<TParam5, TResult5>>
  fullName: System.ValueTuple<System.Reactive.Subjects.BehaviorSubject<System.Int32>, System.IDisposable, ReactiveUI.ReactiveCommand<TParam1, TResult1>, ReactiveUI.ReactiveCommand<TParam2, TResult2>, ReactiveUI.ReactiveCommand<TParam3, TResult3>, ReactiveUI.ReactiveCommand<TParam4, TResult4>, ReactiveUI.ReactiveCommand<TParam5, TResult5>>
  nameWithType.vb: ValueTuple(Of BehaviorSubject(Of Int32), IDisposable, ReactiveCommand(Of TParam1, TResult1), ReactiveCommand(Of TParam2, TResult2), ReactiveCommand(Of TParam3, TResult3), ReactiveCommand(Of TParam4, TResult4), ReactiveCommand(Of TParam5, TResult5))
  fullName.vb: System.ValueTuple(Of System.Reactive.Subjects.BehaviorSubject(Of System.Int32), System.IDisposable, ReactiveUI.ReactiveCommand(Of TParam1, TResult1), ReactiveUI.ReactiveCommand(Of TParam2, TResult2), ReactiveUI.ReactiveCommand(Of TParam3, TResult3), ReactiveUI.ReactiveCommand(Of TParam4, TResult4), ReactiveUI.ReactiveCommand(Of TParam5, TResult5))
  name.vb: ValueTuple(Of BehaviorSubject(Of Int32), IDisposable, ReactiveCommand(Of TParam1, TResult1), ReactiveCommand(Of TParam2, TResult2), ReactiveCommand(Of TParam3, TResult3), ReactiveCommand(Of TParam4, TResult4), ReactiveCommand(Of TParam5, TResult5))
  spec.csharp:
  - uid: System.ValueTuple`7
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reactive.Subjects.BehaviorSubject`1
    name: BehaviorSubject
    nameWithType: BehaviorSubject
    fullName: System.Reactive.Subjects.BehaviorSubject
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IDisposable
    name: IDisposable
    nameWithType: IDisposable
    fullName: System.IDisposable
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ReactiveUI.ReactiveCommand`2
    name: ReactiveCommand
    nameWithType: ReactiveCommand
    fullName: ReactiveUI.ReactiveCommand
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParam1
    nameWithType: TParam1
    fullName: TParam1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult1
    nameWithType: TResult1
    fullName: TResult1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ReactiveUI.ReactiveCommand`2
    name: ReactiveCommand
    nameWithType: ReactiveCommand
    fullName: ReactiveUI.ReactiveCommand
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParam2
    nameWithType: TParam2
    fullName: TParam2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult2
    nameWithType: TResult2
    fullName: TResult2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ReactiveUI.ReactiveCommand`2
    name: ReactiveCommand
    nameWithType: ReactiveCommand
    fullName: ReactiveUI.ReactiveCommand
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParam3
    nameWithType: TParam3
    fullName: TParam3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult3
    nameWithType: TResult3
    fullName: TResult3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ReactiveUI.ReactiveCommand`2
    name: ReactiveCommand
    nameWithType: ReactiveCommand
    fullName: ReactiveUI.ReactiveCommand
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParam4
    nameWithType: TParam4
    fullName: TParam4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult4
    nameWithType: TResult4
    fullName: TResult4
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ReactiveUI.ReactiveCommand`2
    name: ReactiveCommand
    nameWithType: ReactiveCommand
    fullName: ReactiveUI.ReactiveCommand
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParam5
    nameWithType: TParam5
    fullName: TParam5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult5
    nameWithType: TResult5
    fullName: TResult5
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`7
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reactive.Subjects.BehaviorSubject`1
    name: BehaviorSubject
    nameWithType: BehaviorSubject
    fullName: System.Reactive.Subjects.BehaviorSubject
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IDisposable
    name: IDisposable
    nameWithType: IDisposable
    fullName: System.IDisposable
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ReactiveUI.ReactiveCommand`2
    name: ReactiveCommand
    nameWithType: ReactiveCommand
    fullName: ReactiveUI.ReactiveCommand
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParam1
    nameWithType: TParam1
    fullName: TParam1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult1
    nameWithType: TResult1
    fullName: TResult1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ReactiveUI.ReactiveCommand`2
    name: ReactiveCommand
    nameWithType: ReactiveCommand
    fullName: ReactiveUI.ReactiveCommand
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParam2
    nameWithType: TParam2
    fullName: TParam2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult2
    nameWithType: TResult2
    fullName: TResult2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ReactiveUI.ReactiveCommand`2
    name: ReactiveCommand
    nameWithType: ReactiveCommand
    fullName: ReactiveUI.ReactiveCommand
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParam3
    nameWithType: TParam3
    fullName: TParam3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult3
    nameWithType: TResult3
    fullName: TResult3
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ReactiveUI.ReactiveCommand`2
    name: ReactiveCommand
    nameWithType: ReactiveCommand
    fullName: ReactiveUI.ReactiveCommand
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParam4
    nameWithType: TParam4
    fullName: TParam4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult4
    nameWithType: TResult4
    fullName: TResult4
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ReactiveUI.ReactiveCommand`2
    name: ReactiveCommand
    nameWithType: ReactiveCommand
    fullName: ReactiveUI.ReactiveCommand
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParam5
    nameWithType: TParam5
    fullName: TParam5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult5
    nameWithType: TResult5
    fullName: TResult5
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple`7
  commentId: '!:System.ValueTuple`7'
  isExternal: true
  name: ValueTuple<, , , , , , >
  nameWithType: ValueTuple<, , , , , , >
  fullName: System.ValueTuple<, , , , , , >
  nameWithType.vb: ValueTuple(Of , , , , , , )
  fullName.vb: System.ValueTuple(Of , , , , , , )
  name.vb: ValueTuple(Of , , , , , , )
  spec.csharp:
  - uid: System.ValueTuple`7
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`7
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TParam6},{TResult6}}
  commentId: '!:System.Func{``10,``11}'
  definition: System.Func`2
  name: Func<TParam6, TResult6>
  nameWithType: Func<TParam6, TResult6>
  fullName: System.Func<TParam6, TResult6>
  nameWithType.vb: Func(Of TParam6, TResult6)
  fullName.vb: System.Func(Of TParam6, TResult6)
  name.vb: Func(Of TParam6, TResult6)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParam6
    nameWithType: TParam6
    fullName: TParam6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult6
    nameWithType: TResult6
    fullName: TResult6
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParam6
    nameWithType: TParam6
    fullName: TParam6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult6
    nameWithType: TResult6
    fullName: TResult6
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple{System.Reactive.Subjects.BehaviorSubject{System.Int32},System.IDisposable,ReactiveUI.ReactiveCommand{{TParam1},{TResult1}},ReactiveUI.ReactiveCommand{{TParam2},{TResult2}},ReactiveUI.ReactiveCommand{{TParam3},{TResult3}},ReactiveUI.ReactiveCommand{{TParam4},{TResult4}},ReactiveUI.ReactiveCommand{{TParam5},{TResult5}},System.ValueTuple{ReactiveUI.ReactiveCommand{{TParam6},{TResult6}}}}
  commentId: '!:System.ValueTuple{System.Reactive.Subjects.BehaviorSubject{System.Int32},System.IDisposable,ReactiveUI.ReactiveCommand{``0,``1},ReactiveUI.ReactiveCommand{``2,``3},ReactiveUI.ReactiveCommand{``4,``5},ReactiveUI.ReactiveCommand{``6,``7},ReactiveUI.ReactiveCommand{``8,``9},System.ValueTuple{ReactiveUI.ReactiveCommand{``10,``11}}}'
  definition: System.ValueTuple`8
  name: ValueTuple<BehaviorSubject<Int32>, IDisposable, ReactiveCommand<TParam1, TResult1>, ReactiveCommand<TParam2, TResult2>, ReactiveCommand<TParam3, TResult3>, ReactiveCommand<TParam4, TResult4>, ReactiveCommand<TParam5, TResult5>, ValueTuple<ReactiveCommand<TParam6, TResult6>>>
  nameWithType: ValueTuple<BehaviorSubject<Int32>, IDisposable, ReactiveCommand<TParam1, TResult1>, ReactiveCommand<TParam2, TResult2>, ReactiveCommand<TParam3, TResult3>, ReactiveCommand<TParam4, TResult4>, ReactiveCommand<TParam5, TResult5>, ValueTuple<ReactiveCommand<TParam6, TResult6>>>
  fullName: System.ValueTuple<System.Reactive.Subjects.BehaviorSubject<System.Int32>, System.IDisposable, ReactiveUI.ReactiveCommand<TParam1, TResult1>, ReactiveUI.ReactiveCommand<TParam2, TResult2>, ReactiveUI.ReactiveCommand<TParam3, TResult3>, ReactiveUI.ReactiveCommand<TParam4, TResult4>, ReactiveUI.ReactiveCommand<TParam5, TResult5>, System.ValueTuple<ReactiveUI.ReactiveCommand<TParam6, TResult6>>>
  nameWithType.vb: ValueTuple(Of BehaviorSubject(Of Int32), IDisposable, ReactiveCommand(Of TParam1, TResult1), ReactiveCommand(Of TParam2, TResult2), ReactiveCommand(Of TParam3, TResult3), ReactiveCommand(Of TParam4, TResult4), ReactiveCommand(Of TParam5, TResult5), ValueTuple(Of ReactiveCommand(Of TParam6, TResult6)))
  fullName.vb: System.ValueTuple(Of System.Reactive.Subjects.BehaviorSubject(Of System.Int32), System.IDisposable, ReactiveUI.ReactiveCommand(Of TParam1, TResult1), ReactiveUI.ReactiveCommand(Of TParam2, TResult2), ReactiveUI.ReactiveCommand(Of TParam3, TResult3), ReactiveUI.ReactiveCommand(Of TParam4, TResult4), ReactiveUI.ReactiveCommand(Of TParam5, TResult5), System.ValueTuple(Of ReactiveUI.ReactiveCommand(Of TParam6, TResult6)))
  name.vb: ValueTuple(Of BehaviorSubject(Of Int32), IDisposable, ReactiveCommand(Of TParam1, TResult1), ReactiveCommand(Of TParam2, TResult2), ReactiveCommand(Of TParam3, TResult3), ReactiveCommand(Of TParam4, TResult4), ReactiveCommand(Of TParam5, TResult5), ValueTuple(Of ReactiveCommand(Of TParam6, TResult6)))
  spec.csharp:
  - uid: System.ValueTuple`8
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reactive.Subjects.BehaviorSubject`1
    name: BehaviorSubject
    nameWithType: BehaviorSubject
    fullName: System.Reactive.Subjects.BehaviorSubject
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IDisposable
    name: IDisposable
    nameWithType: IDisposable
    fullName: System.IDisposable
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ReactiveUI.ReactiveCommand`2
    name: ReactiveCommand
    nameWithType: ReactiveCommand
    fullName: ReactiveUI.ReactiveCommand
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParam1
    nameWithType: TParam1
    fullName: TParam1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult1
    nameWithType: TResult1
    fullName: TResult1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ReactiveUI.ReactiveCommand`2
    name: ReactiveCommand
    nameWithType: ReactiveCommand
    fullName: ReactiveUI.ReactiveCommand
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParam2
    nameWithType: TParam2
    fullName: TParam2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult2
    nameWithType: TResult2
    fullName: TResult2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ReactiveUI.ReactiveCommand`2
    name: ReactiveCommand
    nameWithType: ReactiveCommand
    fullName: ReactiveUI.ReactiveCommand
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParam3
    nameWithType: TParam3
    fullName: TParam3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult3
    nameWithType: TResult3
    fullName: TResult3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ReactiveUI.ReactiveCommand`2
    name: ReactiveCommand
    nameWithType: ReactiveCommand
    fullName: ReactiveUI.ReactiveCommand
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParam4
    nameWithType: TParam4
    fullName: TParam4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult4
    nameWithType: TResult4
    fullName: TResult4
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ReactiveUI.ReactiveCommand`2
    name: ReactiveCommand
    nameWithType: ReactiveCommand
    fullName: ReactiveUI.ReactiveCommand
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParam5
    nameWithType: TParam5
    fullName: TParam5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult5
    nameWithType: TResult5
    fullName: TResult5
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ValueTuple`1
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: ReactiveUI.ReactiveCommand`2
    name: ReactiveCommand
    nameWithType: ReactiveCommand
    fullName: ReactiveUI.ReactiveCommand
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParam6
    nameWithType: TParam6
    fullName: TParam6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult6
    nameWithType: TResult6
    fullName: TResult6
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`8
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reactive.Subjects.BehaviorSubject`1
    name: BehaviorSubject
    nameWithType: BehaviorSubject
    fullName: System.Reactive.Subjects.BehaviorSubject
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IDisposable
    name: IDisposable
    nameWithType: IDisposable
    fullName: System.IDisposable
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ReactiveUI.ReactiveCommand`2
    name: ReactiveCommand
    nameWithType: ReactiveCommand
    fullName: ReactiveUI.ReactiveCommand
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParam1
    nameWithType: TParam1
    fullName: TParam1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult1
    nameWithType: TResult1
    fullName: TResult1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ReactiveUI.ReactiveCommand`2
    name: ReactiveCommand
    nameWithType: ReactiveCommand
    fullName: ReactiveUI.ReactiveCommand
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParam2
    nameWithType: TParam2
    fullName: TParam2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult2
    nameWithType: TResult2
    fullName: TResult2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ReactiveUI.ReactiveCommand`2
    name: ReactiveCommand
    nameWithType: ReactiveCommand
    fullName: ReactiveUI.ReactiveCommand
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParam3
    nameWithType: TParam3
    fullName: TParam3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult3
    nameWithType: TResult3
    fullName: TResult3
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ReactiveUI.ReactiveCommand`2
    name: ReactiveCommand
    nameWithType: ReactiveCommand
    fullName: ReactiveUI.ReactiveCommand
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParam4
    nameWithType: TParam4
    fullName: TParam4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult4
    nameWithType: TResult4
    fullName: TResult4
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ReactiveUI.ReactiveCommand`2
    name: ReactiveCommand
    nameWithType: ReactiveCommand
    fullName: ReactiveUI.ReactiveCommand
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParam5
    nameWithType: TParam5
    fullName: TParam5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult5
    nameWithType: TResult5
    fullName: TResult5
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ValueTuple`1
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ReactiveUI.ReactiveCommand`2
    name: ReactiveCommand
    nameWithType: ReactiveCommand
    fullName: ReactiveUI.ReactiveCommand
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParam6
    nameWithType: TParam6
    fullName: TParam6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult6
    nameWithType: TResult6
    fullName: TResult6
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple`8
  commentId: '!:System.ValueTuple`8'
  isExternal: true
  name: ValueTuple<, , , , , , , >
  nameWithType: ValueTuple<, , , , , , , >
  fullName: System.ValueTuple<, , , , , , , >
  nameWithType.vb: ValueTuple(Of , , , , , , , )
  fullName.vb: System.ValueTuple(Of , , , , , , , )
  name.vb: ValueTuple(Of , , , , , , , )
  spec.csharp:
  - uid: System.ValueTuple`8
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`8
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
