### YamlMime:ManagedReference
items:
- uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkByInt32IdRequestHandler`4
  commentId: T:Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkByInt32IdRequestHandler`4
  id: FetchFromEntityFrameworkByInt32IdRequestHandler`4
  parent: Whipstaff.MediatR.EntityFrameworkCore
  children:
  - Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkByInt32IdRequestHandler`4.#ctor(System.Func{System.Threading.Tasks.Task{`1}})
  - Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkByInt32IdRequestHandler`4.GetResultAsync(System.Linq.IQueryable{`3},System.Threading.CancellationToken)
  - Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkByInt32IdRequestHandler`4.GetWherePredicate(`0)
  langs:
  - csharp
  - vb
  name: FetchFromEntityFrameworkByInt32IdRequestHandler<TRequest, TDbContext, TEntity, TResult>
  nameWithType: FetchFromEntityFrameworkByInt32IdRequestHandler<TRequest, TDbContext, TEntity, TResult>
  fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkByInt32IdRequestHandler<TRequest, TDbContext, TEntity, TResult>
  type: Class
  source:
    path: Whipstaff.MediatR.EntityFrameworkCore
    isExternal: true
  assemblies:
  - Whipstaff.MediatR.EntityFrameworkCore
  namespace: Whipstaff.MediatR.EntityFrameworkCore
  summary: "\nMediatR request handler for acting on an entity framework dbset.\n"
  syntax:
    content: 'public abstract class FetchFromEntityFrameworkByInt32IdRequestHandler<TRequest, TDbContext, TEntity, TResult> : FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>, IRequestHandler<TRequest, TResult> where TRequest : IRequest<TResult>, IIntId where TDbContext : DbContext where TEntity : class, IIntId'
    typeParameters:
    - id: TRequest
      description: The type for the MediatR Request.
    - id: TDbContext
      description: The type for the Entity Framework DB Context.
    - id: TEntity
      description: The type for the POCO object.
    - id: TResult
      description: The type for the Result.
    content.vb: >-
      Public MustInherit Class FetchFromEntityFrameworkByInt32IdRequestHandler(Of TRequest As {IRequest(Of TResult), IIntId}, TDbContext As DbContext, TEntity As {Class, IIntId}, TResult)
          Inherits FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult)
          Implements IRequestHandler(Of TRequest, TResult)
  inheritance:
  - System.Object
  - Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler{{TRequest},{TDbContext},{TEntity},{TResult}}
  derivedClasses:
  - Whipstaff.MediatR.EntityFrameworkCore.FuncFetchFromEntityFrameworkByInt32IdRequestHandler`4
  implements:
  - MediatR.IRequestHandler{{TRequest},{TResult}}
  inheritedMembers:
  - Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler{{TRequest},{TDbContext},{TEntity},{TResult}}.Handle({TRequest},System.Threading.CancellationToken)
  - Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler{{TRequest},{TDbContext},{TEntity},{TResult}}.GetWherePredicate({TRequest})
  - Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler{{TRequest},{TDbContext},{TEntity},{TResult}}.GetSelector
  - Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler{{TRequest},{TDbContext},{TEntity},{TResult}}.GetDbSet({TDbContext})
  - Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler{{TRequest},{TDbContext},{TEntity},{TResult}}.GetResultAsync(System.Linq.IQueryable{{TResult}},System.Threading.CancellationToken)
  nameWithType.vb: FetchFromEntityFrameworkByInt32IdRequestHandler(Of TRequest, TDbContext, TEntity, TResult)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkByInt32IdRequestHandler(Of TRequest, TDbContext, TEntity, TResult)
  name.vb: FetchFromEntityFrameworkByInt32IdRequestHandler(Of TRequest, TDbContext, TEntity, TResult)
- uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkByInt32IdRequestHandler`4.#ctor(System.Func{System.Threading.Tasks.Task{`1}})
  commentId: M:Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkByInt32IdRequestHandler`4.#ctor(System.Func{System.Threading.Tasks.Task{`1}})
  id: '#ctor(System.Func{System.Threading.Tasks.Task{`1}})'
  parent: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkByInt32IdRequestHandler`4
  langs:
  - csharp
  - vb
  name: FetchFromEntityFrameworkByInt32IdRequestHandler(Func<Task<TDbContext>>)
  nameWithType: FetchFromEntityFrameworkByInt32IdRequestHandler<TRequest, TDbContext, TEntity, TResult>.FetchFromEntityFrameworkByInt32IdRequestHandler(Func<Task<TDbContext>>)
  fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkByInt32IdRequestHandler<TRequest, TDbContext, TEntity, TResult>.FetchFromEntityFrameworkByInt32IdRequestHandler(System.Func<System.Threading.Tasks.Task<TDbContext>>)
  type: Constructor
  source:
    path: Whipstaff.MediatR.EntityFrameworkCore
    isExternal: true
  assemblies:
  - Whipstaff.MediatR.EntityFrameworkCore
  namespace: Whipstaff.MediatR.EntityFrameworkCore
  summary: "\nInitializes a new instance of the <xref href=\"Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkByInt32IdRequestHandler%604\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  syntax:
    content: protected FetchFromEntityFrameworkByInt32IdRequestHandler(Func<Task<TDbContext>> dbContextFactory)
    parameters:
    - id: dbContextFactory
      type: System.Func{System.Threading.Tasks.Task{{TDbContext}}}
      description: The factory for the database context.
    content.vb: Protected Sub New(dbContextFactory As Func(Of Task(Of TDbContext)))
  overload: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkByInt32IdRequestHandler`4.#ctor*
  nameWithType.vb: FetchFromEntityFrameworkByInt32IdRequestHandler(Of TRequest, TDbContext, TEntity, TResult).FetchFromEntityFrameworkByInt32IdRequestHandler(Func(Of Task(Of TDbContext)))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkByInt32IdRequestHandler(Of TRequest, TDbContext, TEntity, TResult).FetchFromEntityFrameworkByInt32IdRequestHandler(System.Func(Of System.Threading.Tasks.Task(Of TDbContext)))
  name.vb: FetchFromEntityFrameworkByInt32IdRequestHandler(Func(Of Task(Of TDbContext)))
- uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkByInt32IdRequestHandler`4.GetWherePredicate(`0)
  commentId: M:Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkByInt32IdRequestHandler`4.GetWherePredicate(`0)
  id: GetWherePredicate(`0)
  parent: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkByInt32IdRequestHandler`4
  langs:
  - csharp
  - vb
  name: GetWherePredicate(TRequest)
  nameWithType: FetchFromEntityFrameworkByInt32IdRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetWherePredicate(TRequest)
  fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkByInt32IdRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetWherePredicate(TRequest)
  type: Method
  source:
    path: Whipstaff.MediatR.EntityFrameworkCore
    isExternal: true
  assemblies:
  - Whipstaff.MediatR.EntityFrameworkCore
  namespace: Whipstaff.MediatR.EntityFrameworkCore
  syntax:
    content: protected override sealed Expression<Func<TEntity, bool>> GetWherePredicate(TRequest request)
    parameters:
    - id: request
      type: '{TRequest}'
    return:
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
    content.vb: Protected NotOverridable Overrides Function GetWherePredicate(request As TRequest) As Expression(Of Func(Of TEntity, Boolean))
  overridden: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler{{TRequest},{TDbContext},{TEntity},{TResult}}.GetWherePredicate({TRequest})
  overload: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkByInt32IdRequestHandler`4.GetWherePredicate*
  nameWithType.vb: FetchFromEntityFrameworkByInt32IdRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetWherePredicate(TRequest)
  modifiers.csharp:
  - protected
  - override
  - sealed
  modifiers.vb:
  - Protected
  - Overrides
  - NotOverridable
  fullName.vb: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkByInt32IdRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetWherePredicate(TRequest)
- uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkByInt32IdRequestHandler`4.GetResultAsync(System.Linq.IQueryable{`3},System.Threading.CancellationToken)
  commentId: M:Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkByInt32IdRequestHandler`4.GetResultAsync(System.Linq.IQueryable{`3},System.Threading.CancellationToken)
  id: GetResultAsync(System.Linq.IQueryable{`3},System.Threading.CancellationToken)
  parent: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkByInt32IdRequestHandler`4
  langs:
  - csharp
  - vb
  name: GetResultAsync(IQueryable<TResult>, CancellationToken)
  nameWithType: FetchFromEntityFrameworkByInt32IdRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetResultAsync(IQueryable<TResult>, CancellationToken)
  fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkByInt32IdRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetResultAsync(System.Linq.IQueryable<TResult>, System.Threading.CancellationToken)
  type: Method
  source:
    path: Whipstaff.MediatR.EntityFrameworkCore
    isExternal: true
  assemblies:
  - Whipstaff.MediatR.EntityFrameworkCore
  namespace: Whipstaff.MediatR.EntityFrameworkCore
  syntax:
    content: protected override Task<TResult> GetResultAsync(IQueryable<TResult> queryable, CancellationToken cancellationToken)
    parameters:
    - id: queryable
      type: System.Linq.IQueryable{{TResult}}
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{{TResult}}
    content.vb: Protected Overrides Function GetResultAsync(queryable As IQueryable(Of TResult), cancellationToken As CancellationToken) As Task(Of TResult)
  overridden: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler{{TRequest},{TDbContext},{TEntity},{TResult}}.GetResultAsync(System.Linq.IQueryable{{TResult}},System.Threading.CancellationToken)
  overload: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkByInt32IdRequestHandler`4.GetResultAsync*
  nameWithType.vb: FetchFromEntityFrameworkByInt32IdRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetResultAsync(IQueryable(Of TResult), CancellationToken)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkByInt32IdRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetResultAsync(System.Linq.IQueryable(Of TResult), System.Threading.CancellationToken)
  name.vb: GetResultAsync(IQueryable(Of TResult), CancellationToken)
references:
- uid: Whipstaff.MediatR.EntityFrameworkCore
  commentId: N:Whipstaff.MediatR.EntityFrameworkCore
  isExternal: true
  name: Whipstaff.MediatR.EntityFrameworkCore
  nameWithType: Whipstaff.MediatR.EntityFrameworkCore
  fullName: Whipstaff.MediatR.EntityFrameworkCore
- uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler{{TRequest},{TDbContext},{TEntity},{TResult}}
  commentId: T:Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler{`0,`1,`2,`3}
  parent: Whipstaff.MediatR.EntityFrameworkCore
  definition: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4
  name: FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>
  nameWithType: FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>
  fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>
  nameWithType.vb: FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult)
  fullName.vb: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult)
  name.vb: FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult)
  spec.csharp:
  - uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4
    name: FetchFromEntityFrameworkRequestHandler
    nameWithType: FetchFromEntityFrameworkRequestHandler
    fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4
    name: FetchFromEntityFrameworkRequestHandler
    nameWithType: FetchFromEntityFrameworkRequestHandler
    fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: MediatR.IRequestHandler{{TRequest},{TResult}}
  commentId: '!:MediatR.IRequestHandler{`0,`3}'
  definition: MediatR.IRequestHandler`2
  name: IRequestHandler<TRequest, TResult>
  nameWithType: IRequestHandler<TRequest, TResult>
  fullName: MediatR.IRequestHandler<TRequest, TResult>
  nameWithType.vb: IRequestHandler(Of TRequest, TResult)
  fullName.vb: MediatR.IRequestHandler(Of TRequest, TResult)
  name.vb: IRequestHandler(Of TRequest, TResult)
  spec.csharp:
  - uid: MediatR.IRequestHandler`2
    name: IRequestHandler
    nameWithType: IRequestHandler
    fullName: MediatR.IRequestHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MediatR.IRequestHandler`2
    name: IRequestHandler
    nameWithType: IRequestHandler
    fullName: MediatR.IRequestHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler{{TRequest},{TDbContext},{TEntity},{TResult}}.Handle({TRequest},System.Threading.CancellationToken)
  commentId: M:Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler{`0,`1,`2,`3}.Handle(`0,System.Threading.CancellationToken)
  parent: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler{{TRequest},{TDbContext},{TEntity},{TResult}}
  definition: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.Handle(`0,System.Threading.CancellationToken)
  name: Handle(TRequest, CancellationToken)
  nameWithType: FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.Handle(TRequest, CancellationToken)
  fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.Handle(TRequest, System.Threading.CancellationToken)
  nameWithType.vb: FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).Handle(TRequest, CancellationToken)
  fullName.vb: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).Handle(TRequest, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.Handle(`0,System.Threading.CancellationToken)
    name: Handle
    nameWithType: FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.Handle
    fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.Handle
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.Handle(`0,System.Threading.CancellationToken)
    name: Handle
    nameWithType: FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).Handle
    fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).Handle
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler{{TRequest},{TDbContext},{TEntity},{TResult}}.GetWherePredicate({TRequest})
  commentId: M:Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler{`0,`1,`2,`3}.GetWherePredicate(`0)
  parent: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler{{TRequest},{TDbContext},{TEntity},{TResult}}
  definition: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetWherePredicate(`0)
  name: GetWherePredicate(TRequest)
  nameWithType: FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetWherePredicate(TRequest)
  fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetWherePredicate(TRequest)
  nameWithType.vb: FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetWherePredicate(TRequest)
  fullName.vb: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetWherePredicate(TRequest)
  spec.csharp:
  - uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetWherePredicate(`0)
    name: GetWherePredicate
    nameWithType: FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetWherePredicate
    fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetWherePredicate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetWherePredicate(`0)
    name: GetWherePredicate
    nameWithType: FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetWherePredicate
    fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetWherePredicate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: )
    nameWithType: )
    fullName: )
- uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler{{TRequest},{TDbContext},{TEntity},{TResult}}.GetSelector
  commentId: M:Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler{`0,`1,`2,`3}.GetSelector
  parent: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler{{TRequest},{TDbContext},{TEntity},{TResult}}
  definition: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetSelector
  name: GetSelector()
  nameWithType: FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetSelector()
  fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetSelector()
  nameWithType.vb: FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetSelector()
  fullName.vb: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetSelector()
  spec.csharp:
  - uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetSelector
    name: GetSelector
    nameWithType: FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetSelector
    fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetSelector
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetSelector
    name: GetSelector
    nameWithType: FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetSelector
    fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetSelector
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler{{TRequest},{TDbContext},{TEntity},{TResult}}.GetDbSet({TDbContext})
  commentId: M:Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler{`0,`1,`2,`3}.GetDbSet(`1)
  parent: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler{{TRequest},{TDbContext},{TEntity},{TResult}}
  definition: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetDbSet(`1)
  name: GetDbSet(TDbContext)
  nameWithType: FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetDbSet(TDbContext)
  fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetDbSet(TDbContext)
  nameWithType.vb: FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetDbSet(TDbContext)
  fullName.vb: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetDbSet(TDbContext)
  spec.csharp:
  - uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetDbSet(`1)
    name: GetDbSet
    nameWithType: FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetDbSet
    fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetDbSet
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetDbSet(`1)
    name: GetDbSet
    nameWithType: FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetDbSet
    fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetDbSet
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: )
    nameWithType: )
    fullName: )
- uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler{{TRequest},{TDbContext},{TEntity},{TResult}}.GetResultAsync(System.Linq.IQueryable{{TResult}},System.Threading.CancellationToken)
  commentId: M:Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler{`0,`1,`2,`3}.GetResultAsync(System.Linq.IQueryable{`3},System.Threading.CancellationToken)
  parent: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler{{TRequest},{TDbContext},{TEntity},{TResult}}
  definition: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetResultAsync(System.Linq.IQueryable{`3},System.Threading.CancellationToken)
  name: GetResultAsync(IQueryable<TResult>, CancellationToken)
  nameWithType: FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetResultAsync(IQueryable<TResult>, CancellationToken)
  fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetResultAsync(System.Linq.IQueryable<TResult>, System.Threading.CancellationToken)
  nameWithType.vb: FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetResultAsync(IQueryable(Of TResult), CancellationToken)
  fullName.vb: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetResultAsync(System.Linq.IQueryable(Of TResult), System.Threading.CancellationToken)
  name.vb: GetResultAsync(IQueryable(Of TResult), CancellationToken)
  spec.csharp:
  - uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetResultAsync(System.Linq.IQueryable{`3},System.Threading.CancellationToken)
    name: GetResultAsync
    nameWithType: FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetResultAsync
    fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetResultAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetResultAsync(System.Linq.IQueryable{`3},System.Threading.CancellationToken)
    name: GetResultAsync
    nameWithType: FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetResultAsync
    fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetResultAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4
  commentId: T:Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4
  isExternal: true
  name: FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>
  nameWithType: FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>
  fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>
  nameWithType.vb: FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult)
  fullName.vb: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult)
  name.vb: FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult)
  spec.csharp:
  - uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4
    name: FetchFromEntityFrameworkRequestHandler
    nameWithType: FetchFromEntityFrameworkRequestHandler
    fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4
    name: FetchFromEntityFrameworkRequestHandler
    nameWithType: FetchFromEntityFrameworkRequestHandler
    fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: MediatR.IRequestHandler`2
  isExternal: true
  name: IRequestHandler<, >
  nameWithType: IRequestHandler<, >
  fullName: MediatR.IRequestHandler<, >
  nameWithType.vb: IRequestHandler(Of , )
  fullName.vb: MediatR.IRequestHandler(Of , )
  name.vb: IRequestHandler(Of , )
  spec.csharp:
  - uid: MediatR.IRequestHandler`2
    name: IRequestHandler
    nameWithType: IRequestHandler
    fullName: MediatR.IRequestHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MediatR.IRequestHandler`2
    name: IRequestHandler
    nameWithType: IRequestHandler
    fullName: MediatR.IRequestHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.Handle(`0,System.Threading.CancellationToken)
  commentId: M:Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.Handle(`0,System.Threading.CancellationToken)
  isExternal: true
  name: Handle(TRequest, CancellationToken)
  nameWithType: FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.Handle(TRequest, CancellationToken)
  fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.Handle(TRequest, System.Threading.CancellationToken)
  nameWithType.vb: FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).Handle(TRequest, CancellationToken)
  fullName.vb: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).Handle(TRequest, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.Handle(`0,System.Threading.CancellationToken)
    name: Handle
    nameWithType: FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.Handle
    fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.Handle
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.Handle(`0,System.Threading.CancellationToken)
    name: Handle
    nameWithType: FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).Handle
    fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).Handle
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetWherePredicate(`0)
  commentId: M:Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetWherePredicate(`0)
  isExternal: true
  name: GetWherePredicate(TRequest)
  nameWithType: FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetWherePredicate(TRequest)
  fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetWherePredicate(TRequest)
  nameWithType.vb: FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetWherePredicate(TRequest)
  fullName.vb: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetWherePredicate(TRequest)
  spec.csharp:
  - uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetWherePredicate(`0)
    name: GetWherePredicate
    nameWithType: FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetWherePredicate
    fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetWherePredicate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetWherePredicate(`0)
    name: GetWherePredicate
    nameWithType: FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetWherePredicate
    fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetWherePredicate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: )
    nameWithType: )
    fullName: )
- uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetSelector
  commentId: M:Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetSelector
  isExternal: true
  name: GetSelector()
  nameWithType: FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetSelector()
  fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetSelector()
  nameWithType.vb: FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetSelector()
  fullName.vb: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetSelector()
  spec.csharp:
  - uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetSelector
    name: GetSelector
    nameWithType: FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetSelector
    fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetSelector
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetSelector
    name: GetSelector
    nameWithType: FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetSelector
    fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetSelector
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetDbSet(`1)
  commentId: M:Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetDbSet(`1)
  isExternal: true
  name: GetDbSet(TDbContext)
  nameWithType: FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetDbSet(TDbContext)
  fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetDbSet(TDbContext)
  nameWithType.vb: FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetDbSet(TDbContext)
  fullName.vb: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetDbSet(TDbContext)
  spec.csharp:
  - uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetDbSet(`1)
    name: GetDbSet
    nameWithType: FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetDbSet
    fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetDbSet
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetDbSet(`1)
    name: GetDbSet
    nameWithType: FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetDbSet
    fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetDbSet
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: )
    nameWithType: )
    fullName: )
- uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetResultAsync(System.Linq.IQueryable{`3},System.Threading.CancellationToken)
  commentId: M:Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetResultAsync(System.Linq.IQueryable{`3},System.Threading.CancellationToken)
  isExternal: true
  name: GetResultAsync(IQueryable<TResult>, CancellationToken)
  nameWithType: FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetResultAsync(IQueryable<TResult>, CancellationToken)
  fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetResultAsync(System.Linq.IQueryable<TResult>, System.Threading.CancellationToken)
  nameWithType.vb: FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetResultAsync(IQueryable(Of TResult), CancellationToken)
  fullName.vb: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetResultAsync(System.Linq.IQueryable(Of TResult), System.Threading.CancellationToken)
  name.vb: GetResultAsync(IQueryable(Of TResult), CancellationToken)
  spec.csharp:
  - uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetResultAsync(System.Linq.IQueryable{`3},System.Threading.CancellationToken)
    name: GetResultAsync
    nameWithType: FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetResultAsync
    fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetResultAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler`4.GetResultAsync(System.Linq.IQueryable{`3},System.Threading.CancellationToken)
    name: GetResultAsync
    nameWithType: FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetResultAsync
    fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetResultAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkByInt32IdRequestHandler`4.#ctor*
  commentId: Overload:Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkByInt32IdRequestHandler`4.#ctor
  isExternal: true
  name: FetchFromEntityFrameworkByInt32IdRequestHandler
  nameWithType: FetchFromEntityFrameworkByInt32IdRequestHandler<TRequest, TDbContext, TEntity, TResult>.FetchFromEntityFrameworkByInt32IdRequestHandler
  fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkByInt32IdRequestHandler<TRequest, TDbContext, TEntity, TResult>.FetchFromEntityFrameworkByInt32IdRequestHandler
  nameWithType.vb: FetchFromEntityFrameworkByInt32IdRequestHandler(Of TRequest, TDbContext, TEntity, TResult).FetchFromEntityFrameworkByInt32IdRequestHandler
  fullName.vb: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkByInt32IdRequestHandler(Of TRequest, TDbContext, TEntity, TResult).FetchFromEntityFrameworkByInt32IdRequestHandler
- uid: System.Func{System.Threading.Tasks.Task{{TDbContext}}}
  commentId: '!:System.Func{System.Threading.Tasks.Task{`1}}'
  definition: System.Func`1
  name: Func<Task<TDbContext>>
  nameWithType: Func<Task<TDbContext>>
  fullName: System.Func<System.Threading.Tasks.Task<TDbContext>>
  nameWithType.vb: Func(Of Task(Of TDbContext))
  fullName.vb: System.Func(Of System.Threading.Tasks.Task(Of TDbContext))
  name.vb: Func(Of Task(Of TDbContext))
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`1
  isExternal: true
  name: Func<>
  nameWithType: Func<>
  fullName: System.Func<>
  nameWithType.vb: Func(Of )
  fullName.vb: System.Func(Of )
  name.vb: Func(Of )
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkByInt32IdRequestHandler`4.GetWherePredicate*
  commentId: Overload:Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkByInt32IdRequestHandler`4.GetWherePredicate
  isExternal: true
  name: GetWherePredicate
  nameWithType: FetchFromEntityFrameworkByInt32IdRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetWherePredicate
  fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkByInt32IdRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetWherePredicate
  nameWithType.vb: FetchFromEntityFrameworkByInt32IdRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetWherePredicate
  fullName.vb: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkByInt32IdRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetWherePredicate
- uid: '{TRequest}'
  commentId: '!:TRequest'
  definition: TRequest
  name: TRequest
  nameWithType: TRequest
  fullName: TRequest
- uid: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
  commentId: '!:System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}}'
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TEntity, Boolean>>
  nameWithType: Expression<Func<TEntity, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of TEntity, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean))
  name.vb: Expression(Of Func(Of TEntity, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TRequest
  name: TRequest
  nameWithType: TRequest
  fullName: TRequest
- uid: System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<>
  nameWithType: Expression<>
  fullName: System.Linq.Expressions.Expression<>
  nameWithType.vb: Expression(Of )
  fullName.vb: System.Linq.Expressions.Expression(Of )
  name.vb: Expression(Of )
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkByInt32IdRequestHandler`4.GetResultAsync*
  commentId: Overload:Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkByInt32IdRequestHandler`4.GetResultAsync
  isExternal: true
  name: GetResultAsync
  nameWithType: FetchFromEntityFrameworkByInt32IdRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetResultAsync
  fullName: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkByInt32IdRequestHandler<TRequest, TDbContext, TEntity, TResult>.GetResultAsync
  nameWithType.vb: FetchFromEntityFrameworkByInt32IdRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetResultAsync
  fullName.vb: Whipstaff.MediatR.EntityFrameworkCore.FetchFromEntityFrameworkByInt32IdRequestHandler(Of TRequest, TDbContext, TEntity, TResult).GetResultAsync
- uid: System.Linq.IQueryable{{TResult}}
  commentId: '!:System.Linq.IQueryable{`3}'
  definition: System.Linq.IQueryable`1
  name: IQueryable<TResult>
  nameWithType: IQueryable<TResult>
  fullName: System.Linq.IQueryable<TResult>
  nameWithType.vb: IQueryable(Of TResult)
  fullName.vb: System.Linq.IQueryable(Of TResult)
  name.vb: IQueryable(Of TResult)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{{TResult}}
  commentId: '!:System.Threading.Tasks.Task{``0}'
  definition: System.Threading.Tasks.Task`1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable`1
  isExternal: true
  name: IQueryable<>
  nameWithType: IQueryable<>
  fullName: System.Linq.IQueryable<>
  nameWithType.vb: IQueryable(Of )
  fullName.vb: System.Linq.IQueryable(Of )
  name.vb: IQueryable(Of )
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
