### YamlMime:ManagedReference
items:
- uid: Whipstaff.Rx.ObservableExtensions
  commentId: T:Whipstaff.Rx.ObservableExtensions
  id: ObservableExtensions
  parent: Whipstaff.Rx
  children:
  - Whipstaff.Rx.ObservableExtensions.ObserveCurrentAndPrevious``1(System.IObservable{``0})
  - Whipstaff.Rx.ObservableExtensions.ObserveCurrentAndPrevious``2(System.IObservable{``0},System.Func{``0,``0,``1})
  - Whipstaff.Rx.ObservableExtensions.ScanNumberThatAreTrue(System.IObservable{System.Boolean})
  - Whipstaff.Rx.ObservableExtensions.SubscribeWithFeatureUsageTracking``1(System.IObservable{``0},System.Action{``0},Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingManager,System.String)
  - Whipstaff.Rx.ObservableExtensions.SubscribeWithFeatureUsageTracking``1(System.IObservable{``0},System.Action{``0},System.Action,Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingManager,System.String)
  - Whipstaff.Rx.ObservableExtensions.SubscribeWithFeatureUsageTracking``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingManager,System.String)
  - Whipstaff.Rx.ObservableExtensions.SubscribeWithFeatureUsageTracking``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},System.Action,Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingManager,System.String)
  - Whipstaff.Rx.ObservableExtensions.SubscribeWithFeatureUsageTracking``1(System.IObservable{``0},System.IObserver{``0},Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingManager,System.String)
  - Whipstaff.Rx.ObservableExtensions.SubscribeWithSubFeatureUsageTracking``1(System.IObservable{``0},System.Action{``0},Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingSession,System.String)
  - Whipstaff.Rx.ObservableExtensions.SubscribeWithSubFeatureUsageTracking``1(System.IObservable{``0},System.Action{``0},System.Action,Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingSession,System.String)
  - Whipstaff.Rx.ObservableExtensions.SubscribeWithSubFeatureUsageTracking``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingSession,System.String)
  - Whipstaff.Rx.ObservableExtensions.SubscribeWithSubFeatureUsageTracking``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},System.Action,Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingSession,System.String)
  - Whipstaff.Rx.ObservableExtensions.SubscribeWithSubFeatureUsageTracking``1(System.IObservable{``0},System.IObserver{``0},Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingSession,System.String)
  langs:
  - csharp
  - vb
  name: ObservableExtensions
  nameWithType: ObservableExtensions
  fullName: Whipstaff.Rx.ObservableExtensions
  type: Class
  source:
    path: Whipstaff.Rx
    isExternal: true
  assemblies:
  - Whipstaff.Rx
  namespace: Whipstaff.Rx
  summary: "\nExtension methods for LINQ observables.\n"
  syntax:
    content: 'public static class ObservableExtensions : Object'
    content.vb: >-
      Public Module ObservableExtensions
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Whipstaff.Rx.ObservableExtensions.ScanNumberThatAreTrue(System.IObservable{System.Boolean})
  commentId: M:Whipstaff.Rx.ObservableExtensions.ScanNumberThatAreTrue(System.IObservable{System.Boolean})
  id: ScanNumberThatAreTrue(System.IObservable{System.Boolean})
  isExtensionMethod: true
  parent: Whipstaff.Rx.ObservableExtensions
  langs:
  - csharp
  - vb
  name: ScanNumberThatAreTrue(IObservable<Boolean>)
  nameWithType: ObservableExtensions.ScanNumberThatAreTrue(IObservable<Boolean>)
  fullName: Whipstaff.Rx.ObservableExtensions.ScanNumberThatAreTrue(System.IObservable<System.Boolean>)
  type: Method
  source:
    path: Whipstaff.Rx
    isExternal: true
  assemblies:
  - Whipstaff.Rx
  namespace: Whipstaff.Rx
  summary: "\nProduces an observable that scans for the number of items in the sequence that are true.\n"
  syntax:
    content: public static IObservable<int> ScanNumberThatAreTrue(this IObservable<bool> observable)
    parameters:
    - id: observable
      type: System.IObservable{System.Boolean}
      description: The observable boolean sequence to scan.
    return:
      type: System.IObservable{System.Int32}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ScanNumberThatAreTrue(observable As IObservable(Of Boolean)) As IObservable(Of Integer)
  overload: Whipstaff.Rx.ObservableExtensions.ScanNumberThatAreTrue*
  nameWithType.vb: ObservableExtensions.ScanNumberThatAreTrue(IObservable(Of Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Whipstaff.Rx.ObservableExtensions.ScanNumberThatAreTrue(System.IObservable(Of System.Boolean))
  name.vb: ScanNumberThatAreTrue(IObservable(Of Boolean))
- uid: Whipstaff.Rx.ObservableExtensions.ObserveCurrentAndPrevious``1(System.IObservable{``0})
  commentId: M:Whipstaff.Rx.ObservableExtensions.ObserveCurrentAndPrevious``1(System.IObservable{``0})
  id: ObserveCurrentAndPrevious``1(System.IObservable{``0})
  isExtensionMethod: true
  parent: Whipstaff.Rx.ObservableExtensions
  langs:
  - csharp
  - vb
  name: ObserveCurrentAndPrevious<TSource>(IObservable<TSource>)
  nameWithType: ObservableExtensions.ObserveCurrentAndPrevious<TSource>(IObservable<TSource>)
  fullName: Whipstaff.Rx.ObservableExtensions.ObserveCurrentAndPrevious<TSource>(System.IObservable<TSource>)
  type: Method
  source:
    path: Whipstaff.Rx
    isExternal: true
  assemblies:
  - Whipstaff.Rx
  namespace: Whipstaff.Rx
  summary: "\nProduces an observable for monitoring the previous and current values.\n"
  remarks: "\nBased upon http://www.zerobugbuild.com/?p=213\n"
  syntax:
    content: public static IObservable<ValueTuple<TSource, TSource>> ObserveCurrentAndPrevious<TSource>(this IObservable<TSource> source)
    parameters:
    - id: source
      type: System.IObservable{{TSource}}
      description: The input observable source.
    typeParameters:
    - id: TSource
      description: The type for the input observable.
    return:
      type: System.IObservable{System.ValueTuple{{TSource},{TSource}}}
      description: A tuple representing the previous and current values.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ObserveCurrentAndPrevious(Of TSource)(source As IObservable(Of TSource)) As IObservable(Of ValueTuple(Of TSource, TSource))
  overload: Whipstaff.Rx.ObservableExtensions.ObserveCurrentAndPrevious*
  nameWithType.vb: ObservableExtensions.ObserveCurrentAndPrevious(Of TSource)(IObservable(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Whipstaff.Rx.ObservableExtensions.ObserveCurrentAndPrevious(Of TSource)(System.IObservable(Of TSource))
  name.vb: ObserveCurrentAndPrevious(Of TSource)(IObservable(Of TSource))
- uid: Whipstaff.Rx.ObservableExtensions.ObserveCurrentAndPrevious``2(System.IObservable{``0},System.Func{``0,``0,``1})
  commentId: M:Whipstaff.Rx.ObservableExtensions.ObserveCurrentAndPrevious``2(System.IObservable{``0},System.Func{``0,``0,``1})
  id: ObserveCurrentAndPrevious``2(System.IObservable{``0},System.Func{``0,``0,``1})
  isExtensionMethod: true
  parent: Whipstaff.Rx.ObservableExtensions
  langs:
  - csharp
  - vb
  name: ObserveCurrentAndPrevious<TSource, TResult>(IObservable<TSource>, Func<TSource, TSource, TResult>)
  nameWithType: ObservableExtensions.ObserveCurrentAndPrevious<TSource, TResult>(IObservable<TSource>, Func<TSource, TSource, TResult>)
  fullName: Whipstaff.Rx.ObservableExtensions.ObserveCurrentAndPrevious<TSource, TResult>(System.IObservable<TSource>, System.Func<TSource, TSource, TResult>)
  type: Method
  source:
    path: Whipstaff.Rx
    isExternal: true
  assemblies:
  - Whipstaff.Rx
  namespace: Whipstaff.Rx
  summary: "\nProduces an observable for monitoring the previous and current values, allowing manipulation of the result via a selector.\n"
  remarks: "\nBased upon http://www.zerobugbuild.com/?p=213\n"
  syntax:
    content: public static IObservable<TResult> ObserveCurrentAndPrevious<TSource, TResult>(this IObservable<TSource> source, Func<TSource, TSource, TResult> selector)
    parameters:
    - id: source
      type: System.IObservable{{TSource}}
      description: The input observable source.
    - id: selector
      type: System.Func{{TSource},{TSource},{TResult}}
      description: Selector to process the tuple of the previous and current values.
    typeParameters:
    - id: TSource
      description: The type for the input observable.
    - id: TResult
      description: The type for the result returned by the method.
    return:
      type: System.IObservable{{TResult}}
      description: The output of the selector function.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ObserveCurrentAndPrevious(Of TSource, TResult)(source As IObservable(Of TSource), selector As Func(Of TSource, TSource, TResult)) As IObservable(Of TResult)
  overload: Whipstaff.Rx.ObservableExtensions.ObserveCurrentAndPrevious*
  nameWithType.vb: ObservableExtensions.ObserveCurrentAndPrevious(Of TSource, TResult)(IObservable(Of TSource), Func(Of TSource, TSource, TResult))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Whipstaff.Rx.ObservableExtensions.ObserveCurrentAndPrevious(Of TSource, TResult)(System.IObservable(Of TSource), System.Func(Of TSource, TSource, TResult))
  name.vb: ObserveCurrentAndPrevious(Of TSource, TResult)(IObservable(Of TSource), Func(Of TSource, TSource, TResult))
- uid: Whipstaff.Rx.ObservableExtensions.SubscribeWithFeatureUsageTracking``1(System.IObservable{``0},System.Action{``0},Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingManager,System.String)
  commentId: M:Whipstaff.Rx.ObservableExtensions.SubscribeWithFeatureUsageTracking``1(System.IObservable{``0},System.Action{``0},Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingManager,System.String)
  id: SubscribeWithFeatureUsageTracking``1(System.IObservable{``0},System.Action{``0},Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingManager,System.String)
  isExtensionMethod: true
  parent: Whipstaff.Rx.ObservableExtensions
  langs:
  - csharp
  - vb
  name: SubscribeWithFeatureUsageTracking<T>(IObservable<T>, Action<T>, IFeatureUsageTrackingManager, String)
  nameWithType: ObservableExtensions.SubscribeWithFeatureUsageTracking<T>(IObservable<T>, Action<T>, IFeatureUsageTrackingManager, String)
  fullName: Whipstaff.Rx.ObservableExtensions.SubscribeWithFeatureUsageTracking<T>(System.IObservable<T>, System.Action<T>, Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingManager, System.String)
  type: Method
  source:
    path: Whipstaff.Rx
    isExternal: true
  assemblies:
  - Whipstaff.Rx
  namespace: Whipstaff.Rx
  summary: "\nWraps an observable subscription with a Feature Usage Tracking Session.\n"
  syntax:
    content: public static IDisposable SubscribeWithFeatureUsageTracking<T>(this IObservable<T> source, Action<T> onNext, IFeatureUsageTrackingManager featureUsageTrackingManager, string featureName)
    parameters:
    - id: source
      type: System.IObservable{{T}}
      description: Observable sequence to subscribe to.
    - id: onNext
      type: System.Action{{T}}
      description: Action to invoke for each element in the observable sequence.
    - id: featureUsageTrackingManager
      type: Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingManager
    - id: featureName
      type: System.String
    typeParameters:
    - id: T
      description: The type for the input observable.
    return:
      type: System.IDisposable
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SubscribeWithFeatureUsageTracking(Of T)(source As IObservable(Of T), onNext As Action(Of T), featureUsageTrackingManager As IFeatureUsageTrackingManager, featureName As String) As IDisposable
  overload: Whipstaff.Rx.ObservableExtensions.SubscribeWithFeatureUsageTracking*
  nameWithType.vb: ObservableExtensions.SubscribeWithFeatureUsageTracking(Of T)(IObservable(Of T), Action(Of T), IFeatureUsageTrackingManager, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Whipstaff.Rx.ObservableExtensions.SubscribeWithFeatureUsageTracking(Of T)(System.IObservable(Of T), System.Action(Of T), Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingManager, System.String)
  name.vb: SubscribeWithFeatureUsageTracking(Of T)(IObservable(Of T), Action(Of T), IFeatureUsageTrackingManager, String)
- uid: Whipstaff.Rx.ObservableExtensions.SubscribeWithFeatureUsageTracking``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingManager,System.String)
  commentId: M:Whipstaff.Rx.ObservableExtensions.SubscribeWithFeatureUsageTracking``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingManager,System.String)
  id: SubscribeWithFeatureUsageTracking``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingManager,System.String)
  isExtensionMethod: true
  parent: Whipstaff.Rx.ObservableExtensions
  langs:
  - csharp
  - vb
  name: SubscribeWithFeatureUsageTracking<T>(IObservable<T>, Action<T>, Action<Exception>, IFeatureUsageTrackingManager, String)
  nameWithType: ObservableExtensions.SubscribeWithFeatureUsageTracking<T>(IObservable<T>, Action<T>, Action<Exception>, IFeatureUsageTrackingManager, String)
  fullName: Whipstaff.Rx.ObservableExtensions.SubscribeWithFeatureUsageTracking<T>(System.IObservable<T>, System.Action<T>, System.Action<System.Exception>, Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingManager, System.String)
  type: Method
  source:
    path: Whipstaff.Rx
    isExternal: true
  assemblies:
  - Whipstaff.Rx
  namespace: Whipstaff.Rx
  summary: "\nWraps an observable subscription with a Feature Usage Tracking Session.\n"
  syntax:
    content: public static IDisposable SubscribeWithFeatureUsageTracking<T>(this IObservable<T> source, Action<T> onNext, Action<Exception> onError, IFeatureUsageTrackingManager featureUsageTrackingManager, string featureName)
    parameters:
    - id: source
      type: System.IObservable{{T}}
      description: Observable sequence to subscribe to.
    - id: onNext
      type: System.Action{{T}}
      description: Action to invoke for each element in the observable sequence.
    - id: onError
      type: System.Action{System.Exception}
      description: Action to invoke upon exceptional termination of the observable sequence.
    - id: featureUsageTrackingManager
      type: Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingManager
    - id: featureName
      type: System.String
    typeParameters:
    - id: T
      description: The type for the input observable.
    return:
      type: System.IDisposable
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SubscribeWithFeatureUsageTracking(Of T)(source As IObservable(Of T), onNext As Action(Of T), onError As Action(Of Exception), featureUsageTrackingManager As IFeatureUsageTrackingManager, featureName As String) As IDisposable
  overload: Whipstaff.Rx.ObservableExtensions.SubscribeWithFeatureUsageTracking*
  nameWithType.vb: ObservableExtensions.SubscribeWithFeatureUsageTracking(Of T)(IObservable(Of T), Action(Of T), Action(Of Exception), IFeatureUsageTrackingManager, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Whipstaff.Rx.ObservableExtensions.SubscribeWithFeatureUsageTracking(Of T)(System.IObservable(Of T), System.Action(Of T), System.Action(Of System.Exception), Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingManager, System.String)
  name.vb: SubscribeWithFeatureUsageTracking(Of T)(IObservable(Of T), Action(Of T), Action(Of Exception), IFeatureUsageTrackingManager, String)
- uid: Whipstaff.Rx.ObservableExtensions.SubscribeWithFeatureUsageTracking``1(System.IObservable{``0},System.Action{``0},System.Action,Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingManager,System.String)
  commentId: M:Whipstaff.Rx.ObservableExtensions.SubscribeWithFeatureUsageTracking``1(System.IObservable{``0},System.Action{``0},System.Action,Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingManager,System.String)
  id: SubscribeWithFeatureUsageTracking``1(System.IObservable{``0},System.Action{``0},System.Action,Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingManager,System.String)
  isExtensionMethod: true
  parent: Whipstaff.Rx.ObservableExtensions
  langs:
  - csharp
  - vb
  name: SubscribeWithFeatureUsageTracking<T>(IObservable<T>, Action<T>, Action, IFeatureUsageTrackingManager, String)
  nameWithType: ObservableExtensions.SubscribeWithFeatureUsageTracking<T>(IObservable<T>, Action<T>, Action, IFeatureUsageTrackingManager, String)
  fullName: Whipstaff.Rx.ObservableExtensions.SubscribeWithFeatureUsageTracking<T>(System.IObservable<T>, System.Action<T>, System.Action, Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingManager, System.String)
  type: Method
  source:
    path: Whipstaff.Rx
    isExternal: true
  assemblies:
  - Whipstaff.Rx
  namespace: Whipstaff.Rx
  summary: "\nWraps an observable subscription with a Feature Usage Tracking Session.\n"
  syntax:
    content: public static IDisposable SubscribeWithFeatureUsageTracking<T>(this IObservable<T> source, Action<T> onNext, Action onCompleted, IFeatureUsageTrackingManager featureUsageTrackingManager, string featureName)
    parameters:
    - id: source
      type: System.IObservable{{T}}
      description: Observable sequence to subscribe to.
    - id: onNext
      type: System.Action{{T}}
      description: Action to invoke for each element in the observable sequence.
    - id: onCompleted
      type: System.Action
      description: Action to invoke upon graceful termination of the observable sequence.
    - id: featureUsageTrackingManager
      type: Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingManager
      description: The Feature Usage Tracking Manager for starting the session under.
    - id: featureName
      type: System.String
      description: Name of the feature to track.
    typeParameters:
    - id: T
      description: The type for the input observable.
    return:
      type: System.IDisposable
      description: System.IDisposable object used to unsubscribe from the observable sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SubscribeWithFeatureUsageTracking(Of T)(source As IObservable(Of T), onNext As Action(Of T), onCompleted As Action, featureUsageTrackingManager As IFeatureUsageTrackingManager, featureName As String) As IDisposable
  overload: Whipstaff.Rx.ObservableExtensions.SubscribeWithFeatureUsageTracking*
  nameWithType.vb: ObservableExtensions.SubscribeWithFeatureUsageTracking(Of T)(IObservable(Of T), Action(Of T), Action, IFeatureUsageTrackingManager, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Whipstaff.Rx.ObservableExtensions.SubscribeWithFeatureUsageTracking(Of T)(System.IObservable(Of T), System.Action(Of T), System.Action, Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingManager, System.String)
  name.vb: SubscribeWithFeatureUsageTracking(Of T)(IObservable(Of T), Action(Of T), Action, IFeatureUsageTrackingManager, String)
- uid: Whipstaff.Rx.ObservableExtensions.SubscribeWithFeatureUsageTracking``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},System.Action,Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingManager,System.String)
  commentId: M:Whipstaff.Rx.ObservableExtensions.SubscribeWithFeatureUsageTracking``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},System.Action,Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingManager,System.String)
  id: SubscribeWithFeatureUsageTracking``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},System.Action,Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingManager,System.String)
  isExtensionMethod: true
  parent: Whipstaff.Rx.ObservableExtensions
  langs:
  - csharp
  - vb
  name: SubscribeWithFeatureUsageTracking<T>(IObservable<T>, Action<T>, Action<Exception>, Action, IFeatureUsageTrackingManager, String)
  nameWithType: ObservableExtensions.SubscribeWithFeatureUsageTracking<T>(IObservable<T>, Action<T>, Action<Exception>, Action, IFeatureUsageTrackingManager, String)
  fullName: Whipstaff.Rx.ObservableExtensions.SubscribeWithFeatureUsageTracking<T>(System.IObservable<T>, System.Action<T>, System.Action<System.Exception>, System.Action, Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingManager, System.String)
  type: Method
  source:
    path: Whipstaff.Rx
    isExternal: true
  assemblies:
  - Whipstaff.Rx
  namespace: Whipstaff.Rx
  summary: "\nWraps an observable subscription with a Feature Usage Tracking Session.\n"
  syntax:
    content: public static IDisposable SubscribeWithFeatureUsageTracking<T>(this IObservable<T> source, Action<T> onNext, Action<Exception> onError, Action onCompleted, IFeatureUsageTrackingManager featureUsageTrackingManager, string featureName)
    parameters:
    - id: source
      type: System.IObservable{{T}}
      description: Observable sequence to subscribe to.
    - id: onNext
      type: System.Action{{T}}
      description: Action to invoke for each element in the observable sequence.
    - id: onError
      type: System.Action{System.Exception}
      description: Action to invoke upon exceptional termination of the observable sequence.
    - id: onCompleted
      type: System.Action
      description: Action to invoke upon graceful termination of the observable sequence.
    - id: featureUsageTrackingManager
      type: Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingManager
      description: The Feature Usage Tracking Manager for starting the session under.
    - id: featureName
      type: System.String
      description: Name of the feature to track.
    typeParameters:
    - id: T
      description: The type for the input observable.
    return:
      type: System.IDisposable
      description: System.IDisposable object used to unsubscribe from the observable sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SubscribeWithFeatureUsageTracking(Of T)(source As IObservable(Of T), onNext As Action(Of T), onError As Action(Of Exception), onCompleted As Action, featureUsageTrackingManager As IFeatureUsageTrackingManager, featureName As String) As IDisposable
  overload: Whipstaff.Rx.ObservableExtensions.SubscribeWithFeatureUsageTracking*
  nameWithType.vb: ObservableExtensions.SubscribeWithFeatureUsageTracking(Of T)(IObservable(Of T), Action(Of T), Action(Of Exception), Action, IFeatureUsageTrackingManager, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Whipstaff.Rx.ObservableExtensions.SubscribeWithFeatureUsageTracking(Of T)(System.IObservable(Of T), System.Action(Of T), System.Action(Of System.Exception), System.Action, Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingManager, System.String)
  name.vb: SubscribeWithFeatureUsageTracking(Of T)(IObservable(Of T), Action(Of T), Action(Of Exception), Action, IFeatureUsageTrackingManager, String)
- uid: Whipstaff.Rx.ObservableExtensions.SubscribeWithFeatureUsageTracking``1(System.IObservable{``0},System.IObserver{``0},Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingManager,System.String)
  commentId: M:Whipstaff.Rx.ObservableExtensions.SubscribeWithFeatureUsageTracking``1(System.IObservable{``0},System.IObserver{``0},Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingManager,System.String)
  id: SubscribeWithFeatureUsageTracking``1(System.IObservable{``0},System.IObserver{``0},Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingManager,System.String)
  isExtensionMethod: true
  parent: Whipstaff.Rx.ObservableExtensions
  langs:
  - csharp
  - vb
  name: SubscribeWithFeatureUsageTracking<T>(IObservable<T>, IObserver<T>, IFeatureUsageTrackingManager, String)
  nameWithType: ObservableExtensions.SubscribeWithFeatureUsageTracking<T>(IObservable<T>, IObserver<T>, IFeatureUsageTrackingManager, String)
  fullName: Whipstaff.Rx.ObservableExtensions.SubscribeWithFeatureUsageTracking<T>(System.IObservable<T>, System.IObserver<T>, Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingManager, System.String)
  type: Method
  source:
    path: Whipstaff.Rx
    isExternal: true
  assemblies:
  - Whipstaff.Rx
  namespace: Whipstaff.Rx
  summary: "\nWraps an observable subscription with a Feature Usage Tracking Session.\n"
  syntax:
    content: public static IDisposable SubscribeWithFeatureUsageTracking<T>(this IObservable<T> source, IObserver<T> observer, IFeatureUsageTrackingManager featureUsageTrackingManager, string featureName)
    parameters:
    - id: source
      type: System.IObservable{{T}}
      description: Observable sequence to subscribe to.
    - id: observer
      type: System.IObserver{{T}}
      description: The observer that will receive the subscription notification.
    - id: featureUsageTrackingManager
      type: Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingManager
      description: The Feature Usage Tracking Manager for starting the session under.
    - id: featureName
      type: System.String
      description: Name of the feature to track.
    typeParameters:
    - id: T
      description: The type for the input observable.
    return:
      type: System.IDisposable
      description: System.IDisposable object used to unsubscribe from the observable sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SubscribeWithFeatureUsageTracking(Of T)(source As IObservable(Of T), observer As IObserver(Of T), featureUsageTrackingManager As IFeatureUsageTrackingManager, featureName As String) As IDisposable
  overload: Whipstaff.Rx.ObservableExtensions.SubscribeWithFeatureUsageTracking*
  nameWithType.vb: ObservableExtensions.SubscribeWithFeatureUsageTracking(Of T)(IObservable(Of T), IObserver(Of T), IFeatureUsageTrackingManager, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Whipstaff.Rx.ObservableExtensions.SubscribeWithFeatureUsageTracking(Of T)(System.IObservable(Of T), System.IObserver(Of T), Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingManager, System.String)
  name.vb: SubscribeWithFeatureUsageTracking(Of T)(IObservable(Of T), IObserver(Of T), IFeatureUsageTrackingManager, String)
- uid: Whipstaff.Rx.ObservableExtensions.SubscribeWithSubFeatureUsageTracking``1(System.IObservable{``0},System.Action{``0},Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingSession,System.String)
  commentId: M:Whipstaff.Rx.ObservableExtensions.SubscribeWithSubFeatureUsageTracking``1(System.IObservable{``0},System.Action{``0},Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingSession,System.String)
  id: SubscribeWithSubFeatureUsageTracking``1(System.IObservable{``0},System.Action{``0},Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingSession,System.String)
  isExtensionMethod: true
  parent: Whipstaff.Rx.ObservableExtensions
  langs:
  - csharp
  - vb
  name: SubscribeWithSubFeatureUsageTracking<T>(IObservable<T>, Action<T>, IFeatureUsageTrackingSession, String)
  nameWithType: ObservableExtensions.SubscribeWithSubFeatureUsageTracking<T>(IObservable<T>, Action<T>, IFeatureUsageTrackingSession, String)
  fullName: Whipstaff.Rx.ObservableExtensions.SubscribeWithSubFeatureUsageTracking<T>(System.IObservable<T>, System.Action<T>, Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingSession, System.String)
  type: Method
  source:
    path: Whipstaff.Rx
    isExternal: true
  assemblies:
  - Whipstaff.Rx
  namespace: Whipstaff.Rx
  summary: "\nWraps an observable subscription with a SubFeature Usage Tracking Session.\n"
  syntax:
    content: public static IDisposable SubscribeWithSubFeatureUsageTracking<T>(this IObservable<T> source, Action<T> onNext, IFeatureUsageTrackingSession featureUsageTrackingSession, string featureName)
    parameters:
    - id: source
      type: System.IObservable{{T}}
      description: Observable sequence to subscribe to.
    - id: onNext
      type: System.Action{{T}}
      description: Action to invoke for each element in the observable sequence.
    - id: featureUsageTrackingSession
      type: Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingSession
      description: The Feature Usage Tracking Session to track the Sub Feature under.
    - id: featureName
      type: System.String
      description: Name of the feature to track.
    typeParameters:
    - id: T
      description: The type for the input observable.
    return:
      type: System.IDisposable
      description: System.IDisposable object used to unsubscribe from the observable sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SubscribeWithSubFeatureUsageTracking(Of T)(source As IObservable(Of T), onNext As Action(Of T), featureUsageTrackingSession As IFeatureUsageTrackingSession, featureName As String) As IDisposable
  overload: Whipstaff.Rx.ObservableExtensions.SubscribeWithSubFeatureUsageTracking*
  nameWithType.vb: ObservableExtensions.SubscribeWithSubFeatureUsageTracking(Of T)(IObservable(Of T), Action(Of T), IFeatureUsageTrackingSession, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Whipstaff.Rx.ObservableExtensions.SubscribeWithSubFeatureUsageTracking(Of T)(System.IObservable(Of T), System.Action(Of T), Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingSession, System.String)
  name.vb: SubscribeWithSubFeatureUsageTracking(Of T)(IObservable(Of T), Action(Of T), IFeatureUsageTrackingSession, String)
- uid: Whipstaff.Rx.ObservableExtensions.SubscribeWithSubFeatureUsageTracking``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingSession,System.String)
  commentId: M:Whipstaff.Rx.ObservableExtensions.SubscribeWithSubFeatureUsageTracking``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingSession,System.String)
  id: SubscribeWithSubFeatureUsageTracking``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingSession,System.String)
  isExtensionMethod: true
  parent: Whipstaff.Rx.ObservableExtensions
  langs:
  - csharp
  - vb
  name: SubscribeWithSubFeatureUsageTracking<T>(IObservable<T>, Action<T>, Action<Exception>, IFeatureUsageTrackingSession, String)
  nameWithType: ObservableExtensions.SubscribeWithSubFeatureUsageTracking<T>(IObservable<T>, Action<T>, Action<Exception>, IFeatureUsageTrackingSession, String)
  fullName: Whipstaff.Rx.ObservableExtensions.SubscribeWithSubFeatureUsageTracking<T>(System.IObservable<T>, System.Action<T>, System.Action<System.Exception>, Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingSession, System.String)
  type: Method
  source:
    path: Whipstaff.Rx
    isExternal: true
  assemblies:
  - Whipstaff.Rx
  namespace: Whipstaff.Rx
  summary: "\nWraps an observable subscription with a SubFeature Usage Tracking Session.\n"
  syntax:
    content: public static IDisposable SubscribeWithSubFeatureUsageTracking<T>(this IObservable<T> source, Action<T> onNext, Action<Exception> onError, IFeatureUsageTrackingSession featureUsageTrackingSession, string featureName)
    parameters:
    - id: source
      type: System.IObservable{{T}}
      description: Observable sequence to subscribe to.
    - id: onNext
      type: System.Action{{T}}
      description: Action to invoke for each element in the observable sequence.
    - id: onError
      type: System.Action{System.Exception}
      description: Action to invoke upon exceptional termination of the observable sequence.
    - id: featureUsageTrackingSession
      type: Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingSession
      description: The Feature Usage Tracking Session to track the Sub Feature under.
    - id: featureName
      type: System.String
      description: Name of the feature to track.
    typeParameters:
    - id: T
      description: The type for the input observable.
    return:
      type: System.IDisposable
      description: System.IDisposable object used to unsubscribe from the observable sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SubscribeWithSubFeatureUsageTracking(Of T)(source As IObservable(Of T), onNext As Action(Of T), onError As Action(Of Exception), featureUsageTrackingSession As IFeatureUsageTrackingSession, featureName As String) As IDisposable
  overload: Whipstaff.Rx.ObservableExtensions.SubscribeWithSubFeatureUsageTracking*
  nameWithType.vb: ObservableExtensions.SubscribeWithSubFeatureUsageTracking(Of T)(IObservable(Of T), Action(Of T), Action(Of Exception), IFeatureUsageTrackingSession, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Whipstaff.Rx.ObservableExtensions.SubscribeWithSubFeatureUsageTracking(Of T)(System.IObservable(Of T), System.Action(Of T), System.Action(Of System.Exception), Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingSession, System.String)
  name.vb: SubscribeWithSubFeatureUsageTracking(Of T)(IObservable(Of T), Action(Of T), Action(Of Exception), IFeatureUsageTrackingSession, String)
- uid: Whipstaff.Rx.ObservableExtensions.SubscribeWithSubFeatureUsageTracking``1(System.IObservable{``0},System.Action{``0},System.Action,Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingSession,System.String)
  commentId: M:Whipstaff.Rx.ObservableExtensions.SubscribeWithSubFeatureUsageTracking``1(System.IObservable{``0},System.Action{``0},System.Action,Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingSession,System.String)
  id: SubscribeWithSubFeatureUsageTracking``1(System.IObservable{``0},System.Action{``0},System.Action,Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingSession,System.String)
  isExtensionMethod: true
  parent: Whipstaff.Rx.ObservableExtensions
  langs:
  - csharp
  - vb
  name: SubscribeWithSubFeatureUsageTracking<T>(IObservable<T>, Action<T>, Action, IFeatureUsageTrackingSession, String)
  nameWithType: ObservableExtensions.SubscribeWithSubFeatureUsageTracking<T>(IObservable<T>, Action<T>, Action, IFeatureUsageTrackingSession, String)
  fullName: Whipstaff.Rx.ObservableExtensions.SubscribeWithSubFeatureUsageTracking<T>(System.IObservable<T>, System.Action<T>, System.Action, Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingSession, System.String)
  type: Method
  source:
    path: Whipstaff.Rx
    isExternal: true
  assemblies:
  - Whipstaff.Rx
  namespace: Whipstaff.Rx
  summary: "\nWraps an observable subscription with a SubFeature Usage Tracking Session.\n"
  syntax:
    content: public static IDisposable SubscribeWithSubFeatureUsageTracking<T>(this IObservable<T> source, Action<T> onNext, Action onCompleted, IFeatureUsageTrackingSession featureUsageTrackingSession, string featureName)
    parameters:
    - id: source
      type: System.IObservable{{T}}
      description: Observable sequence to subscribe to.
    - id: onNext
      type: System.Action{{T}}
      description: Action to invoke for each element in the observable sequence.
    - id: onCompleted
      type: System.Action
      description: Action to invoke upon graceful termination of the observable sequence.
    - id: featureUsageTrackingSession
      type: Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingSession
      description: The Feature Usage Tracking Session to track the Sub Feature under.
    - id: featureName
      type: System.String
      description: Name of the feature to track.
    typeParameters:
    - id: T
      description: The type for the input observable.
    return:
      type: System.IDisposable
      description: System.IDisposable object used to unsubscribe from the observable sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SubscribeWithSubFeatureUsageTracking(Of T)(source As IObservable(Of T), onNext As Action(Of T), onCompleted As Action, featureUsageTrackingSession As IFeatureUsageTrackingSession, featureName As String) As IDisposable
  overload: Whipstaff.Rx.ObservableExtensions.SubscribeWithSubFeatureUsageTracking*
  nameWithType.vb: ObservableExtensions.SubscribeWithSubFeatureUsageTracking(Of T)(IObservable(Of T), Action(Of T), Action, IFeatureUsageTrackingSession, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Whipstaff.Rx.ObservableExtensions.SubscribeWithSubFeatureUsageTracking(Of T)(System.IObservable(Of T), System.Action(Of T), System.Action, Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingSession, System.String)
  name.vb: SubscribeWithSubFeatureUsageTracking(Of T)(IObservable(Of T), Action(Of T), Action, IFeatureUsageTrackingSession, String)
- uid: Whipstaff.Rx.ObservableExtensions.SubscribeWithSubFeatureUsageTracking``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},System.Action,Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingSession,System.String)
  commentId: M:Whipstaff.Rx.ObservableExtensions.SubscribeWithSubFeatureUsageTracking``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},System.Action,Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingSession,System.String)
  id: SubscribeWithSubFeatureUsageTracking``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},System.Action,Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingSession,System.String)
  isExtensionMethod: true
  parent: Whipstaff.Rx.ObservableExtensions
  langs:
  - csharp
  - vb
  name: SubscribeWithSubFeatureUsageTracking<T>(IObservable<T>, Action<T>, Action<Exception>, Action, IFeatureUsageTrackingSession, String)
  nameWithType: ObservableExtensions.SubscribeWithSubFeatureUsageTracking<T>(IObservable<T>, Action<T>, Action<Exception>, Action, IFeatureUsageTrackingSession, String)
  fullName: Whipstaff.Rx.ObservableExtensions.SubscribeWithSubFeatureUsageTracking<T>(System.IObservable<T>, System.Action<T>, System.Action<System.Exception>, System.Action, Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingSession, System.String)
  type: Method
  source:
    path: Whipstaff.Rx
    isExternal: true
  assemblies:
  - Whipstaff.Rx
  namespace: Whipstaff.Rx
  summary: "\nWraps an observable subscription with a SubFeature Usage Tracking Session.\n"
  syntax:
    content: public static IDisposable SubscribeWithSubFeatureUsageTracking<T>(this IObservable<T> source, Action<T> onNext, Action<Exception> onError, Action onCompleted, IFeatureUsageTrackingSession featureUsageTrackingSession, string featureName)
    parameters:
    - id: source
      type: System.IObservable{{T}}
      description: Observable sequence to subscribe to.
    - id: onNext
      type: System.Action{{T}}
      description: Action to invoke for each element in the observable sequence.
    - id: onError
      type: System.Action{System.Exception}
      description: Action to invoke upon exceptional termination of the observable sequence.
    - id: onCompleted
      type: System.Action
      description: Action to invoke upon graceful termination of the observable sequence.
    - id: featureUsageTrackingSession
      type: Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingSession
      description: The Feature Usage Tracking Session to track the Sub Feature under.
    - id: featureName
      type: System.String
      description: Name of the feature to track.
    typeParameters:
    - id: T
      description: The type for the input observable.
    return:
      type: System.IDisposable
      description: System.IDisposable object used to unsubscribe from the observable sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SubscribeWithSubFeatureUsageTracking(Of T)(source As IObservable(Of T), onNext As Action(Of T), onError As Action(Of Exception), onCompleted As Action, featureUsageTrackingSession As IFeatureUsageTrackingSession, featureName As String) As IDisposable
  overload: Whipstaff.Rx.ObservableExtensions.SubscribeWithSubFeatureUsageTracking*
  nameWithType.vb: ObservableExtensions.SubscribeWithSubFeatureUsageTracking(Of T)(IObservable(Of T), Action(Of T), Action(Of Exception), Action, IFeatureUsageTrackingSession, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Whipstaff.Rx.ObservableExtensions.SubscribeWithSubFeatureUsageTracking(Of T)(System.IObservable(Of T), System.Action(Of T), System.Action(Of System.Exception), System.Action, Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingSession, System.String)
  name.vb: SubscribeWithSubFeatureUsageTracking(Of T)(IObservable(Of T), Action(Of T), Action(Of Exception), Action, IFeatureUsageTrackingSession, String)
- uid: Whipstaff.Rx.ObservableExtensions.SubscribeWithSubFeatureUsageTracking``1(System.IObservable{``0},System.IObserver{``0},Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingSession,System.String)
  commentId: M:Whipstaff.Rx.ObservableExtensions.SubscribeWithSubFeatureUsageTracking``1(System.IObservable{``0},System.IObserver{``0},Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingSession,System.String)
  id: SubscribeWithSubFeatureUsageTracking``1(System.IObservable{``0},System.IObserver{``0},Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingSession,System.String)
  isExtensionMethod: true
  parent: Whipstaff.Rx.ObservableExtensions
  langs:
  - csharp
  - vb
  name: SubscribeWithSubFeatureUsageTracking<T>(IObservable<T>, IObserver<T>, IFeatureUsageTrackingSession, String)
  nameWithType: ObservableExtensions.SubscribeWithSubFeatureUsageTracking<T>(IObservable<T>, IObserver<T>, IFeatureUsageTrackingSession, String)
  fullName: Whipstaff.Rx.ObservableExtensions.SubscribeWithSubFeatureUsageTracking<T>(System.IObservable<T>, System.IObserver<T>, Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingSession, System.String)
  type: Method
  source:
    path: Whipstaff.Rx
    isExternal: true
  assemblies:
  - Whipstaff.Rx
  namespace: Whipstaff.Rx
  summary: "\nWraps an observable subscription with a SubFeature Usage Tracking Session.\n"
  syntax:
    content: public static IDisposable SubscribeWithSubFeatureUsageTracking<T>(this IObservable<T> source, IObserver<T> observer, IFeatureUsageTrackingSession featureUsageTrackingSession, string featureName)
    parameters:
    - id: source
      type: System.IObservable{{T}}
      description: Observable sequence to subscribe to.
    - id: observer
      type: System.IObserver{{T}}
      description: The observer that will receive the subscription notification.
    - id: featureUsageTrackingSession
      type: Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingSession
      description: The Feature Usage Tracking Session to track the Sub Feature under.
    - id: featureName
      type: System.String
      description: Name of the feature to track.
    typeParameters:
    - id: T
      description: The type for the input observable.
    return:
      type: System.IDisposable
      description: System.IDisposable object used to unsubscribe from the observable sequence.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SubscribeWithSubFeatureUsageTracking(Of T)(source As IObservable(Of T), observer As IObserver(Of T), featureUsageTrackingSession As IFeatureUsageTrackingSession, featureName As String) As IDisposable
  overload: Whipstaff.Rx.ObservableExtensions.SubscribeWithSubFeatureUsageTracking*
  nameWithType.vb: ObservableExtensions.SubscribeWithSubFeatureUsageTracking(Of T)(IObservable(Of T), IObserver(Of T), IFeatureUsageTrackingSession, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Whipstaff.Rx.ObservableExtensions.SubscribeWithSubFeatureUsageTracking(Of T)(System.IObservable(Of T), System.IObserver(Of T), Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingSession, System.String)
  name.vb: SubscribeWithSubFeatureUsageTracking(Of T)(IObservable(Of T), IObserver(Of T), IFeatureUsageTrackingSession, String)
references:
- uid: Whipstaff.Rx
  commentId: N:Whipstaff.Rx
  isExternal: true
  name: Whipstaff.Rx
  nameWithType: Whipstaff.Rx
  fullName: Whipstaff.Rx
- uid: Whipstaff.Rx.ObservableExtensions.ScanNumberThatAreTrue*
  commentId: Overload:Whipstaff.Rx.ObservableExtensions.ScanNumberThatAreTrue
  isExternal: true
  name: ScanNumberThatAreTrue
  nameWithType: ObservableExtensions.ScanNumberThatAreTrue
  fullName: Whipstaff.Rx.ObservableExtensions.ScanNumberThatAreTrue
- uid: System.IObservable{System.Boolean}
  commentId: '!:System.IObservable{System.Boolean}'
  definition: System.IObservable`1
  name: IObservable<Boolean>
  nameWithType: IObservable<Boolean>
  fullName: System.IObservable<System.Boolean>
  nameWithType.vb: IObservable(Of Boolean)
  fullName.vb: System.IObservable(Of System.Boolean)
  name.vb: IObservable(Of Boolean)
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IObservable{System.Int32}
  commentId: '!:System.IObservable{System.Int32}'
  definition: System.IObservable`1
  name: IObservable<Int32>
  nameWithType: IObservable<Int32>
  fullName: System.IObservable<System.Int32>
  nameWithType.vb: IObservable(Of Int32)
  fullName.vb: System.IObservable(Of System.Int32)
  name.vb: IObservable(Of Int32)
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IObservable`1
  isExternal: true
  name: IObservable<>
  nameWithType: IObservable<>
  fullName: System.IObservable<>
  nameWithType.vb: IObservable(Of )
  fullName.vb: System.IObservable(Of )
  name.vb: IObservable(Of )
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Whipstaff.Rx.ObservableExtensions.ObserveCurrentAndPrevious*
  commentId: Overload:Whipstaff.Rx.ObservableExtensions.ObserveCurrentAndPrevious
  isExternal: true
  name: ObserveCurrentAndPrevious
  nameWithType: ObservableExtensions.ObserveCurrentAndPrevious
  fullName: Whipstaff.Rx.ObservableExtensions.ObserveCurrentAndPrevious
- uid: System.IObservable{{TSource}}
  commentId: '!:System.IObservable{``0}'
  definition: System.IObservable`1
  name: IObservable<TSource>
  nameWithType: IObservable<TSource>
  fullName: System.IObservable<TSource>
  nameWithType.vb: IObservable(Of TSource)
  fullName.vb: System.IObservable(Of TSource)
  name.vb: IObservable(Of TSource)
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IObservable{System.ValueTuple{{TSource},{TSource}}}
  commentId: '!:System.IObservable{System.ValueTuple{``0,``0}}'
  definition: System.IObservable`1
  name: IObservable<ValueTuple<TSource, TSource>>
  nameWithType: IObservable<ValueTuple<TSource, TSource>>
  fullName: System.IObservable<System.ValueTuple<TSource, TSource>>
  nameWithType.vb: IObservable(Of ValueTuple(Of TSource, TSource))
  fullName.vb: System.IObservable(Of System.ValueTuple(Of TSource, TSource))
  name.vb: IObservable(Of ValueTuple(Of TSource, TSource))
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TSource},{TSource},{TResult}}
  commentId: '!:System.Func{``0,``0,``1}'
  definition: System.Func`3
  name: Func<TSource, TSource, TResult>
  nameWithType: Func<TSource, TSource, TResult>
  fullName: System.Func<TSource, TSource, TResult>
  nameWithType.vb: Func(Of TSource, TSource, TResult)
  fullName.vb: System.Func(Of TSource, TSource, TResult)
  name.vb: Func(Of TSource, TSource, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IObservable{{TResult}}
  commentId: '!:System.IObservable{``1}'
  definition: System.IObservable`1
  name: IObservable<TResult>
  nameWithType: IObservable<TResult>
  fullName: System.IObservable<TResult>
  nameWithType.vb: IObservable(Of TResult)
  fullName.vb: System.IObservable(Of TResult)
  name.vb: IObservable(Of TResult)
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  isExternal: true
  name: Func<, , >
  nameWithType: Func<, , >
  fullName: System.Func<, , >
  nameWithType.vb: Func(Of , , )
  fullName.vb: System.Func(Of , , )
  name.vb: Func(Of , , )
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Whipstaff.Rx.ObservableExtensions.SubscribeWithFeatureUsageTracking*
  commentId: Overload:Whipstaff.Rx.ObservableExtensions.SubscribeWithFeatureUsageTracking
  isExternal: true
  name: SubscribeWithFeatureUsageTracking
  nameWithType: ObservableExtensions.SubscribeWithFeatureUsageTracking
  fullName: Whipstaff.Rx.ObservableExtensions.SubscribeWithFeatureUsageTracking
- uid: System.IObservable{{T}}
  commentId: '!:System.IObservable{``0}'
  definition: System.IObservable`1
  name: IObservable<T>
  nameWithType: IObservable<T>
  fullName: System.IObservable<T>
  nameWithType.vb: IObservable(Of T)
  fullName.vb: System.IObservable(Of T)
  name.vb: IObservable(Of T)
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{{T}}
  commentId: '!:System.Action{``0}'
  definition: System.Action`1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingManager
  isExternal: true
  name: IFeatureUsageTrackingManager
  nameWithType: IFeatureUsageTrackingManager
  fullName: Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingManager
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IDisposable
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Action`1
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: System.Action<>
  nameWithType.vb: Action(Of )
  fullName.vb: System.Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Action{System.Exception}
  commentId: '!:System.Action{System.Exception}'
  definition: System.Action`1
  name: Action<Exception>
  nameWithType: Action<Exception>
  fullName: System.Action<System.Exception>
  nameWithType.vb: Action(Of Exception)
  fullName.vb: System.Action(Of System.Exception)
  name.vb: Action(Of Exception)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: System.IObserver{{T}}
  commentId: '!:System.IObserver{``0}'
  definition: System.IObserver`1
  name: IObserver<T>
  nameWithType: IObserver<T>
  fullName: System.IObserver<T>
  nameWithType.vb: IObserver(Of T)
  fullName.vb: System.IObserver(Of T)
  name.vb: IObserver(Of T)
  spec.csharp:
  - uid: System.IObserver`1
    name: IObserver
    nameWithType: IObserver
    fullName: System.IObserver
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IObserver`1
    name: IObserver
    nameWithType: IObserver
    fullName: System.IObserver
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IObserver`1
  isExternal: true
  name: IObserver<>
  nameWithType: IObserver<>
  fullName: System.IObserver<>
  nameWithType.vb: IObserver(Of )
  fullName.vb: System.IObserver(Of )
  name.vb: IObserver(Of )
  spec.csharp:
  - uid: System.IObserver`1
    name: IObserver
    nameWithType: IObserver
    fullName: System.IObserver
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IObserver`1
    name: IObserver
    nameWithType: IObserver
    fullName: System.IObserver
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Whipstaff.Rx.ObservableExtensions.SubscribeWithSubFeatureUsageTracking*
  commentId: Overload:Whipstaff.Rx.ObservableExtensions.SubscribeWithSubFeatureUsageTracking
  isExternal: true
  name: SubscribeWithSubFeatureUsageTracking
  nameWithType: ObservableExtensions.SubscribeWithSubFeatureUsageTracking
  fullName: Whipstaff.Rx.ObservableExtensions.SubscribeWithSubFeatureUsageTracking
- uid: Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingSession
  isExternal: true
  name: IFeatureUsageTrackingSession
  nameWithType: IFeatureUsageTrackingSession
  fullName: Splat.ApplicationPerformanceMonitoring.IFeatureUsageTrackingSession
