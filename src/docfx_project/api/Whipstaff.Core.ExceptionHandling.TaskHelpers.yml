### YamlMime:ManagedReference
items:
- uid: Whipstaff.Core.ExceptionHandling.TaskHelpers
  commentId: T:Whipstaff.Core.ExceptionHandling.TaskHelpers
  id: TaskHelpers
  parent: Whipstaff.Core.ExceptionHandling
  children:
  - Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``1(System.Func{System.Threading.Tasks.Task{``0}},``0,Microsoft.Extensions.Logging.ILogger)
  - Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Threading.Tasks.Task{``9}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,Microsoft.Extensions.Logging.ILogger)
  - Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Threading.Tasks.Task{``10}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,Microsoft.Extensions.Logging.ILogger)
  - Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Threading.Tasks.Task{``11}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,Microsoft.Extensions.Logging.ILogger)
  - Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Threading.Tasks.Task{``12}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,Microsoft.Extensions.Logging.ILogger)
  - Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Threading.Tasks.Task{``13}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,Microsoft.Extensions.Logging.ILogger)
  - Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Threading.Tasks.Task{``14}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,Microsoft.Extensions.Logging.ILogger)
  - Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Threading.Tasks.Task{``15}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,Microsoft.Extensions.Logging.ILogger)
  - Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Threading.Tasks.Task{``16}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,Microsoft.Extensions.Logging.ILogger)
  - Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``2(System.Func{``0,System.Threading.Tasks.Task{``1}},``0,``1,Microsoft.Extensions.Logging.ILogger)
  - Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``3(System.Func{``0,``1,System.Threading.Tasks.Task{``2}},``0,``1,``2,Microsoft.Extensions.Logging.ILogger)
  - Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``4(System.Func{``0,``1,``2,System.Threading.Tasks.Task{``3}},``0,``1,``2,``3,Microsoft.Extensions.Logging.ILogger)
  - Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``5(System.Func{``0,``1,``2,``3,System.Threading.Tasks.Task{``4}},``0,``1,``2,``3,``4,Microsoft.Extensions.Logging.ILogger)
  - Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``6(System.Func{``0,``1,``2,``3,``4,System.Threading.Tasks.Task{``5}},``0,``1,``2,``3,``4,``5,Microsoft.Extensions.Logging.ILogger)
  - Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``7(System.Func{``0,``1,``2,``3,``4,``5,System.Threading.Tasks.Task{``6}},``0,``1,``2,``3,``4,``5,``6,Microsoft.Extensions.Logging.ILogger)
  - Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``8(System.Func{``0,``1,``2,``3,``4,``5,``6,System.Threading.Tasks.Task{``7}},``0,``1,``2,``3,``4,``5,``6,``7,Microsoft.Extensions.Logging.ILogger)
  - Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Threading.Tasks.Task{``8}},``0,``1,``2,``3,``4,``5,``6,``7,``8,Microsoft.Extensions.Logging.ILogger)
  langs:
  - csharp
  - vb
  name: TaskHelpers
  nameWithType: TaskHelpers
  fullName: Whipstaff.Core.ExceptionHandling.TaskHelpers
  type: Class
  source:
    path: Whipstaff.Core
    isExternal: true
  assemblies:
  - Whipstaff.Core
  namespace: Whipstaff.Core.ExceptionHandling
  summary: "\nHelpers for managing task execution flows.\n"
  syntax:
    content: 'public static class TaskHelpers : Object'
    content.vb: >-
      Public Module TaskHelpers
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``1(System.Func{System.Threading.Tasks.Task{``0}},``0,Microsoft.Extensions.Logging.ILogger)
  commentId: M:Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``1(System.Func{System.Threading.Tasks.Task{``0}},``0,Microsoft.Extensions.Logging.ILogger)
  id: DefaultIfExceptionAsync``1(System.Func{System.Threading.Tasks.Task{``0}},``0,Microsoft.Extensions.Logging.ILogger)
  isExtensionMethod: true
  parent: Whipstaff.Core.ExceptionHandling.TaskHelpers
  langs:
  - csharp
  - vb
  name: DefaultIfExceptionAsync<TResult>(Func<Task<TResult>>, TResult, ILogger)
  nameWithType: TaskHelpers.DefaultIfExceptionAsync<TResult>(Func<Task<TResult>>, TResult, ILogger)
  fullName: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync<TResult>(System.Func<System.Threading.Tasks.Task<TResult>>, TResult, Microsoft.Extensions.Logging.ILogger)
  type: Method
  source:
    path: Whipstaff.Core
    isExternal: true
  assemblies:
  - Whipstaff.Core
  namespace: Whipstaff.Core.ExceptionHandling
  summary: "\nEncapsulates a method that has no parameters, and in case of any exception it catches it and returns a default value.\n"
  syntax:
    content: public static Task<TResult> DefaultIfExceptionAsync<TResult>(this Func<Task<TResult>> func, TResult defaultResult, ILogger logger = null)
    parameters:
    - id: func
      type: System.Func{System.Threading.Tasks.Task{{TResult}}}
      description: The method to encapsulate.
    - id: defaultResult
      type: '{TResult}'
      description: The default value to return if an exception is thrown.
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger
      description: Logging framework instance.
    typeParameters:
    - id: TResult
      description: The type of the return value of the method that this delegate encapsulates.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The return value of the method that this delegate encapsulates.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DefaultIfExceptionAsync(Of TResult)(func As Func(Of Task(Of TResult)), defaultResult As TResult, logger As ILogger = Nothing) As Task(Of TResult)
  overload: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync*
  nameWithType.vb: TaskHelpers.DefaultIfExceptionAsync(Of TResult)(Func(Of Task(Of TResult)), TResult, ILogger)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync(Of TResult)(System.Func(Of System.Threading.Tasks.Task(Of TResult)), TResult, Microsoft.Extensions.Logging.ILogger)
  name.vb: DefaultIfExceptionAsync(Of TResult)(Func(Of Task(Of TResult)), TResult, ILogger)
- uid: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``2(System.Func{``0,System.Threading.Tasks.Task{``1}},``0,``1,Microsoft.Extensions.Logging.ILogger)
  commentId: M:Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``2(System.Func{``0,System.Threading.Tasks.Task{``1}},``0,``1,Microsoft.Extensions.Logging.ILogger)
  id: DefaultIfExceptionAsync``2(System.Func{``0,System.Threading.Tasks.Task{``1}},``0,``1,Microsoft.Extensions.Logging.ILogger)
  isExtensionMethod: true
  parent: Whipstaff.Core.ExceptionHandling.TaskHelpers
  langs:
  - csharp
  - vb
  name: DefaultIfExceptionAsync<T, TResult>(Func<T, Task<TResult>>, T, TResult, ILogger)
  nameWithType: TaskHelpers.DefaultIfExceptionAsync<T, TResult>(Func<T, Task<TResult>>, T, TResult, ILogger)
  fullName: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync<T, TResult>(System.Func<T, System.Threading.Tasks.Task<TResult>>, T, TResult, Microsoft.Extensions.Logging.ILogger)
  type: Method
  source:
    path: Whipstaff.Core
    isExternal: true
  assemblies:
  - Whipstaff.Core
  namespace: Whipstaff.Core.ExceptionHandling
  summary: "\nEncapsulates a method that has 1 parameters, and in case of any exception it catches it and returns a default value.\n"
  syntax:
    content: public static Task<TResult> DefaultIfExceptionAsync<T, TResult>(this Func<T, Task<TResult>> func, T arg, TResult defaultResult, ILogger logger = null)
    parameters:
    - id: func
      type: System.Func{{T},System.Threading.Tasks.Task{{TResult}}}
      description: The method to encapsulate.
    - id: arg
      type: '{T}'
      description: The parameter the encapsulated method takes.
    - id: defaultResult
      type: '{TResult}'
      description: The default value to return if an exception is thrown.
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger
      description: Logging framework instance.
    typeParameters:
    - id: T
      description: The type of the parameter the encapsulated method takes.
    - id: TResult
      description: The type of the return value of the method that this delegate encapsulates.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The return value of the method that this delegate encapsulates.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DefaultIfExceptionAsync(Of T, TResult)(func As Func(Of T, Task(Of TResult)), arg As T, defaultResult As TResult, logger As ILogger = Nothing) As Task(Of TResult)
  overload: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync*
  nameWithType.vb: TaskHelpers.DefaultIfExceptionAsync(Of T, TResult)(Func(Of T, Task(Of TResult)), T, TResult, ILogger)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync(Of T, TResult)(System.Func(Of T, System.Threading.Tasks.Task(Of TResult)), T, TResult, Microsoft.Extensions.Logging.ILogger)
  name.vb: DefaultIfExceptionAsync(Of T, TResult)(Func(Of T, Task(Of TResult)), T, TResult, ILogger)
- uid: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``3(System.Func{``0,``1,System.Threading.Tasks.Task{``2}},``0,``1,``2,Microsoft.Extensions.Logging.ILogger)
  commentId: M:Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``3(System.Func{``0,``1,System.Threading.Tasks.Task{``2}},``0,``1,``2,Microsoft.Extensions.Logging.ILogger)
  id: DefaultIfExceptionAsync``3(System.Func{``0,``1,System.Threading.Tasks.Task{``2}},``0,``1,``2,Microsoft.Extensions.Logging.ILogger)
  isExtensionMethod: true
  parent: Whipstaff.Core.ExceptionHandling.TaskHelpers
  langs:
  - csharp
  - vb
  name: DefaultIfExceptionAsync<T1, T2, TResult>(Func<T1, T2, Task<TResult>>, T1, T2, TResult, ILogger)
  nameWithType: TaskHelpers.DefaultIfExceptionAsync<T1, T2, TResult>(Func<T1, T2, Task<TResult>>, T1, T2, TResult, ILogger)
  fullName: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync<T1, T2, TResult>(System.Func<T1, T2, System.Threading.Tasks.Task<TResult>>, T1, T2, TResult, Microsoft.Extensions.Logging.ILogger)
  type: Method
  source:
    path: Whipstaff.Core
    isExternal: true
  assemblies:
  - Whipstaff.Core
  namespace: Whipstaff.Core.ExceptionHandling
  summary: "\nEncapsulates a method that has 2 parameters, and in case of any exception it catches it and returns a default value.\n"
  syntax:
    content: public static Task<TResult> DefaultIfExceptionAsync<T1, T2, TResult>(this Func<T1, T2, Task<TResult>> func, T1 arg1, T2 arg2, TResult defaultResult, ILogger logger = null)
    parameters:
    - id: func
      type: System.Func{{T1},{T2},System.Threading.Tasks.Task{{TResult}}}
      description: The method to encapsulate.
    - id: arg1
      type: '{T1}'
      description: The first parameter the encapsulated method takes.
    - id: arg2
      type: '{T2}'
      description: The second parameter the encapsulated method takes.
    - id: defaultResult
      type: '{TResult}'
      description: The default value to return if an exception is thrown.
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger
      description: Logging framework instance.
    typeParameters:
    - id: T1
      description: The type of the first parameter the encapsulated method takes.
    - id: T2
      description: The type of the second parameter the encapsulated method takes.
    - id: TResult
      description: The type of the return value of the method that this delegate encapsulates.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The return value of the method that this delegate encapsulates.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DefaultIfExceptionAsync(Of T1, T2, TResult)(func As Func(Of T1, T2, Task(Of TResult)), arg1 As T1, arg2 As T2, defaultResult As TResult, logger As ILogger = Nothing) As Task(Of TResult)
  overload: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync*
  nameWithType.vb: TaskHelpers.DefaultIfExceptionAsync(Of T1, T2, TResult)(Func(Of T1, T2, Task(Of TResult)), T1, T2, TResult, ILogger)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync(Of T1, T2, TResult)(System.Func(Of T1, T2, System.Threading.Tasks.Task(Of TResult)), T1, T2, TResult, Microsoft.Extensions.Logging.ILogger)
  name.vb: DefaultIfExceptionAsync(Of T1, T2, TResult)(Func(Of T1, T2, Task(Of TResult)), T1, T2, TResult, ILogger)
- uid: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``4(System.Func{``0,``1,``2,System.Threading.Tasks.Task{``3}},``0,``1,``2,``3,Microsoft.Extensions.Logging.ILogger)
  commentId: M:Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``4(System.Func{``0,``1,``2,System.Threading.Tasks.Task{``3}},``0,``1,``2,``3,Microsoft.Extensions.Logging.ILogger)
  id: DefaultIfExceptionAsync``4(System.Func{``0,``1,``2,System.Threading.Tasks.Task{``3}},``0,``1,``2,``3,Microsoft.Extensions.Logging.ILogger)
  isExtensionMethod: true
  parent: Whipstaff.Core.ExceptionHandling.TaskHelpers
  langs:
  - csharp
  - vb
  name: DefaultIfExceptionAsync<T1, T2, T3, TResult>(Func<T1, T2, T3, Task<TResult>>, T1, T2, T3, TResult, ILogger)
  nameWithType: TaskHelpers.DefaultIfExceptionAsync<T1, T2, T3, TResult>(Func<T1, T2, T3, Task<TResult>>, T1, T2, T3, TResult, ILogger)
  fullName: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync<T1, T2, T3, TResult>(System.Func<T1, T2, T3, System.Threading.Tasks.Task<TResult>>, T1, T2, T3, TResult, Microsoft.Extensions.Logging.ILogger)
  type: Method
  source:
    path: Whipstaff.Core
    isExternal: true
  assemblies:
  - Whipstaff.Core
  namespace: Whipstaff.Core.ExceptionHandling
  summary: "\nEncapsulates a method that has 3 parameters, and in case of any exception it catches it and returns a default value.\n"
  syntax:
    content: public static Task<TResult> DefaultIfExceptionAsync<T1, T2, T3, TResult>(this Func<T1, T2, T3, Task<TResult>> func, T1 arg1, T2 arg2, T3 arg3, TResult defaultResult, ILogger logger = null)
    parameters:
    - id: func
      type: System.Func{{T1},{T2},{T3},System.Threading.Tasks.Task{{TResult}}}
      description: The method to encapsulate.
    - id: arg1
      type: '{T1}'
      description: The first parameter the encapsulated method takes.
    - id: arg2
      type: '{T2}'
      description: The second parameter the encapsulated method takes.
    - id: arg3
      type: '{T3}'
      description: The third parameter the encapsulated method takes.
    - id: defaultResult
      type: '{TResult}'
      description: The default value to return if an exception is thrown.
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger
      description: Logging framework instance.
    typeParameters:
    - id: T1
      description: The type of the first parameter the encapsulated method takes.
    - id: T2
      description: The type of the second parameter the encapsulated method takes.
    - id: T3
      description: The type of the third parameter the encapsulated method takes.
    - id: TResult
      description: The type of the return value of the method that this delegate encapsulates.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The return value of the method that this delegate encapsulates.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DefaultIfExceptionAsync(Of T1, T2, T3, TResult)(func As Func(Of T1, T2, T3, Task(Of TResult)), arg1 As T1, arg2 As T2, arg3 As T3, defaultResult As TResult, logger As ILogger = Nothing) As Task(Of TResult)
  overload: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync*
  nameWithType.vb: TaskHelpers.DefaultIfExceptionAsync(Of T1, T2, T3, TResult)(Func(Of T1, T2, T3, Task(Of TResult)), T1, T2, T3, TResult, ILogger)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync(Of T1, T2, T3, TResult)(System.Func(Of T1, T2, T3, System.Threading.Tasks.Task(Of TResult)), T1, T2, T3, TResult, Microsoft.Extensions.Logging.ILogger)
  name.vb: DefaultIfExceptionAsync(Of T1, T2, T3, TResult)(Func(Of T1, T2, T3, Task(Of TResult)), T1, T2, T3, TResult, ILogger)
- uid: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``5(System.Func{``0,``1,``2,``3,System.Threading.Tasks.Task{``4}},``0,``1,``2,``3,``4,Microsoft.Extensions.Logging.ILogger)
  commentId: M:Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``5(System.Func{``0,``1,``2,``3,System.Threading.Tasks.Task{``4}},``0,``1,``2,``3,``4,Microsoft.Extensions.Logging.ILogger)
  id: DefaultIfExceptionAsync``5(System.Func{``0,``1,``2,``3,System.Threading.Tasks.Task{``4}},``0,``1,``2,``3,``4,Microsoft.Extensions.Logging.ILogger)
  isExtensionMethod: true
  parent: Whipstaff.Core.ExceptionHandling.TaskHelpers
  langs:
  - csharp
  - vb
  name: DefaultIfExceptionAsync<T1, T2, T3, T4, TResult>(Func<T1, T2, T3, T4, Task<TResult>>, T1, T2, T3, T4, TResult, ILogger)
  nameWithType: TaskHelpers.DefaultIfExceptionAsync<T1, T2, T3, T4, TResult>(Func<T1, T2, T3, T4, Task<TResult>>, T1, T2, T3, T4, TResult, ILogger)
  fullName: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync<T1, T2, T3, T4, TResult>(System.Func<T1, T2, T3, T4, System.Threading.Tasks.Task<TResult>>, T1, T2, T3, T4, TResult, Microsoft.Extensions.Logging.ILogger)
  type: Method
  source:
    path: Whipstaff.Core
    isExternal: true
  assemblies:
  - Whipstaff.Core
  namespace: Whipstaff.Core.ExceptionHandling
  summary: "\nEncapsulates a method that has 4 parameters, and in case of any exception it catches it and returns a default value.\n"
  syntax:
    content: public static Task<TResult> DefaultIfExceptionAsync<T1, T2, T3, T4, TResult>(this Func<T1, T2, T3, T4, Task<TResult>> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, TResult defaultResult, ILogger logger = null)
    parameters:
    - id: func
      type: System.Func{{T1},{T2},{T3},{T4},System.Threading.Tasks.Task{{TResult}}}
      description: The method to encapsulate.
    - id: arg1
      type: '{T1}'
      description: The first parameter the encapsulated method takes.
    - id: arg2
      type: '{T2}'
      description: The second parameter the encapsulated method takes.
    - id: arg3
      type: '{T3}'
      description: The third parameter the encapsulated method takes.
    - id: arg4
      type: '{T4}'
      description: The fourth parameter the encapsulated method takes.
    - id: defaultResult
      type: '{TResult}'
      description: The default value to return if an exception is thrown.
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger
      description: Logging framework instance.
    typeParameters:
    - id: T1
      description: The type of the first parameter the encapsulated method takes.
    - id: T2
      description: The type of the second parameter the encapsulated method takes.
    - id: T3
      description: The type of the third parameter the encapsulated method takes.
    - id: T4
      description: The type of the fourth parameter the encapsulated method takes.
    - id: TResult
      description: The type of the return value of the method that this delegate encapsulates.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The return value of the method that this delegate encapsulates.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DefaultIfExceptionAsync(Of T1, T2, T3, T4, TResult)(func As Func(Of T1, T2, T3, T4, Task(Of TResult)), arg1 As T1, arg2 As T2, arg3 As T3, arg4 As T4, defaultResult As TResult, logger As ILogger = Nothing) As Task(Of TResult)
  overload: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync*
  nameWithType.vb: TaskHelpers.DefaultIfExceptionAsync(Of T1, T2, T3, T4, TResult)(Func(Of T1, T2, T3, T4, Task(Of TResult)), T1, T2, T3, T4, TResult, ILogger)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync(Of T1, T2, T3, T4, TResult)(System.Func(Of T1, T2, T3, T4, System.Threading.Tasks.Task(Of TResult)), T1, T2, T3, T4, TResult, Microsoft.Extensions.Logging.ILogger)
  name.vb: DefaultIfExceptionAsync(Of T1, T2, T3, T4, TResult)(Func(Of T1, T2, T3, T4, Task(Of TResult)), T1, T2, T3, T4, TResult, ILogger)
- uid: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``6(System.Func{``0,``1,``2,``3,``4,System.Threading.Tasks.Task{``5}},``0,``1,``2,``3,``4,``5,Microsoft.Extensions.Logging.ILogger)
  commentId: M:Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``6(System.Func{``0,``1,``2,``3,``4,System.Threading.Tasks.Task{``5}},``0,``1,``2,``3,``4,``5,Microsoft.Extensions.Logging.ILogger)
  id: DefaultIfExceptionAsync``6(System.Func{``0,``1,``2,``3,``4,System.Threading.Tasks.Task{``5}},``0,``1,``2,``3,``4,``5,Microsoft.Extensions.Logging.ILogger)
  isExtensionMethod: true
  parent: Whipstaff.Core.ExceptionHandling.TaskHelpers
  langs:
  - csharp
  - vb
  name: DefaultIfExceptionAsync<T1, T2, T3, T4, T5, TResult>(Func<T1, T2, T3, T4, T5, Task<TResult>>, T1, T2, T3, T4, T5, TResult, ILogger)
  nameWithType: TaskHelpers.DefaultIfExceptionAsync<T1, T2, T3, T4, T5, TResult>(Func<T1, T2, T3, T4, T5, Task<TResult>>, T1, T2, T3, T4, T5, TResult, ILogger)
  fullName: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync<T1, T2, T3, T4, T5, TResult>(System.Func<T1, T2, T3, T4, T5, System.Threading.Tasks.Task<TResult>>, T1, T2, T3, T4, T5, TResult, Microsoft.Extensions.Logging.ILogger)
  type: Method
  source:
    path: Whipstaff.Core
    isExternal: true
  assemblies:
  - Whipstaff.Core
  namespace: Whipstaff.Core.ExceptionHandling
  summary: "\nEncapsulates a method that has 5 parameters, and in case of any exception it catches it and returns a default value.\n"
  syntax:
    content: public static Task<TResult> DefaultIfExceptionAsync<T1, T2, T3, T4, T5, TResult>(this Func<T1, T2, T3, T4, T5, Task<TResult>> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, TResult defaultResult, ILogger logger = null)
    parameters:
    - id: func
      type: System.Func{{T1},{T2},{T3},{T4},{T5},System.Threading.Tasks.Task{{TResult}}}
      description: The method to encapsulate.
    - id: arg1
      type: '{T1}'
      description: The first parameter the encapsulated method takes.
    - id: arg2
      type: '{T2}'
      description: The second parameter the encapsulated method takes.
    - id: arg3
      type: '{T3}'
      description: The third parameter the encapsulated method takes.
    - id: arg4
      type: '{T4}'
      description: The fourth parameter the encapsulated method takes.
    - id: arg5
      type: '{T5}'
      description: The fifth parameter the encapsulated method takes.
    - id: defaultResult
      type: '{TResult}'
      description: The default value to return if an exception is thrown.
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger
      description: Logging framework instance.
    typeParameters:
    - id: T1
      description: The type of the first parameter the encapsulated method takes.
    - id: T2
      description: The type of the second parameter the encapsulated method takes.
    - id: T3
      description: The type of the third parameter the encapsulated method takes.
    - id: T4
      description: The type of the fourth parameter the encapsulated method takes.
    - id: T5
      description: The type of the fifth parameter the encapsulated method takes.
    - id: TResult
      description: The type of the return value of the method that this delegate encapsulates.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The return value of the method that this delegate encapsulates.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, TResult)(func As Func(Of T1, T2, T3, T4, T5, Task(Of TResult)), arg1 As T1, arg2 As T2, arg3 As T3, arg4 As T4, arg5 As T5, defaultResult As TResult, logger As ILogger = Nothing) As Task(Of TResult)
  overload: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync*
  nameWithType.vb: TaskHelpers.DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, TResult)(Func(Of T1, T2, T3, T4, T5, Task(Of TResult)), T1, T2, T3, T4, T5, TResult, ILogger)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, TResult)(System.Func(Of T1, T2, T3, T4, T5, System.Threading.Tasks.Task(Of TResult)), T1, T2, T3, T4, T5, TResult, Microsoft.Extensions.Logging.ILogger)
  name.vb: DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, TResult)(Func(Of T1, T2, T3, T4, T5, Task(Of TResult)), T1, T2, T3, T4, T5, TResult, ILogger)
- uid: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``7(System.Func{``0,``1,``2,``3,``4,``5,System.Threading.Tasks.Task{``6}},``0,``1,``2,``3,``4,``5,``6,Microsoft.Extensions.Logging.ILogger)
  commentId: M:Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``7(System.Func{``0,``1,``2,``3,``4,``5,System.Threading.Tasks.Task{``6}},``0,``1,``2,``3,``4,``5,``6,Microsoft.Extensions.Logging.ILogger)
  id: DefaultIfExceptionAsync``7(System.Func{``0,``1,``2,``3,``4,``5,System.Threading.Tasks.Task{``6}},``0,``1,``2,``3,``4,``5,``6,Microsoft.Extensions.Logging.ILogger)
  isExtensionMethod: true
  parent: Whipstaff.Core.ExceptionHandling.TaskHelpers
  langs:
  - csharp
  - vb
  name: DefaultIfExceptionAsync<T1, T2, T3, T4, T5, T6, TResult>(Func<T1, T2, T3, T4, T5, T6, Task<TResult>>, T1, T2, T3, T4, T5, T6, TResult, ILogger)
  nameWithType: TaskHelpers.DefaultIfExceptionAsync<T1, T2, T3, T4, T5, T6, TResult>(Func<T1, T2, T3, T4, T5, T6, Task<TResult>>, T1, T2, T3, T4, T5, T6, TResult, ILogger)
  fullName: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync<T1, T2, T3, T4, T5, T6, TResult>(System.Func<T1, T2, T3, T4, T5, T6, System.Threading.Tasks.Task<TResult>>, T1, T2, T3, T4, T5, T6, TResult, Microsoft.Extensions.Logging.ILogger)
  type: Method
  source:
    path: Whipstaff.Core
    isExternal: true
  assemblies:
  - Whipstaff.Core
  namespace: Whipstaff.Core.ExceptionHandling
  summary: "\nEncapsulates a method that has 6 parameters, and in case of any exception it catches it and returns a default value.\n"
  syntax:
    content: public static Task<TResult> DefaultIfExceptionAsync<T1, T2, T3, T4, T5, T6, TResult>(this Func<T1, T2, T3, T4, T5, T6, Task<TResult>> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, TResult defaultResult, ILogger logger = null)
    parameters:
    - id: func
      type: System.Func{{T1},{T2},{T3},{T4},{T5},{T6},System.Threading.Tasks.Task{{TResult}}}
      description: The method to encapsulate.
    - id: arg1
      type: '{T1}'
      description: The first parameter the encapsulated method takes.
    - id: arg2
      type: '{T2}'
      description: The second parameter the encapsulated method takes.
    - id: arg3
      type: '{T3}'
      description: The third parameter the encapsulated method takes.
    - id: arg4
      type: '{T4}'
      description: The fourth parameter the encapsulated method takes.
    - id: arg5
      type: '{T5}'
      description: The fifth parameter the encapsulated method takes.
    - id: arg6
      type: '{T6}'
      description: The sixth parameter the encapsulated method takes.
    - id: defaultResult
      type: '{TResult}'
      description: The default value to return if an exception is thrown.
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger
      description: Logging framework instance.
    typeParameters:
    - id: T1
      description: The type of the first parameter the encapsulated method takes.
    - id: T2
      description: The type of the second parameter the encapsulated method takes.
    - id: T3
      description: The type of the third parameter the encapsulated method takes.
    - id: T4
      description: The type of the fourth parameter the encapsulated method takes.
    - id: T5
      description: The type of the fifth parameter the encapsulated method takes.
    - id: T6
      description: The type of the sixth parameter the encapsulated method takes.
    - id: TResult
      description: The type of the return value of the method that this delegate encapsulates.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The return value of the method that this delegate encapsulates.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, T6, TResult)(func As Func(Of T1, T2, T3, T4, T5, T6, Task(Of TResult)), arg1 As T1, arg2 As T2, arg3 As T3, arg4 As T4, arg5 As T5, arg6 As T6, defaultResult As TResult, logger As ILogger = Nothing) As Task(Of TResult)
  overload: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync*
  nameWithType.vb: TaskHelpers.DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, T6, TResult)(Func(Of T1, T2, T3, T4, T5, T6, Task(Of TResult)), T1, T2, T3, T4, T5, T6, TResult, ILogger)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, T6, TResult)(System.Func(Of T1, T2, T3, T4, T5, T6, System.Threading.Tasks.Task(Of TResult)), T1, T2, T3, T4, T5, T6, TResult, Microsoft.Extensions.Logging.ILogger)
  name.vb: DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, T6, TResult)(Func(Of T1, T2, T3, T4, T5, T6, Task(Of TResult)), T1, T2, T3, T4, T5, T6, TResult, ILogger)
- uid: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``8(System.Func{``0,``1,``2,``3,``4,``5,``6,System.Threading.Tasks.Task{``7}},``0,``1,``2,``3,``4,``5,``6,``7,Microsoft.Extensions.Logging.ILogger)
  commentId: M:Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``8(System.Func{``0,``1,``2,``3,``4,``5,``6,System.Threading.Tasks.Task{``7}},``0,``1,``2,``3,``4,``5,``6,``7,Microsoft.Extensions.Logging.ILogger)
  id: DefaultIfExceptionAsync``8(System.Func{``0,``1,``2,``3,``4,``5,``6,System.Threading.Tasks.Task{``7}},``0,``1,``2,``3,``4,``5,``6,``7,Microsoft.Extensions.Logging.ILogger)
  isExtensionMethod: true
  parent: Whipstaff.Core.ExceptionHandling.TaskHelpers
  langs:
  - csharp
  - vb
  name: DefaultIfExceptionAsync<T1, T2, T3, T4, T5, T6, T7, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, Task<TResult>>, T1, T2, T3, T4, T5, T6, T7, TResult, ILogger)
  nameWithType: TaskHelpers.DefaultIfExceptionAsync<T1, T2, T3, T4, T5, T6, T7, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, Task<TResult>>, T1, T2, T3, T4, T5, T6, T7, TResult, ILogger)
  fullName: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync<T1, T2, T3, T4, T5, T6, T7, TResult>(System.Func<T1, T2, T3, T4, T5, T6, T7, System.Threading.Tasks.Task<TResult>>, T1, T2, T3, T4, T5, T6, T7, TResult, Microsoft.Extensions.Logging.ILogger)
  type: Method
  source:
    path: Whipstaff.Core
    isExternal: true
  assemblies:
  - Whipstaff.Core
  namespace: Whipstaff.Core.ExceptionHandling
  summary: "\nEncapsulates a method that has 7 parameters, and in case of any exception it catches it and returns a default value.\n"
  syntax:
    content: public static Task<TResult> DefaultIfExceptionAsync<T1, T2, T3, T4, T5, T6, T7, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, Task<TResult>> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, TResult defaultResult, ILogger logger = null)
    parameters:
    - id: func
      type: System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},System.Threading.Tasks.Task{{TResult}}}
      description: The method to encapsulate.
    - id: arg1
      type: '{T1}'
      description: The first parameter the encapsulated method takes.
    - id: arg2
      type: '{T2}'
      description: The second parameter the encapsulated method takes.
    - id: arg3
      type: '{T3}'
      description: The third parameter the encapsulated method takes.
    - id: arg4
      type: '{T4}'
      description: The fourth parameter the encapsulated method takes.
    - id: arg5
      type: '{T5}'
      description: The fifth parameter the encapsulated method takes.
    - id: arg6
      type: '{T6}'
      description: The sixth parameter the encapsulated method takes.
    - id: arg7
      type: '{T7}'
      description: The seventh parameter the encapsulated method takes.
    - id: defaultResult
      type: '{TResult}'
      description: The default value to return if an exception is thrown.
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger
      description: Logging framework instance.
    typeParameters:
    - id: T1
      description: The type of the first parameter the encapsulated method takes.
    - id: T2
      description: The type of the second parameter the encapsulated method takes.
    - id: T3
      description: The type of the third parameter the encapsulated method takes.
    - id: T4
      description: The type of the fourth parameter the encapsulated method takes.
    - id: T5
      description: The type of the fifth parameter the encapsulated method takes.
    - id: T6
      description: The type of the sixth parameter the encapsulated method takes.
    - id: T7
      description: The type of the seventh parameter the encapsulated method takes.
    - id: TResult
      description: The type of the return value of the method that this delegate encapsulates.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The return value of the method that this delegate encapsulates.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, T6, T7, TResult)(func As Func(Of T1, T2, T3, T4, T5, T6, T7, Task(Of TResult)), arg1 As T1, arg2 As T2, arg3 As T3, arg4 As T4, arg5 As T5, arg6 As T6, arg7 As T7, defaultResult As TResult, logger As ILogger = Nothing) As Task(Of TResult)
  overload: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync*
  nameWithType.vb: TaskHelpers.DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, T6, T7, TResult)(Func(Of T1, T2, T3, T4, T5, T6, T7, Task(Of TResult)), T1, T2, T3, T4, T5, T6, T7, TResult, ILogger)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, T6, T7, TResult)(System.Func(Of T1, T2, T3, T4, T5, T6, T7, System.Threading.Tasks.Task(Of TResult)), T1, T2, T3, T4, T5, T6, T7, TResult, Microsoft.Extensions.Logging.ILogger)
  name.vb: DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, T6, T7, TResult)(Func(Of T1, T2, T3, T4, T5, T6, T7, Task(Of TResult)), T1, T2, T3, T4, T5, T6, T7, TResult, ILogger)
- uid: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Threading.Tasks.Task{``8}},``0,``1,``2,``3,``4,``5,``6,``7,``8,Microsoft.Extensions.Logging.ILogger)
  commentId: M:Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Threading.Tasks.Task{``8}},``0,``1,``2,``3,``4,``5,``6,``7,``8,Microsoft.Extensions.Logging.ILogger)
  id: DefaultIfExceptionAsync``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Threading.Tasks.Task{``8}},``0,``1,``2,``3,``4,``5,``6,``7,``8,Microsoft.Extensions.Logging.ILogger)
  isExtensionMethod: true
  parent: Whipstaff.Core.ExceptionHandling.TaskHelpers
  langs:
  - csharp
  - vb
  name: DefaultIfExceptionAsync<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, Task<TResult>>, T1, T2, T3, T4, T5, T6, T7, T8, TResult, ILogger)
  nameWithType: TaskHelpers.DefaultIfExceptionAsync<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, Task<TResult>>, T1, T2, T3, T4, T5, T6, T7, T8, TResult, ILogger)
  fullName: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(System.Func<T1, T2, T3, T4, T5, T6, T7, T8, System.Threading.Tasks.Task<TResult>>, T1, T2, T3, T4, T5, T6, T7, T8, TResult, Microsoft.Extensions.Logging.ILogger)
  type: Method
  source:
    path: Whipstaff.Core
    isExternal: true
  assemblies:
  - Whipstaff.Core
  namespace: Whipstaff.Core.ExceptionHandling
  summary: "\nEncapsulates a method that has 8 parameters, and in case of any exception it catches it and returns a default value.\n"
  syntax:
    content: public static Task<TResult> DefaultIfExceptionAsync<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, Task<TResult>> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, TResult defaultResult, ILogger logger = null)
    parameters:
    - id: func
      type: System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},System.Threading.Tasks.Task{{TResult}}}
      description: The method to encapsulate.
    - id: arg1
      type: '{T1}'
      description: The first parameter the encapsulated method takes.
    - id: arg2
      type: '{T2}'
      description: The second parameter the encapsulated method takes.
    - id: arg3
      type: '{T3}'
      description: The third parameter the encapsulated method takes.
    - id: arg4
      type: '{T4}'
      description: The fourth parameter the encapsulated method takes.
    - id: arg5
      type: '{T5}'
      description: The fifth parameter the encapsulated method takes.
    - id: arg6
      type: '{T6}'
      description: The sixth parameter the encapsulated method takes.
    - id: arg7
      type: '{T7}'
      description: The seventh parameter the encapsulated method takes.
    - id: arg8
      type: '{T8}'
      description: The eighth parameter the encapsulated method takes.
    - id: defaultResult
      type: '{TResult}'
      description: The default value to return if an exception is thrown.
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger
      description: Logging framework instance.
    typeParameters:
    - id: T1
      description: The type of the first parameter the encapsulated method takes.
    - id: T2
      description: The type of the second parameter the encapsulated method takes.
    - id: T3
      description: The type of the third parameter the encapsulated method takes.
    - id: T4
      description: The type of the fourth parameter the encapsulated method takes.
    - id: T5
      description: The type of the fifth parameter the encapsulated method takes.
    - id: T6
      description: The type of the sixth parameter the encapsulated method takes.
    - id: T7
      description: The type of the seventh parameter the encapsulated method takes.
    - id: T8
      description: The type of the eighth parameter the encapsulated method takes.
    - id: TResult
      description: The type of the return value of the method that this delegate encapsulates.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The return value of the method that this delegate encapsulates.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)(func As Func(Of T1, T2, T3, T4, T5, T6, T7, T8, Task(Of TResult)), arg1 As T1, arg2 As T2, arg3 As T3, arg4 As T4, arg5 As T5, arg6 As T6, arg7 As T7, arg8 As T8, defaultResult As TResult, logger As ILogger = Nothing) As Task(Of TResult)
  overload: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync*
  nameWithType.vb: TaskHelpers.DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)(Func(Of T1, T2, T3, T4, T5, T6, T7, T8, Task(Of TResult)), T1, T2, T3, T4, T5, T6, T7, T8, TResult, ILogger)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)(System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, System.Threading.Tasks.Task(Of TResult)), T1, T2, T3, T4, T5, T6, T7, T8, TResult, Microsoft.Extensions.Logging.ILogger)
  name.vb: DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)(Func(Of T1, T2, T3, T4, T5, T6, T7, T8, Task(Of TResult)), T1, T2, T3, T4, T5, T6, T7, T8, TResult, ILogger)
- uid: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Threading.Tasks.Task{``9}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,Microsoft.Extensions.Logging.ILogger)
  commentId: M:Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Threading.Tasks.Task{``9}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,Microsoft.Extensions.Logging.ILogger)
  id: DefaultIfExceptionAsync``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Threading.Tasks.Task{``9}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,Microsoft.Extensions.Logging.ILogger)
  isExtensionMethod: true
  parent: Whipstaff.Core.ExceptionHandling.TaskHelpers
  langs:
  - csharp
  - vb
  name: DefaultIfExceptionAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, Task<TResult>>, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult, ILogger)
  nameWithType: TaskHelpers.DefaultIfExceptionAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, Task<TResult>>, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult, ILogger)
  fullName: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, System.Threading.Tasks.Task<TResult>>, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult, Microsoft.Extensions.Logging.ILogger)
  type: Method
  source:
    path: Whipstaff.Core
    isExternal: true
  assemblies:
  - Whipstaff.Core
  namespace: Whipstaff.Core.ExceptionHandling
  summary: "\nEncapsulates a method that has 9 parameters, and in case of any exception it catches it and returns a default value.\n"
  syntax:
    content: public static Task<TResult> DefaultIfExceptionAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, Task<TResult>> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, TResult defaultResult, ILogger logger = null)
    parameters:
    - id: func
      type: System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},System.Threading.Tasks.Task{{TResult}}}
      description: The method to encapsulate.
    - id: arg1
      type: '{T1}'
      description: The first parameter the encapsulated method takes.
    - id: arg2
      type: '{T2}'
      description: The second parameter the encapsulated method takes.
    - id: arg3
      type: '{T3}'
      description: The third parameter the encapsulated method takes.
    - id: arg4
      type: '{T4}'
      description: The fourth parameter the encapsulated method takes.
    - id: arg5
      type: '{T5}'
      description: The fifth parameter the encapsulated method takes.
    - id: arg6
      type: '{T6}'
      description: The sixth parameter the encapsulated method takes.
    - id: arg7
      type: '{T7}'
      description: The seventh parameter the encapsulated method takes.
    - id: arg8
      type: '{T8}'
      description: The eighth parameter the encapsulated method takes.
    - id: arg9
      type: '{T9}'
      description: The ninth parameter the encapsulated method takes.
    - id: defaultResult
      type: '{TResult}'
      description: The default value to return if an exception is thrown.
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger
      description: Logging framework instance.
    typeParameters:
    - id: T1
      description: The type of the first parameter the encapsulated method takes.
    - id: T2
      description: The type of the second parameter the encapsulated method takes.
    - id: T3
      description: The type of the third parameter the encapsulated method takes.
    - id: T4
      description: The type of the fourth parameter the encapsulated method takes.
    - id: T5
      description: The type of the fifth parameter the encapsulated method takes.
    - id: T6
      description: The type of the sixth parameter the encapsulated method takes.
    - id: T7
      description: The type of the seventh parameter the encapsulated method takes.
    - id: T8
      description: The type of the eighth parameter the encapsulated method takes.
    - id: T9
      description: The type of the ninth parameter the encapsulated method takes.
    - id: TResult
      description: The type of the return value of the method that this delegate encapsulates.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The return value of the method that this delegate encapsulates.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)(func As Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, Task(Of TResult)), arg1 As T1, arg2 As T2, arg3 As T3, arg4 As T4, arg5 As T5, arg6 As T6, arg7 As T7, arg8 As T8, arg9 As T9, defaultResult As TResult, logger As ILogger = Nothing) As Task(Of TResult)
  overload: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync*
  nameWithType.vb: TaskHelpers.DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)(Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, Task(Of TResult)), T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult, ILogger)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)(System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, System.Threading.Tasks.Task(Of TResult)), T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult, Microsoft.Extensions.Logging.ILogger)
  name.vb: DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)(Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, Task(Of TResult)), T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult, ILogger)
- uid: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Threading.Tasks.Task{``10}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,Microsoft.Extensions.Logging.ILogger)
  commentId: M:Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Threading.Tasks.Task{``10}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,Microsoft.Extensions.Logging.ILogger)
  id: DefaultIfExceptionAsync``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Threading.Tasks.Task{``10}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,Microsoft.Extensions.Logging.ILogger)
  isExtensionMethod: true
  parent: Whipstaff.Core.ExceptionHandling.TaskHelpers
  langs:
  - csharp
  - vb
  name: DefaultIfExceptionAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Task<TResult>>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult, ILogger)
  nameWithType: TaskHelpers.DefaultIfExceptionAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Task<TResult>>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult, ILogger)
  fullName: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, System.Threading.Tasks.Task<TResult>>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult, Microsoft.Extensions.Logging.ILogger)
  type: Method
  source:
    path: Whipstaff.Core
    isExternal: true
  assemblies:
  - Whipstaff.Core
  namespace: Whipstaff.Core.ExceptionHandling
  summary: "\nEncapsulates a method that has 10 parameters, and in case of any exception it catches it and returns a default value.\n"
  syntax:
    content: public static Task<TResult> DefaultIfExceptionAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Task<TResult>> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, TResult defaultResult, ILogger logger = null)
    parameters:
    - id: func
      type: System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},System.Threading.Tasks.Task{{TResult}}}
      description: The method to encapsulate.
    - id: arg1
      type: '{T1}'
      description: The first parameter the encapsulated method takes.
    - id: arg2
      type: '{T2}'
      description: The second parameter the encapsulated method takes.
    - id: arg3
      type: '{T3}'
      description: The third parameter the encapsulated method takes.
    - id: arg4
      type: '{T4}'
      description: The fourth parameter the encapsulated method takes.
    - id: arg5
      type: '{T5}'
      description: The fifth parameter the encapsulated method takes.
    - id: arg6
      type: '{T6}'
      description: The sixth parameter the encapsulated method takes.
    - id: arg7
      type: '{T7}'
      description: The seventh parameter the encapsulated method takes.
    - id: arg8
      type: '{T8}'
      description: The eighth parameter the encapsulated method takes.
    - id: arg9
      type: '{T9}'
      description: The ninth parameter the encapsulated method takes.
    - id: arg10
      type: '{T10}'
      description: The tenth parameter the encapsulated method takes.
    - id: defaultResult
      type: '{TResult}'
      description: The default value to return if an exception is thrown.
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger
      description: Logging framework instance.
    typeParameters:
    - id: T1
      description: The type of the first parameter the encapsulated method takes.
    - id: T2
      description: The type of the second parameter the encapsulated method takes.
    - id: T3
      description: The type of the third parameter the encapsulated method takes.
    - id: T4
      description: The type of the fourth parameter the encapsulated method takes.
    - id: T5
      description: The type of the fifth parameter the encapsulated method takes.
    - id: T6
      description: The type of the sixth parameter the encapsulated method takes.
    - id: T7
      description: The type of the seventh parameter the encapsulated method takes.
    - id: T8
      description: The type of the eighth parameter the encapsulated method takes.
    - id: T9
      description: The type of the ninth parameter the encapsulated method takes.
    - id: T10
      description: The type of the tenth parameter the encapsulated method takes.
    - id: TResult
      description: The type of the return value of the method that this delegate encapsulates.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The return value of the method that this delegate encapsulates.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)(func As Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Task(Of TResult)), arg1 As T1, arg2 As T2, arg3 As T3, arg4 As T4, arg5 As T5, arg6 As T6, arg7 As T7, arg8 As T8, arg9 As T9, arg10 As T10, defaultResult As TResult, logger As ILogger = Nothing) As Task(Of TResult)
  overload: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync*
  nameWithType.vb: TaskHelpers.DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)(Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Task(Of TResult)), T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult, ILogger)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)(System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, System.Threading.Tasks.Task(Of TResult)), T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult, Microsoft.Extensions.Logging.ILogger)
  name.vb: DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)(Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Task(Of TResult)), T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult, ILogger)
- uid: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Threading.Tasks.Task{``11}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,Microsoft.Extensions.Logging.ILogger)
  commentId: M:Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Threading.Tasks.Task{``11}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,Microsoft.Extensions.Logging.ILogger)
  id: DefaultIfExceptionAsync``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Threading.Tasks.Task{``11}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,Microsoft.Extensions.Logging.ILogger)
  isExtensionMethod: true
  parent: Whipstaff.Core.ExceptionHandling.TaskHelpers
  langs:
  - csharp
  - vb
  name: DefaultIfExceptionAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Task<TResult>>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult, ILogger)
  nameWithType: TaskHelpers.DefaultIfExceptionAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Task<TResult>>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult, ILogger)
  fullName: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, System.Threading.Tasks.Task<TResult>>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult, Microsoft.Extensions.Logging.ILogger)
  type: Method
  source:
    path: Whipstaff.Core
    isExternal: true
  assemblies:
  - Whipstaff.Core
  namespace: Whipstaff.Core.ExceptionHandling
  summary: "\nEncapsulates a method that has 11 parameters, and in case of any exception it catches it and returns a default value.\n"
  syntax:
    content: public static Task<TResult> DefaultIfExceptionAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Task<TResult>> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, TResult defaultResult, ILogger logger = null)
    parameters:
    - id: func
      type: System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},System.Threading.Tasks.Task{{TResult}}}
      description: The method to encapsulate.
    - id: arg1
      type: '{T1}'
      description: The first parameter the encapsulated method takes.
    - id: arg2
      type: '{T2}'
      description: The second parameter the encapsulated method takes.
    - id: arg3
      type: '{T3}'
      description: The third parameter the encapsulated method takes.
    - id: arg4
      type: '{T4}'
      description: The fourth parameter the encapsulated method takes.
    - id: arg5
      type: '{T5}'
      description: The fifth parameter the encapsulated method takes.
    - id: arg6
      type: '{T6}'
      description: The sixth parameter the encapsulated method takes.
    - id: arg7
      type: '{T7}'
      description: The seventh parameter the encapsulated method takes.
    - id: arg8
      type: '{T8}'
      description: The eighth parameter the encapsulated method takes.
    - id: arg9
      type: '{T9}'
      description: The ninth parameter the encapsulated method takes.
    - id: arg10
      type: '{T10}'
      description: The tenth parameter the encapsulated method takes.
    - id: arg11
      type: '{T11}'
      description: The eleventh parameter the encapsulated method takes.
    - id: defaultResult
      type: '{TResult}'
      description: The default value to return if an exception is thrown.
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger
      description: Logging framework instance.
    typeParameters:
    - id: T1
      description: The type of the first parameter the encapsulated method takes.
    - id: T2
      description: The type of the second parameter the encapsulated method takes.
    - id: T3
      description: The type of the third parameter the encapsulated method takes.
    - id: T4
      description: The type of the fourth parameter the encapsulated method takes.
    - id: T5
      description: The type of the fifth parameter the encapsulated method takes.
    - id: T6
      description: The type of the sixth parameter the encapsulated method takes.
    - id: T7
      description: The type of the seventh parameter the encapsulated method takes.
    - id: T8
      description: The type of the eighth parameter the encapsulated method takes.
    - id: T9
      description: The type of the ninth parameter the encapsulated method takes.
    - id: T10
      description: The type of the tenth parameter the encapsulated method takes.
    - id: T11
      description: The type of the eleventh parameter the encapsulated method takes.
    - id: TResult
      description: The type of the return value of the method that this delegate encapsulates.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The return value of the method that this delegate encapsulates.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)(func As Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Task(Of TResult)), arg1 As T1, arg2 As T2, arg3 As T3, arg4 As T4, arg5 As T5, arg6 As T6, arg7 As T7, arg8 As T8, arg9 As T9, arg10 As T10, arg11 As T11, defaultResult As TResult, logger As ILogger = Nothing) As Task(Of TResult)
  overload: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync*
  nameWithType.vb: TaskHelpers.DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)(Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Task(Of TResult)), T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult, ILogger)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)(System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, System.Threading.Tasks.Task(Of TResult)), T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult, Microsoft.Extensions.Logging.ILogger)
  name.vb: DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)(Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Task(Of TResult)), T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult, ILogger)
- uid: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Threading.Tasks.Task{``12}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,Microsoft.Extensions.Logging.ILogger)
  commentId: M:Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Threading.Tasks.Task{``12}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,Microsoft.Extensions.Logging.ILogger)
  id: DefaultIfExceptionAsync``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Threading.Tasks.Task{``12}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,Microsoft.Extensions.Logging.ILogger)
  isExtensionMethod: true
  parent: Whipstaff.Core.ExceptionHandling.TaskHelpers
  langs:
  - csharp
  - vb
  name: DefaultIfExceptionAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Task<TResult>>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult, ILogger)
  nameWithType: TaskHelpers.DefaultIfExceptionAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Task<TResult>>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult, ILogger)
  fullName: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, System.Threading.Tasks.Task<TResult>>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult, Microsoft.Extensions.Logging.ILogger)
  type: Method
  source:
    path: Whipstaff.Core
    isExternal: true
  assemblies:
  - Whipstaff.Core
  namespace: Whipstaff.Core.ExceptionHandling
  summary: "\nEncapsulates a method that has 12 parameters, and in case of any exception it catches it and returns a default value.\n"
  syntax:
    content: public static Task<TResult> DefaultIfExceptionAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Task<TResult>> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, TResult defaultResult, ILogger logger = null)
    parameters:
    - id: func
      type: System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},System.Threading.Tasks.Task{{TResult}}}
      description: The method to encapsulate.
    - id: arg1
      type: '{T1}'
      description: The first parameter the encapsulated method takes.
    - id: arg2
      type: '{T2}'
      description: The second parameter the encapsulated method takes.
    - id: arg3
      type: '{T3}'
      description: The third parameter the encapsulated method takes.
    - id: arg4
      type: '{T4}'
      description: The fourth parameter the encapsulated method takes.
    - id: arg5
      type: '{T5}'
      description: The fifth parameter the encapsulated method takes.
    - id: arg6
      type: '{T6}'
      description: The sixth parameter the encapsulated method takes.
    - id: arg7
      type: '{T7}'
      description: The seventh parameter the encapsulated method takes.
    - id: arg8
      type: '{T8}'
      description: The eighth parameter the encapsulated method takes.
    - id: arg9
      type: '{T9}'
      description: The ninth parameter the encapsulated method takes.
    - id: arg10
      type: '{T10}'
      description: The tenth parameter the encapsulated method takes.
    - id: arg11
      type: '{T11}'
      description: The eleventh parameter the encapsulated method takes.
    - id: arg12
      type: '{T12}'
      description: The twelfth parameter the encapsulated method takes.
    - id: defaultResult
      type: '{TResult}'
      description: The default value to return if an exception is thrown.
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger
      description: Logging framework instance.
    typeParameters:
    - id: T1
      description: The type of the first parameter the encapsulated method takes.
    - id: T2
      description: The type of the second parameter the encapsulated method takes.
    - id: T3
      description: The type of the third parameter the encapsulated method takes.
    - id: T4
      description: The type of the fourth parameter the encapsulated method takes.
    - id: T5
      description: The type of the fifth parameter the encapsulated method takes.
    - id: T6
      description: The type of the sixth parameter the encapsulated method takes.
    - id: T7
      description: The type of the seventh parameter the encapsulated method takes.
    - id: T8
      description: The type of the eighth parameter the encapsulated method takes.
    - id: T9
      description: The type of the ninth parameter the encapsulated method takes.
    - id: T10
      description: The type of the tenth parameter the encapsulated method takes.
    - id: T11
      description: The type of the eleventh parameter the encapsulated method takes.
    - id: T12
      description: The type of the twelfth parameter the encapsulated method takes.
    - id: TResult
      description: The type of the return value of the method that this delegate encapsulates.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The return value of the method that this delegate encapsulates.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)(func As Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Task(Of TResult)), arg1 As T1, arg2 As T2, arg3 As T3, arg4 As T4, arg5 As T5, arg6 As T6, arg7 As T7, arg8 As T8, arg9 As T9, arg10 As T10, arg11 As T11, arg12 As T12, defaultResult As TResult, logger As ILogger = Nothing) As Task(Of TResult)
  overload: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync*
  nameWithType.vb: TaskHelpers.DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)(Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Task(Of TResult)), T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult, ILogger)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)(System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, System.Threading.Tasks.Task(Of TResult)), T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult, Microsoft.Extensions.Logging.ILogger)
  name.vb: DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)(Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Task(Of TResult)), T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult, ILogger)
- uid: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Threading.Tasks.Task{``13}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,Microsoft.Extensions.Logging.ILogger)
  commentId: M:Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Threading.Tasks.Task{``13}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,Microsoft.Extensions.Logging.ILogger)
  id: DefaultIfExceptionAsync``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Threading.Tasks.Task{``13}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,Microsoft.Extensions.Logging.ILogger)
  isExtensionMethod: true
  parent: Whipstaff.Core.ExceptionHandling.TaskHelpers
  langs:
  - csharp
  - vb
  name: DefaultIfExceptionAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, Task<TResult>>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult, ILogger)
  nameWithType: TaskHelpers.DefaultIfExceptionAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, Task<TResult>>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult, ILogger)
  fullName: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, System.Threading.Tasks.Task<TResult>>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult, Microsoft.Extensions.Logging.ILogger)
  type: Method
  source:
    path: Whipstaff.Core
    isExternal: true
  assemblies:
  - Whipstaff.Core
  namespace: Whipstaff.Core.ExceptionHandling
  summary: "\nEncapsulates a method that has 13 parameters, and in case of any exception it catches it and returns a default value.\n"
  syntax:
    content: public static Task<TResult> DefaultIfExceptionAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, Task<TResult>> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, TResult defaultResult, ILogger logger = null)
    parameters:
    - id: func
      type: System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},System.Threading.Tasks.Task{{TResult}}}
      description: The method to encapsulate.
    - id: arg1
      type: '{T1}'
      description: The first parameter the encapsulated method takes.
    - id: arg2
      type: '{T2}'
      description: The second parameter the encapsulated method takes.
    - id: arg3
      type: '{T3}'
      description: The third parameter the encapsulated method takes.
    - id: arg4
      type: '{T4}'
      description: The fourth parameter the encapsulated method takes.
    - id: arg5
      type: '{T5}'
      description: The fifth parameter the encapsulated method takes.
    - id: arg6
      type: '{T6}'
      description: The sixth parameter the encapsulated method takes.
    - id: arg7
      type: '{T7}'
      description: The seventh parameter the encapsulated method takes.
    - id: arg8
      type: '{T8}'
      description: The eighth parameter the encapsulated method takes.
    - id: arg9
      type: '{T9}'
      description: The ninth parameter the encapsulated method takes.
    - id: arg10
      type: '{T10}'
      description: The tenth parameter the encapsulated method takes.
    - id: arg11
      type: '{T11}'
      description: The eleventh parameter the encapsulated method takes.
    - id: arg12
      type: '{T12}'
      description: The twelfth parameter the encapsulated method takes.
    - id: arg13
      type: '{T13}'
      description: The thirteenth parameter the encapsulated method takes.
    - id: defaultResult
      type: '{TResult}'
      description: The default value to return if an exception is thrown.
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger
      description: Logging framework instance.
    typeParameters:
    - id: T1
      description: The type of the first parameter the encapsulated method takes.
    - id: T2
      description: The type of the second parameter the encapsulated method takes.
    - id: T3
      description: The type of the third parameter the encapsulated method takes.
    - id: T4
      description: The type of the fourth parameter the encapsulated method takes.
    - id: T5
      description: The type of the fifth parameter the encapsulated method takes.
    - id: T6
      description: The type of the sixth parameter the encapsulated method takes.
    - id: T7
      description: The type of the seventh parameter the encapsulated method takes.
    - id: T8
      description: The type of the eighth parameter the encapsulated method takes.
    - id: T9
      description: The type of the ninth parameter the encapsulated method takes.
    - id: T10
      description: The type of the tenth parameter the encapsulated method takes.
    - id: T11
      description: The type of the eleventh parameter the encapsulated method takes.
    - id: T12
      description: The type of the twelfth parameter the encapsulated method takes.
    - id: T13
      description: The type of the thirteenth parameter the encapsulated method takes.
    - id: TResult
      description: The type of the return value of the method that this delegate encapsulates.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The return value of the method that this delegate encapsulates.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)(func As Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, Task(Of TResult)), arg1 As T1, arg2 As T2, arg3 As T3, arg4 As T4, arg5 As T5, arg6 As T6, arg7 As T7, arg8 As T8, arg9 As T9, arg10 As T10, arg11 As T11, arg12 As T12, arg13 As T13, defaultResult As TResult, logger As ILogger = Nothing) As Task(Of TResult)
  overload: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync*
  nameWithType.vb: TaskHelpers.DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)(Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, Task(Of TResult)), T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult, ILogger)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)(System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, System.Threading.Tasks.Task(Of TResult)), T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult, Microsoft.Extensions.Logging.ILogger)
  name.vb: DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)(Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, Task(Of TResult)), T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult, ILogger)
- uid: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Threading.Tasks.Task{``14}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,Microsoft.Extensions.Logging.ILogger)
  commentId: M:Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Threading.Tasks.Task{``14}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,Microsoft.Extensions.Logging.ILogger)
  id: DefaultIfExceptionAsync``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Threading.Tasks.Task{``14}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,Microsoft.Extensions.Logging.ILogger)
  isExtensionMethod: true
  parent: Whipstaff.Core.ExceptionHandling.TaskHelpers
  langs:
  - csharp
  - vb
  name: DefaultIfExceptionAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, Task<TResult>>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult, ILogger)
  nameWithType: TaskHelpers.DefaultIfExceptionAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, Task<TResult>>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult, ILogger)
  fullName: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, System.Threading.Tasks.Task<TResult>>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult, Microsoft.Extensions.Logging.ILogger)
  type: Method
  source:
    path: Whipstaff.Core
    isExternal: true
  assemblies:
  - Whipstaff.Core
  namespace: Whipstaff.Core.ExceptionHandling
  summary: "\nEncapsulates a method that has 14 parameters, and in case of any exception it catches it and returns a default value.\n"
  syntax:
    content: public static Task<TResult> DefaultIfExceptionAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, Task<TResult>> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, TResult defaultResult, ILogger logger = null)
    parameters:
    - id: func
      type: System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},System.Threading.Tasks.Task{{TResult}}}
      description: The method to encapsulate.
    - id: arg1
      type: '{T1}'
      description: The first parameter the encapsulated method takes.
    - id: arg2
      type: '{T2}'
      description: The second parameter the encapsulated method takes.
    - id: arg3
      type: '{T3}'
      description: The third parameter the encapsulated method takes.
    - id: arg4
      type: '{T4}'
      description: The fourth parameter the encapsulated method takes.
    - id: arg5
      type: '{T5}'
      description: The fifth parameter the encapsulated method takes.
    - id: arg6
      type: '{T6}'
      description: The sixth parameter the encapsulated method takes.
    - id: arg7
      type: '{T7}'
      description: The seventh parameter the encapsulated method takes.
    - id: arg8
      type: '{T8}'
      description: The eighth parameter the encapsulated method takes.
    - id: arg9
      type: '{T9}'
      description: The ninth parameter the encapsulated method takes.
    - id: arg10
      type: '{T10}'
      description: The tenth parameter the encapsulated method takes.
    - id: arg11
      type: '{T11}'
      description: The eleventh parameter the encapsulated method takes.
    - id: arg12
      type: '{T12}'
      description: The twelfth parameter the encapsulated method takes.
    - id: arg13
      type: '{T13}'
      description: The thirteenth parameter the encapsulated method takes.
    - id: arg14
      type: '{T14}'
      description: The fourteenth parameter the encapsulated method takes.
    - id: defaultResult
      type: '{TResult}'
      description: The default value to return if an exception is thrown.
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger
      description: Logging framework instance.
    typeParameters:
    - id: T1
      description: The type of the first parameter the encapsulated method takes.
    - id: T2
      description: The type of the second parameter the encapsulated method takes.
    - id: T3
      description: The type of the third parameter the encapsulated method takes.
    - id: T4
      description: The type of the fourth parameter the encapsulated method takes.
    - id: T5
      description: The type of the fifth parameter the encapsulated method takes.
    - id: T6
      description: The type of the sixth parameter the encapsulated method takes.
    - id: T7
      description: The type of the seventh parameter the encapsulated method takes.
    - id: T8
      description: The type of the eighth parameter the encapsulated method takes.
    - id: T9
      description: The type of the ninth parameter the encapsulated method takes.
    - id: T10
      description: The type of the tenth parameter the encapsulated method takes.
    - id: T11
      description: The type of the eleventh parameter the encapsulated method takes.
    - id: T12
      description: The type of the twelfth parameter the encapsulated method takes.
    - id: T13
      description: The type of the thirteenth parameter the encapsulated method takes.
    - id: T14
      description: The type of the fourteenth parameter the encapsulated method takes.
    - id: TResult
      description: The type of the return value of the method that this delegate encapsulates.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The return value of the method that this delegate encapsulates.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)(func As Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, Task(Of TResult)), arg1 As T1, arg2 As T2, arg3 As T3, arg4 As T4, arg5 As T5, arg6 As T6, arg7 As T7, arg8 As T8, arg9 As T9, arg10 As T10, arg11 As T11, arg12 As T12, arg13 As T13, arg14 As T14, defaultResult As TResult, logger As ILogger = Nothing) As Task(Of TResult)
  overload: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync*
  nameWithType.vb: TaskHelpers.DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)(Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, Task(Of TResult)), T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult, ILogger)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)(System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, System.Threading.Tasks.Task(Of TResult)), T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult, Microsoft.Extensions.Logging.ILogger)
  name.vb: DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)(Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, Task(Of TResult)), T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult, ILogger)
- uid: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Threading.Tasks.Task{``15}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,Microsoft.Extensions.Logging.ILogger)
  commentId: M:Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Threading.Tasks.Task{``15}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,Microsoft.Extensions.Logging.ILogger)
  id: DefaultIfExceptionAsync``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Threading.Tasks.Task{``15}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,Microsoft.Extensions.Logging.ILogger)
  isExtensionMethod: true
  parent: Whipstaff.Core.ExceptionHandling.TaskHelpers
  langs:
  - csharp
  - vb
  name: DefaultIfExceptionAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, Task<TResult>>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult, ILogger)
  nameWithType: TaskHelpers.DefaultIfExceptionAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, Task<TResult>>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult, ILogger)
  fullName: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, System.Threading.Tasks.Task<TResult>>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult, Microsoft.Extensions.Logging.ILogger)
  type: Method
  source:
    path: Whipstaff.Core
    isExternal: true
  assemblies:
  - Whipstaff.Core
  namespace: Whipstaff.Core.ExceptionHandling
  summary: "\nEncapsulates a method that has 15 parameters, and in case of any exception it catches it and returns a default value.\n"
  syntax:
    content: public static Task<TResult> DefaultIfExceptionAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, Task<TResult>> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, TResult defaultResult, ILogger logger = null)
    parameters:
    - id: func
      type: System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{T15},System.Threading.Tasks.Task{{TResult}}}
      description: The method to encapsulate.
    - id: arg1
      type: '{T1}'
      description: The first parameter the encapsulated method takes.
    - id: arg2
      type: '{T2}'
      description: The second parameter the encapsulated method takes.
    - id: arg3
      type: '{T3}'
      description: The third parameter the encapsulated method takes.
    - id: arg4
      type: '{T4}'
      description: The fourth parameter the encapsulated method takes.
    - id: arg5
      type: '{T5}'
      description: The fifth parameter the encapsulated method takes.
    - id: arg6
      type: '{T6}'
      description: The sixth parameter the encapsulated method takes.
    - id: arg7
      type: '{T7}'
      description: The seventh parameter the encapsulated method takes.
    - id: arg8
      type: '{T8}'
      description: The eighth parameter the encapsulated method takes.
    - id: arg9
      type: '{T9}'
      description: The ninth parameter the encapsulated method takes.
    - id: arg10
      type: '{T10}'
      description: The tenth parameter the encapsulated method takes.
    - id: arg11
      type: '{T11}'
      description: The eleventh parameter the encapsulated method takes.
    - id: arg12
      type: '{T12}'
      description: The twelfth parameter the encapsulated method takes.
    - id: arg13
      type: '{T13}'
      description: The thirteenth parameter the encapsulated method takes.
    - id: arg14
      type: '{T14}'
      description: The fourteenth parameter the encapsulated method takes.
    - id: arg15
      type: '{T15}'
      description: The fifteenth parameter the encapsulated method takes.
    - id: defaultResult
      type: '{TResult}'
      description: The default value to return if an exception is thrown.
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger
      description: Logging framework instance.
    typeParameters:
    - id: T1
      description: The type of the first parameter the encapsulated method takes.
    - id: T2
      description: The type of the second parameter the encapsulated method takes.
    - id: T3
      description: The type of the third parameter the encapsulated method takes.
    - id: T4
      description: The type of the fourth parameter the encapsulated method takes.
    - id: T5
      description: The type of the fifth parameter the encapsulated method takes.
    - id: T6
      description: The type of the sixth parameter the encapsulated method takes.
    - id: T7
      description: The type of the seventh parameter the encapsulated method takes.
    - id: T8
      description: The type of the eighth parameter the encapsulated method takes.
    - id: T9
      description: The type of the ninth parameter the encapsulated method takes.
    - id: T10
      description: The type of the tenth parameter the encapsulated method takes.
    - id: T11
      description: The type of the eleventh parameter the encapsulated method takes.
    - id: T12
      description: The type of the twelfth parameter the encapsulated method takes.
    - id: T13
      description: The type of the thirteenth parameter the encapsulated method takes.
    - id: T14
      description: The type of the fourteenth parameter the encapsulated method takes.
    - id: T15
      description: The type of the fifteenth parameter the encapsulated method takes.
    - id: TResult
      description: The type of the return value of the method that this delegate encapsulates.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The return value of the method that this delegate encapsulates.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult)(func As Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, Task(Of TResult)), arg1 As T1, arg2 As T2, arg3 As T3, arg4 As T4, arg5 As T5, arg6 As T6, arg7 As T7, arg8 As T8, arg9 As T9, arg10 As T10, arg11 As T11, arg12 As T12, arg13 As T13, arg14 As T14, arg15 As T15, defaultResult As TResult, logger As ILogger = Nothing) As Task(Of TResult)
  overload: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync*
  nameWithType.vb: TaskHelpers.DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult)(Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, Task(Of TResult)), T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult, ILogger)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult)(System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, System.Threading.Tasks.Task(Of TResult)), T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult, Microsoft.Extensions.Logging.ILogger)
  name.vb: DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult)(Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, Task(Of TResult)), T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult, ILogger)
- uid: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Threading.Tasks.Task{``16}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,Microsoft.Extensions.Logging.ILogger)
  commentId: M:Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Threading.Tasks.Task{``16}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,Microsoft.Extensions.Logging.ILogger)
  id: DefaultIfExceptionAsync``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Threading.Tasks.Task{``16}},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,Microsoft.Extensions.Logging.ILogger)
  isExtensionMethod: true
  parent: Whipstaff.Core.ExceptionHandling.TaskHelpers
  langs:
  - csharp
  - vb
  name: DefaultIfExceptionAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, Task<TResult>>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult, ILogger)
  nameWithType: TaskHelpers.DefaultIfExceptionAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, Task<TResult>>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult, ILogger)
  fullName: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>(System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, System.Threading.Tasks.Task<TResult>>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult, Microsoft.Extensions.Logging.ILogger)
  type: Method
  source:
    path: Whipstaff.Core
    isExternal: true
  assemblies:
  - Whipstaff.Core
  namespace: Whipstaff.Core.ExceptionHandling
  summary: "\nEncapsulates a method that has 16 parameters, and in case of any exception it catches it and returns a default value.\n"
  syntax:
    content: public static Task<TResult> DefaultIfExceptionAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>(this Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, Task<TResult>> func, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, TResult defaultResult, ILogger logger = null)
    parameters:
    - id: func
      type: System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{T15},{T16},System.Threading.Tasks.Task{{TResult}}}
      description: The method to encapsulate.
    - id: arg1
      type: '{T1}'
      description: The first parameter the encapsulated method takes.
    - id: arg2
      type: '{T2}'
      description: The second parameter the encapsulated method takes.
    - id: arg3
      type: '{T3}'
      description: The third parameter the encapsulated method takes.
    - id: arg4
      type: '{T4}'
      description: The fourth parameter the encapsulated method takes.
    - id: arg5
      type: '{T5}'
      description: The fifth parameter the encapsulated method takes.
    - id: arg6
      type: '{T6}'
      description: The sixth parameter the encapsulated method takes.
    - id: arg7
      type: '{T7}'
      description: The seventh parameter the encapsulated method takes.
    - id: arg8
      type: '{T8}'
      description: The eighth parameter the encapsulated method takes.
    - id: arg9
      type: '{T9}'
      description: The ninth parameter the encapsulated method takes.
    - id: arg10
      type: '{T10}'
      description: The tenth parameter the encapsulated method takes.
    - id: arg11
      type: '{T11}'
      description: The eleventh parameter the encapsulated method takes.
    - id: arg12
      type: '{T12}'
      description: The twelfth parameter the encapsulated method takes.
    - id: arg13
      type: '{T13}'
      description: The thirteenth parameter the encapsulated method takes.
    - id: arg14
      type: '{T14}'
      description: The fourteenth parameter the encapsulated method takes.
    - id: arg15
      type: '{T15}'
      description: The fifteenth parameter the encapsulated method takes.
    - id: arg16
      type: '{T16}'
      description: The sixteenth parameter the encapsulated method takes.
    - id: defaultResult
      type: '{TResult}'
      description: The default value to return if an exception is thrown.
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger
      description: Logging framework instance.
    typeParameters:
    - id: T1
      description: The type of the first parameter the encapsulated method takes.
    - id: T2
      description: The type of the second parameter the encapsulated method takes.
    - id: T3
      description: The type of the third parameter the encapsulated method takes.
    - id: T4
      description: The type of the fourth parameter the encapsulated method takes.
    - id: T5
      description: The type of the fifth parameter the encapsulated method takes.
    - id: T6
      description: The type of the sixth parameter the encapsulated method takes.
    - id: T7
      description: The type of the seventh parameter the encapsulated method takes.
    - id: T8
      description: The type of the eighth parameter the encapsulated method takes.
    - id: T9
      description: The type of the ninth parameter the encapsulated method takes.
    - id: T10
      description: The type of the tenth parameter the encapsulated method takes.
    - id: T11
      description: The type of the eleventh parameter the encapsulated method takes.
    - id: T12
      description: The type of the twelfth parameter the encapsulated method takes.
    - id: T13
      description: The type of the thirteenth parameter the encapsulated method takes.
    - id: T14
      description: The type of the fourteenth parameter the encapsulated method takes.
    - id: T15
      description: The type of the fifteenth parameter the encapsulated method takes.
    - id: T16
      description: The type of the sixteenth parameter the encapsulated method takes.
    - id: TResult
      description: The type of the return value of the method that this delegate encapsulates.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The return value of the method that this delegate encapsulates.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult)(func As Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, Task(Of TResult)), arg1 As T1, arg2 As T2, arg3 As T3, arg4 As T4, arg5 As T5, arg6 As T6, arg7 As T7, arg8 As T8, arg9 As T9, arg10 As T10, arg11 As T11, arg12 As T12, arg13 As T13, arg14 As T14, arg15 As T15, arg16 As T16, defaultResult As TResult, logger As ILogger = Nothing) As Task(Of TResult)
  overload: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync*
  nameWithType.vb: TaskHelpers.DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult)(Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, Task(Of TResult)), T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult, ILogger)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult)(System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, System.Threading.Tasks.Task(Of TResult)), T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult, Microsoft.Extensions.Logging.ILogger)
  name.vb: DefaultIfExceptionAsync(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult)(Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, Task(Of TResult)), T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult, ILogger)
references:
- uid: Whipstaff.Core.ExceptionHandling
  commentId: N:Whipstaff.Core.ExceptionHandling
  isExternal: true
  name: Whipstaff.Core.ExceptionHandling
  nameWithType: Whipstaff.Core.ExceptionHandling
  fullName: Whipstaff.Core.ExceptionHandling
- uid: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync*
  commentId: Overload:Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync
  isExternal: true
  name: DefaultIfExceptionAsync
  nameWithType: TaskHelpers.DefaultIfExceptionAsync
  fullName: Whipstaff.Core.ExceptionHandling.TaskHelpers.DefaultIfExceptionAsync
- uid: System.Func{System.Threading.Tasks.Task{{TResult}}}
  commentId: '!:System.Func{System.Threading.Tasks.Task{``0}}'
  definition: System.Func`1
  name: Func<Task<TResult>>
  nameWithType: Func<Task<TResult>>
  fullName: System.Func<System.Threading.Tasks.Task<TResult>>
  nameWithType.vb: Func(Of Task(Of TResult))
  fullName.vb: System.Func(Of System.Threading.Tasks.Task(Of TResult))
  name.vb: Func(Of Task(Of TResult))
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TResult}'
  commentId: '!:TResult'
  definition: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: Microsoft.Extensions.Logging.ILogger
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: Microsoft.Extensions.Logging.ILogger
- uid: System.Threading.Tasks.Task{{TResult}}
  commentId: '!:System.Threading.Tasks.Task{``0}'
  definition: System.Threading.Tasks.Task`1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`1
  isExternal: true
  name: Func<>
  nameWithType: Func<>
  fullName: System.Func<>
  nameWithType.vb: Func(Of )
  fullName.vb: System.Func(Of )
  name.vb: Func(Of )
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{T},System.Threading.Tasks.Task{{TResult}}}
  commentId: '!:System.Func{``0,System.Threading.Tasks.Task{``1}}'
  definition: System.Func`2
  name: Func<T, Task<TResult>>
  nameWithType: Func<T, Task<TResult>>
  fullName: System.Func<T, System.Threading.Tasks.Task<TResult>>
  nameWithType.vb: Func(Of T, Task(Of TResult))
  fullName.vb: System.Func(Of T, System.Threading.Tasks.Task(Of TResult))
  name.vb: Func(Of T, Task(Of TResult))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: System.Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: System.Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Func{{T1},{T2},System.Threading.Tasks.Task{{TResult}}}
  commentId: '!:System.Func{``0,``1,System.Threading.Tasks.Task{``2}}'
  definition: System.Func`3
  name: Func<T1, T2, Task<TResult>>
  nameWithType: Func<T1, T2, Task<TResult>>
  fullName: System.Func<T1, T2, System.Threading.Tasks.Task<TResult>>
  nameWithType.vb: Func(Of T1, T2, Task(Of TResult))
  fullName.vb: System.Func(Of T1, T2, System.Threading.Tasks.Task(Of TResult))
  name.vb: Func(Of T1, T2, Task(Of TResult))
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T1}'
  commentId: '!:T1'
  definition: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: '{T2}'
  commentId: '!:T2'
  definition: T2
  name: T2
  nameWithType: T2
  fullName: T2
- uid: System.Func`3
  isExternal: true
  name: Func<, , >
  nameWithType: Func<, , >
  fullName: System.Func<, , >
  nameWithType.vb: Func(Of , , )
  fullName.vb: System.Func(Of , , )
  name.vb: Func(Of , , )
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: T2
  name: T2
  nameWithType: T2
  fullName: T2
- uid: System.Func{{T1},{T2},{T3},System.Threading.Tasks.Task{{TResult}}}
  commentId: '!:System.Func{``0,``1,``2,System.Threading.Tasks.Task{``3}}'
  definition: System.Func`4
  name: Func<T1, T2, T3, Task<TResult>>
  nameWithType: Func<T1, T2, T3, Task<TResult>>
  fullName: System.Func<T1, T2, T3, System.Threading.Tasks.Task<TResult>>
  nameWithType.vb: Func(Of T1, T2, T3, Task(Of TResult))
  fullName.vb: System.Func(Of T1, T2, T3, System.Threading.Tasks.Task(Of TResult))
  name.vb: Func(Of T1, T2, T3, Task(Of TResult))
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T3}'
  commentId: '!:T3'
  definition: T3
  name: T3
  nameWithType: T3
  fullName: T3
- uid: System.Func`4
  commentId: '!:System.Func`4'
  isExternal: true
  name: Func<, , , >
  nameWithType: Func<, , , >
  fullName: System.Func<, , , >
  nameWithType.vb: Func(Of , , , )
  fullName.vb: System.Func(Of , , , )
  name.vb: Func(Of , , , )
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: T3
  name: T3
  nameWithType: T3
  fullName: T3
- uid: System.Func{{T1},{T2},{T3},{T4},System.Threading.Tasks.Task{{TResult}}}
  commentId: '!:System.Func{``0,``1,``2,``3,System.Threading.Tasks.Task{``4}}'
  definition: System.Func`5
  name: Func<T1, T2, T3, T4, Task<TResult>>
  nameWithType: Func<T1, T2, T3, T4, Task<TResult>>
  fullName: System.Func<T1, T2, T3, T4, System.Threading.Tasks.Task<TResult>>
  nameWithType.vb: Func(Of T1, T2, T3, T4, Task(Of TResult))
  fullName.vb: System.Func(Of T1, T2, T3, T4, System.Threading.Tasks.Task(Of TResult))
  name.vb: Func(Of T1, T2, T3, T4, Task(Of TResult))
  spec.csharp:
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T4}'
  commentId: '!:T4'
  definition: T4
  name: T4
  nameWithType: T4
  fullName: T4
- uid: System.Func`5
  commentId: '!:System.Func`5'
  isExternal: true
  name: Func<, , , , >
  nameWithType: Func<, , , , >
  fullName: System.Func<, , , , >
  nameWithType.vb: Func(Of , , , , )
  fullName.vb: System.Func(Of , , , , )
  name.vb: Func(Of , , , , )
  spec.csharp:
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: T4
  name: T4
  nameWithType: T4
  fullName: T4
- uid: System.Func{{T1},{T2},{T3},{T4},{T5},System.Threading.Tasks.Task{{TResult}}}
  commentId: '!:System.Func{``0,``1,``2,``3,``4,System.Threading.Tasks.Task{``5}}'
  definition: System.Func`6
  name: Func<T1, T2, T3, T4, T5, Task<TResult>>
  nameWithType: Func<T1, T2, T3, T4, T5, Task<TResult>>
  fullName: System.Func<T1, T2, T3, T4, T5, System.Threading.Tasks.Task<TResult>>
  nameWithType.vb: Func(Of T1, T2, T3, T4, T5, Task(Of TResult))
  fullName.vb: System.Func(Of T1, T2, T3, T4, T5, System.Threading.Tasks.Task(Of TResult))
  name.vb: Func(Of T1, T2, T3, T4, T5, Task(Of TResult))
  spec.csharp:
  - uid: System.Func`6
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`6
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T5}'
  commentId: '!:T5'
  definition: T5
  name: T5
  nameWithType: T5
  fullName: T5
- uid: System.Func`6
  commentId: '!:System.Func`6'
  isExternal: true
  name: Func<, , , , , >
  nameWithType: Func<, , , , , >
  fullName: System.Func<, , , , , >
  nameWithType.vb: Func(Of , , , , , )
  fullName.vb: System.Func(Of , , , , , )
  name.vb: Func(Of , , , , , )
  spec.csharp:
  - uid: System.Func`6
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`6
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: T5
  name: T5
  nameWithType: T5
  fullName: T5
- uid: System.Func{{T1},{T2},{T3},{T4},{T5},{T6},System.Threading.Tasks.Task{{TResult}}}
  commentId: '!:System.Func{``0,``1,``2,``3,``4,``5,System.Threading.Tasks.Task{``6}}'
  definition: System.Func`7
  name: Func<T1, T2, T3, T4, T5, T6, Task<TResult>>
  nameWithType: Func<T1, T2, T3, T4, T5, T6, Task<TResult>>
  fullName: System.Func<T1, T2, T3, T4, T5, T6, System.Threading.Tasks.Task<TResult>>
  nameWithType.vb: Func(Of T1, T2, T3, T4, T5, T6, Task(Of TResult))
  fullName.vb: System.Func(Of T1, T2, T3, T4, T5, T6, System.Threading.Tasks.Task(Of TResult))
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, Task(Of TResult))
  spec.csharp:
  - uid: System.Func`7
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`7
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T6}'
  commentId: '!:T6'
  definition: T6
  name: T6
  nameWithType: T6
  fullName: T6
- uid: System.Func`7
  commentId: '!:System.Func`7'
  isExternal: true
  name: Func<, , , , , , >
  nameWithType: Func<, , , , , , >
  fullName: System.Func<, , , , , , >
  nameWithType.vb: Func(Of , , , , , , )
  fullName.vb: System.Func(Of , , , , , , )
  name.vb: Func(Of , , , , , , )
  spec.csharp:
  - uid: System.Func`7
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`7
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: T6
  name: T6
  nameWithType: T6
  fullName: T6
- uid: System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},System.Threading.Tasks.Task{{TResult}}}
  commentId: '!:System.Func{``0,``1,``2,``3,``4,``5,``6,System.Threading.Tasks.Task{``7}}'
  definition: System.Func`8
  name: Func<T1, T2, T3, T4, T5, T6, T7, Task<TResult>>
  nameWithType: Func<T1, T2, T3, T4, T5, T6, T7, Task<TResult>>
  fullName: System.Func<T1, T2, T3, T4, T5, T6, T7, System.Threading.Tasks.Task<TResult>>
  nameWithType.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, Task(Of TResult))
  fullName.vb: System.Func(Of T1, T2, T3, T4, T5, T6, T7, System.Threading.Tasks.Task(Of TResult))
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, Task(Of TResult))
  spec.csharp:
  - uid: System.Func`8
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`8
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T7}'
  commentId: '!:T7'
  definition: T7
  name: T7
  nameWithType: T7
  fullName: T7
- uid: System.Func`8
  commentId: '!:System.Func`8'
  isExternal: true
  name: Func<, , , , , , , >
  nameWithType: Func<, , , , , , , >
  fullName: System.Func<, , , , , , , >
  nameWithType.vb: Func(Of , , , , , , , )
  fullName.vb: System.Func(Of , , , , , , , )
  name.vb: Func(Of , , , , , , , )
  spec.csharp:
  - uid: System.Func`8
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`8
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: T7
  name: T7
  nameWithType: T7
  fullName: T7
- uid: System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},System.Threading.Tasks.Task{{TResult}}}
  commentId: '!:System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Threading.Tasks.Task{``8}}'
  definition: System.Func`9
  name: Func<T1, T2, T3, T4, T5, T6, T7, T8, Task<TResult>>
  nameWithType: Func<T1, T2, T3, T4, T5, T6, T7, T8, Task<TResult>>
  fullName: System.Func<T1, T2, T3, T4, T5, T6, T7, T8, System.Threading.Tasks.Task<TResult>>
  nameWithType.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, Task(Of TResult))
  fullName.vb: System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, System.Threading.Tasks.Task(Of TResult))
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, Task(Of TResult))
  spec.csharp:
  - uid: System.Func`9
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`9
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T8}'
  commentId: '!:T8'
  definition: T8
  name: T8
  nameWithType: T8
  fullName: T8
- uid: System.Func`9
  commentId: '!:System.Func`9'
  isExternal: true
  name: Func<, , , , , , , , >
  nameWithType: Func<, , , , , , , , >
  fullName: System.Func<, , , , , , , , >
  nameWithType.vb: Func(Of , , , , , , , , )
  fullName.vb: System.Func(Of , , , , , , , , )
  name.vb: Func(Of , , , , , , , , )
  spec.csharp:
  - uid: System.Func`9
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`9
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: T8
  name: T8
  nameWithType: T8
  fullName: T8
- uid: System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},System.Threading.Tasks.Task{{TResult}}}
  commentId: '!:System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Threading.Tasks.Task{``9}}'
  definition: System.Func`10
  name: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, Task<TResult>>
  nameWithType: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, Task<TResult>>
  fullName: System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, System.Threading.Tasks.Task<TResult>>
  nameWithType.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, Task(Of TResult))
  fullName.vb: System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, System.Threading.Tasks.Task(Of TResult))
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, Task(Of TResult))
  spec.csharp:
  - uid: System.Func`10
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`10
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T9}'
  commentId: '!:T9'
  definition: T9
  name: T9
  nameWithType: T9
  fullName: T9
- uid: System.Func`10
  commentId: '!:System.Func`10'
  isExternal: true
  name: Func<, , , , , , , , , >
  nameWithType: Func<, , , , , , , , , >
  fullName: System.Func<, , , , , , , , , >
  nameWithType.vb: Func(Of , , , , , , , , , )
  fullName.vb: System.Func(Of , , , , , , , , , )
  name.vb: Func(Of , , , , , , , , , )
  spec.csharp:
  - uid: System.Func`10
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`10
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: T9
  name: T9
  nameWithType: T9
  fullName: T9
- uid: System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},System.Threading.Tasks.Task{{TResult}}}
  commentId: '!:System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Threading.Tasks.Task{``10}}'
  definition: System.Func`11
  name: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Task<TResult>>
  nameWithType: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Task<TResult>>
  fullName: System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, System.Threading.Tasks.Task<TResult>>
  nameWithType.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Task(Of TResult))
  fullName.vb: System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, System.Threading.Tasks.Task(Of TResult))
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Task(Of TResult))
  spec.csharp:
  - uid: System.Func`11
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`11
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T10}'
  commentId: '!:T10'
  definition: T10
  name: T10
  nameWithType: T10
  fullName: T10
- uid: System.Func`11
  commentId: '!:System.Func`11'
  isExternal: true
  name: Func<, , , , , , , , , , >
  nameWithType: Func<, , , , , , , , , , >
  fullName: System.Func<, , , , , , , , , , >
  nameWithType.vb: Func(Of , , , , , , , , , , )
  fullName.vb: System.Func(Of , , , , , , , , , , )
  name.vb: Func(Of , , , , , , , , , , )
  spec.csharp:
  - uid: System.Func`11
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`11
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: T10
  name: T10
  nameWithType: T10
  fullName: T10
- uid: System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},System.Threading.Tasks.Task{{TResult}}}
  commentId: '!:System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Threading.Tasks.Task{``11}}'
  definition: System.Func`12
  name: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Task<TResult>>
  nameWithType: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Task<TResult>>
  fullName: System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, System.Threading.Tasks.Task<TResult>>
  nameWithType.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Task(Of TResult))
  fullName.vb: System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, System.Threading.Tasks.Task(Of TResult))
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Task(Of TResult))
  spec.csharp:
  - uid: System.Func`12
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`12
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T11}'
  commentId: '!:T11'
  definition: T11
  name: T11
  nameWithType: T11
  fullName: T11
- uid: System.Func`12
  commentId: '!:System.Func`12'
  isExternal: true
  name: Func<, , , , , , , , , , , >
  nameWithType: Func<, , , , , , , , , , , >
  fullName: System.Func<, , , , , , , , , , , >
  nameWithType.vb: Func(Of , , , , , , , , , , , )
  fullName.vb: System.Func(Of , , , , , , , , , , , )
  name.vb: Func(Of , , , , , , , , , , , )
  spec.csharp:
  - uid: System.Func`12
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`12
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: T11
  name: T11
  nameWithType: T11
  fullName: T11
- uid: System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},System.Threading.Tasks.Task{{TResult}}}
  commentId: '!:System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Threading.Tasks.Task{``12}}'
  definition: System.Func`13
  name: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Task<TResult>>
  nameWithType: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Task<TResult>>
  fullName: System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, System.Threading.Tasks.Task<TResult>>
  nameWithType.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Task(Of TResult))
  fullName.vb: System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, System.Threading.Tasks.Task(Of TResult))
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Task(Of TResult))
  spec.csharp:
  - uid: System.Func`13
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`13
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T12}'
  commentId: '!:T12'
  definition: T12
  name: T12
  nameWithType: T12
  fullName: T12
- uid: System.Func`13
  commentId: '!:System.Func`13'
  isExternal: true
  name: Func<, , , , , , , , , , , , >
  nameWithType: Func<, , , , , , , , , , , , >
  fullName: System.Func<, , , , , , , , , , , , >
  nameWithType.vb: Func(Of , , , , , , , , , , , , )
  fullName.vb: System.Func(Of , , , , , , , , , , , , )
  name.vb: Func(Of , , , , , , , , , , , , )
  spec.csharp:
  - uid: System.Func`13
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`13
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: T12
  name: T12
  nameWithType: T12
  fullName: T12
- uid: System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},System.Threading.Tasks.Task{{TResult}}}
  commentId: '!:System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Threading.Tasks.Task{``13}}'
  definition: System.Func`14
  name: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, Task<TResult>>
  nameWithType: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, Task<TResult>>
  fullName: System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, System.Threading.Tasks.Task<TResult>>
  nameWithType.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, Task(Of TResult))
  fullName.vb: System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, System.Threading.Tasks.Task(Of TResult))
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, Task(Of TResult))
  spec.csharp:
  - uid: System.Func`14
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`14
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T13}'
  commentId: '!:T13'
  definition: T13
  name: T13
  nameWithType: T13
  fullName: T13
- uid: System.Func`14
  commentId: '!:System.Func`14'
  isExternal: true
  name: Func<, , , , , , , , , , , , , >
  nameWithType: Func<, , , , , , , , , , , , , >
  fullName: System.Func<, , , , , , , , , , , , , >
  nameWithType.vb: Func(Of , , , , , , , , , , , , , )
  fullName.vb: System.Func(Of , , , , , , , , , , , , , )
  name.vb: Func(Of , , , , , , , , , , , , , )
  spec.csharp:
  - uid: System.Func`14
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`14
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: T13
  name: T13
  nameWithType: T13
  fullName: T13
- uid: System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},System.Threading.Tasks.Task{{TResult}}}
  commentId: '!:System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Threading.Tasks.Task{``14}}'
  definition: System.Func`15
  name: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, Task<TResult>>
  nameWithType: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, Task<TResult>>
  fullName: System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, System.Threading.Tasks.Task<TResult>>
  nameWithType.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, Task(Of TResult))
  fullName.vb: System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, System.Threading.Tasks.Task(Of TResult))
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, Task(Of TResult))
  spec.csharp:
  - uid: System.Func`15
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T14
    nameWithType: T14
    fullName: T14
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`15
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T14
    nameWithType: T14
    fullName: T14
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T14}'
  commentId: '!:T14'
  definition: T14
  name: T14
  nameWithType: T14
  fullName: T14
- uid: System.Func`15
  commentId: '!:System.Func`15'
  isExternal: true
  name: Func<, , , , , , , , , , , , , , >
  nameWithType: Func<, , , , , , , , , , , , , , >
  fullName: System.Func<, , , , , , , , , , , , , , >
  nameWithType.vb: Func(Of , , , , , , , , , , , , , , )
  fullName.vb: System.Func(Of , , , , , , , , , , , , , , )
  name.vb: Func(Of , , , , , , , , , , , , , , )
  spec.csharp:
  - uid: System.Func`15
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`15
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: T14
  name: T14
  nameWithType: T14
  fullName: T14
- uid: System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{T15},System.Threading.Tasks.Task{{TResult}}}
  commentId: '!:System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Threading.Tasks.Task{``15}}'
  definition: System.Func`16
  name: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, Task<TResult>>
  nameWithType: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, Task<TResult>>
  fullName: System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, System.Threading.Tasks.Task<TResult>>
  nameWithType.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, Task(Of TResult))
  fullName.vb: System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, System.Threading.Tasks.Task(Of TResult))
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, Task(Of TResult))
  spec.csharp:
  - uid: System.Func`16
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T14
    nameWithType: T14
    fullName: T14
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T15
    nameWithType: T15
    fullName: T15
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`16
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T14
    nameWithType: T14
    fullName: T14
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T15
    nameWithType: T15
    fullName: T15
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T15}'
  commentId: '!:T15'
  definition: T15
  name: T15
  nameWithType: T15
  fullName: T15
- uid: System.Func`16
  commentId: '!:System.Func`16'
  isExternal: true
  name: Func<, , , , , , , , , , , , , , , >
  nameWithType: Func<, , , , , , , , , , , , , , , >
  fullName: System.Func<, , , , , , , , , , , , , , , >
  nameWithType.vb: Func(Of , , , , , , , , , , , , , , , )
  fullName.vb: System.Func(Of , , , , , , , , , , , , , , , )
  name.vb: Func(Of , , , , , , , , , , , , , , , )
  spec.csharp:
  - uid: System.Func`16
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`16
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: T15
  name: T15
  nameWithType: T15
  fullName: T15
- uid: System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{T15},{T16},System.Threading.Tasks.Task{{TResult}}}
  commentId: '!:System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Threading.Tasks.Task{``16}}'
  definition: System.Func`17
  name: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, Task<TResult>>
  nameWithType: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, Task<TResult>>
  fullName: System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, System.Threading.Tasks.Task<TResult>>
  nameWithType.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, Task(Of TResult))
  fullName.vb: System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, System.Threading.Tasks.Task(Of TResult))
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, Task(Of TResult))
  spec.csharp:
  - uid: System.Func`17
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T14
    nameWithType: T14
    fullName: T14
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T15
    nameWithType: T15
    fullName: T15
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T16
    nameWithType: T16
    fullName: T16
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`17
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T14
    nameWithType: T14
    fullName: T14
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T15
    nameWithType: T15
    fullName: T15
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T16
    nameWithType: T16
    fullName: T16
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T16}'
  commentId: '!:T16'
  definition: T16
  name: T16
  nameWithType: T16
  fullName: T16
- uid: System.Func`17
  commentId: '!:System.Func`17'
  isExternal: true
  name: Func<, , , , , , , , , , , , , , , , >
  nameWithType: Func<, , , , , , , , , , , , , , , , >
  fullName: System.Func<, , , , , , , , , , , , , , , , >
  nameWithType.vb: Func(Of , , , , , , , , , , , , , , , , )
  fullName.vb: System.Func(Of , , , , , , , , , , , , , , , , )
  name.vb: Func(Of , , , , , , , , , , , , , , , , )
  spec.csharp:
  - uid: System.Func`17
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`17
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: T16
  commentId: '!:T16'
  name: T16
  nameWithType: T16
  fullName: T16
