### YamlMime:ManagedReference
items:
- uid: Whipstaff.MediatR.Foundatio.AddToQueueRequestHandler`1
  commentId: T:Whipstaff.MediatR.Foundatio.AddToQueueRequestHandler`1
  id: AddToQueueRequestHandler`1
  parent: Whipstaff.MediatR.Foundatio
  children:
  - Whipstaff.MediatR.Foundatio.AddToQueueRequestHandler`1.#ctor(Foundatio.Queues.IQueue{`0})
  - Whipstaff.MediatR.Foundatio.AddToQueueRequestHandler`1.Handle(`0,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: AddToQueueRequestHandler<TRequest>
  nameWithType: AddToQueueRequestHandler<TRequest>
  fullName: Whipstaff.MediatR.Foundatio.AddToQueueRequestHandler<TRequest>
  type: Class
  source:
    path: Whipstaff.MediatR.Foundatio
    isExternal: true
  assemblies:
  - Whipstaff.MediatR.Foundatio
  namespace: Whipstaff.MediatR.Foundatio
  summary: "\nA simple MediatR Request Handler to push a RequestDto straight into a Queue.\n"
  syntax:
    content: 'public sealed class AddToQueueRequestHandler<TRequest> : Object, IRequestHandler<TRequest, string> where TRequest : class, IRequest<string>'
    typeParameters:
    - id: TRequest
      description: The type of the Request to enqueue.
    content.vb: >-
      Public NotInheritable Class AddToQueueRequestHandler(Of TRequest As {Class, IRequest(Of String)})
          Inherits Object
          Implements IRequestHandler(Of TRequest, String)
  inheritance:
  - System.Object
  implements:
  - MediatR.IRequestHandler{{TRequest},System.String}
  nameWithType.vb: AddToQueueRequestHandler(Of TRequest)
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
  fullName.vb: Whipstaff.MediatR.Foundatio.AddToQueueRequestHandler(Of TRequest)
  name.vb: AddToQueueRequestHandler(Of TRequest)
- uid: Whipstaff.MediatR.Foundatio.AddToQueueRequestHandler`1.#ctor(Foundatio.Queues.IQueue{`0})
  commentId: M:Whipstaff.MediatR.Foundatio.AddToQueueRequestHandler`1.#ctor(Foundatio.Queues.IQueue{`0})
  id: '#ctor(Foundatio.Queues.IQueue{`0})'
  parent: Whipstaff.MediatR.Foundatio.AddToQueueRequestHandler`1
  langs:
  - csharp
  - vb
  name: AddToQueueRequestHandler(IQueue<TRequest>)
  nameWithType: AddToQueueRequestHandler<TRequest>.AddToQueueRequestHandler(IQueue<TRequest>)
  fullName: Whipstaff.MediatR.Foundatio.AddToQueueRequestHandler<TRequest>.AddToQueueRequestHandler(Foundatio.Queues.IQueue<TRequest>)
  type: Constructor
  source:
    path: Whipstaff.MediatR.Foundatio
    isExternal: true
  assemblies:
  - Whipstaff.MediatR.Foundatio
  namespace: Whipstaff.MediatR.Foundatio
  summary: "\nInitializes a new instance of the <xref href=\"Whipstaff.MediatR.Foundatio.AddToQueueRequestHandler%601\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  syntax:
    content: public AddToQueueRequestHandler(IQueue<TRequest> queue)
    parameters:
    - id: queue
      type: Foundatio.Queues.IQueue{{TRequest}}
      description: The queue to add the requests to.
    content.vb: Public Sub New(queue As IQueue(Of TRequest))
  overload: Whipstaff.MediatR.Foundatio.AddToQueueRequestHandler`1.#ctor*
  nameWithType.vb: AddToQueueRequestHandler(Of TRequest).AddToQueueRequestHandler(IQueue(Of TRequest))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Whipstaff.MediatR.Foundatio.AddToQueueRequestHandler(Of TRequest).AddToQueueRequestHandler(Foundatio.Queues.IQueue(Of TRequest))
  name.vb: AddToQueueRequestHandler(IQueue(Of TRequest))
- uid: Whipstaff.MediatR.Foundatio.AddToQueueRequestHandler`1.Handle(`0,System.Threading.CancellationToken)
  commentId: M:Whipstaff.MediatR.Foundatio.AddToQueueRequestHandler`1.Handle(`0,System.Threading.CancellationToken)
  id: Handle(`0,System.Threading.CancellationToken)
  parent: Whipstaff.MediatR.Foundatio.AddToQueueRequestHandler`1
  langs:
  - csharp
  - vb
  name: Handle(TRequest, CancellationToken)
  nameWithType: AddToQueueRequestHandler<TRequest>.Handle(TRequest, CancellationToken)
  fullName: Whipstaff.MediatR.Foundatio.AddToQueueRequestHandler<TRequest>.Handle(TRequest, System.Threading.CancellationToken)
  type: Method
  source:
    path: Whipstaff.MediatR.Foundatio
    isExternal: true
  assemblies:
  - Whipstaff.MediatR.Foundatio
  namespace: Whipstaff.MediatR.Foundatio
  syntax:
    content: public Task<string> Handle(TRequest request, CancellationToken cancellationToken)
    parameters:
    - id: request
      type: '{TRequest}'
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: Public Function Handle(request As TRequest, cancellationToken As CancellationToken) As Task(Of String)
  overload: Whipstaff.MediatR.Foundatio.AddToQueueRequestHandler`1.Handle*
  nameWithType.vb: AddToQueueRequestHandler(Of TRequest).Handle(TRequest, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Whipstaff.MediatR.Foundatio.AddToQueueRequestHandler(Of TRequest).Handle(TRequest, System.Threading.CancellationToken)
references:
- uid: Whipstaff.MediatR.Foundatio
  commentId: N:Whipstaff.MediatR.Foundatio
  isExternal: true
  name: Whipstaff.MediatR.Foundatio
  nameWithType: Whipstaff.MediatR.Foundatio
  fullName: Whipstaff.MediatR.Foundatio
- uid: MediatR.IRequestHandler{{TRequest},System.String}
  commentId: '!:MediatR.IRequestHandler{`0,System.String}'
  definition: MediatR.IRequestHandler`2
  name: IRequestHandler<TRequest, String>
  nameWithType: IRequestHandler<TRequest, String>
  fullName: MediatR.IRequestHandler<TRequest, System.String>
  nameWithType.vb: IRequestHandler(Of TRequest, String)
  fullName.vb: MediatR.IRequestHandler(Of TRequest, System.String)
  name.vb: IRequestHandler(Of TRequest, String)
  spec.csharp:
  - uid: MediatR.IRequestHandler`2
    name: IRequestHandler
    nameWithType: IRequestHandler
    fullName: MediatR.IRequestHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MediatR.IRequestHandler`2
    name: IRequestHandler
    nameWithType: IRequestHandler
    fullName: MediatR.IRequestHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MediatR.IRequestHandler`2
  isExternal: true
  name: IRequestHandler<, >
  nameWithType: IRequestHandler<, >
  fullName: MediatR.IRequestHandler<, >
  nameWithType.vb: IRequestHandler(Of , )
  fullName.vb: MediatR.IRequestHandler(Of , )
  name.vb: IRequestHandler(Of , )
  spec.csharp:
  - uid: MediatR.IRequestHandler`2
    name: IRequestHandler
    nameWithType: IRequestHandler
    fullName: MediatR.IRequestHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MediatR.IRequestHandler`2
    name: IRequestHandler
    nameWithType: IRequestHandler
    fullName: MediatR.IRequestHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Whipstaff.MediatR.Foundatio.AddToQueueRequestHandler`1.#ctor*
  commentId: Overload:Whipstaff.MediatR.Foundatio.AddToQueueRequestHandler`1.#ctor
  isExternal: true
  name: AddToQueueRequestHandler
  nameWithType: AddToQueueRequestHandler<TRequest>.AddToQueueRequestHandler
  fullName: Whipstaff.MediatR.Foundatio.AddToQueueRequestHandler<TRequest>.AddToQueueRequestHandler
  nameWithType.vb: AddToQueueRequestHandler(Of TRequest).AddToQueueRequestHandler
  fullName.vb: Whipstaff.MediatR.Foundatio.AddToQueueRequestHandler(Of TRequest).AddToQueueRequestHandler
- uid: Foundatio.Queues.IQueue{{TRequest}}
  commentId: '!:Foundatio.Queues.IQueue{`0}'
  definition: Foundatio.Queues.IQueue`1
  name: IQueue<TRequest>
  nameWithType: IQueue<TRequest>
  fullName: Foundatio.Queues.IQueue<TRequest>
  nameWithType.vb: IQueue(Of TRequest)
  fullName.vb: Foundatio.Queues.IQueue(Of TRequest)
  name.vb: IQueue(Of TRequest)
  spec.csharp:
  - uid: Foundatio.Queues.IQueue`1
    name: IQueue
    nameWithType: IQueue
    fullName: Foundatio.Queues.IQueue
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Foundatio.Queues.IQueue`1
    name: IQueue
    nameWithType: IQueue
    fullName: Foundatio.Queues.IQueue
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: )
    nameWithType: )
    fullName: )
- uid: Foundatio.Queues.IQueue`1
  isExternal: true
  name: IQueue<>
  nameWithType: IQueue<>
  fullName: Foundatio.Queues.IQueue<>
  nameWithType.vb: IQueue(Of )
  fullName.vb: Foundatio.Queues.IQueue(Of )
  name.vb: IQueue(Of )
  spec.csharp:
  - uid: Foundatio.Queues.IQueue`1
    name: IQueue
    nameWithType: IQueue
    fullName: Foundatio.Queues.IQueue
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Foundatio.Queues.IQueue`1
    name: IQueue
    nameWithType: IQueue
    fullName: Foundatio.Queues.IQueue
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Whipstaff.MediatR.Foundatio.AddToQueueRequestHandler`1.Handle*
  commentId: Overload:Whipstaff.MediatR.Foundatio.AddToQueueRequestHandler`1.Handle
  isExternal: true
  name: Handle
  nameWithType: AddToQueueRequestHandler<TRequest>.Handle
  fullName: Whipstaff.MediatR.Foundatio.AddToQueueRequestHandler<TRequest>.Handle
  nameWithType.vb: AddToQueueRequestHandler(Of TRequest).Handle
  fullName.vb: Whipstaff.MediatR.Foundatio.AddToQueueRequestHandler(Of TRequest).Handle
- uid: '{TRequest}'
  commentId: '!:TRequest'
  definition: TRequest
  name: TRequest
  nameWithType: TRequest
  fullName: TRequest
- uid: System.Threading.CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.String}
  commentId: '!:System.Threading.Tasks.Task{System.String}'
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TRequest
  name: TRequest
  nameWithType: TRequest
  fullName: TRequest
- uid: System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
