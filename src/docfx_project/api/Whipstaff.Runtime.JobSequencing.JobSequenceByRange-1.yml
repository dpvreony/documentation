### YamlMime:ManagedReference
items:
- uid: Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1
  commentId: T:Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1
  id: JobSequenceByRange`1
  parent: Whipstaff.Runtime.JobSequencing
  children:
  - Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1.#ctor(`0,`0)
  - Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1.GetJobSequenceByRange(System.Byte,System.Byte)
  - Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1.GetJobSequenceByRange(System.Int16,System.Int16)
  - Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1.GetJobSequenceByRange(System.Int32,System.Int32)
  - Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1.GetJobSequenceByRange(System.Int64,System.Int64)
  langs:
  - csharp
  - vb
  name: JobSequenceByRange<T>
  nameWithType: JobSequenceByRange<T>
  fullName: Whipstaff.Runtime.JobSequencing.JobSequenceByRange<T>
  type: Class
  source:
    path: Whipstaff.Runtime
    isExternal: true
  assemblies:
  - Whipstaff.Runtime
  namespace: Whipstaff.Runtime.JobSequencing
  summary: "\nRepresents a job that runs with a start and end index.\n"
  syntax:
    content: 'public sealed class JobSequenceByRange<T> : Object'
    typeParameters:
    - id: T
      description: The type for the sequence.
    content.vb: >-
      Public NotInheritable Class JobSequenceByRange(Of T)
          Inherits Object
  inheritance:
  - System.Object
  nameWithType.vb: JobSequenceByRange(Of T)
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
  fullName.vb: Whipstaff.Runtime.JobSequencing.JobSequenceByRange(Of T)
  name.vb: JobSequenceByRange(Of T)
- uid: Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1.#ctor(`0,`0)
  commentId: M:Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1.#ctor(`0,`0)
  id: '#ctor(`0,`0)'
  parent: Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1
  langs:
  - csharp
  - vb
  name: JobSequenceByRange(T, T)
  nameWithType: JobSequenceByRange<T>.JobSequenceByRange(T, T)
  fullName: Whipstaff.Runtime.JobSequencing.JobSequenceByRange<T>.JobSequenceByRange(T, T)
  type: Constructor
  source:
    path: Whipstaff.Runtime
    isExternal: true
  assemblies:
  - Whipstaff.Runtime
  namespace: Whipstaff.Runtime.JobSequencing
  summary: "\nInitializes a new instance of the <xref href=\"Whipstaff.Runtime.JobSequencing.JobSequenceByRange%601\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  syntax:
    content: public JobSequenceByRange(T start, T end)
    parameters:
    - id: start
      type: '{T}'
      description: The start point for the job.
    - id: end
      type: '{T}'
      description: The end point for the job.
    content.vb: Public Sub New(start As T, end As T)
  overload: Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1.#ctor*
  nameWithType.vb: JobSequenceByRange(Of T).JobSequenceByRange(T, T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Whipstaff.Runtime.JobSequencing.JobSequenceByRange(Of T).JobSequenceByRange(T, T)
- uid: Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1.GetJobSequenceByRange(System.Byte,System.Byte)
  commentId: M:Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1.GetJobSequenceByRange(System.Byte,System.Byte)
  id: GetJobSequenceByRange(System.Byte,System.Byte)
  parent: Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1
  langs:
  - csharp
  - vb
  name: GetJobSequenceByRange(Byte, Byte)
  nameWithType: JobSequenceByRange<T>.GetJobSequenceByRange(Byte, Byte)
  fullName: Whipstaff.Runtime.JobSequencing.JobSequenceByRange<T>.GetJobSequenceByRange(System.Byte, System.Byte)
  type: Method
  source:
    path: Whipstaff.Runtime
    isExternal: true
  assemblies:
  - Whipstaff.Runtime
  namespace: Whipstaff.Runtime.JobSequencing
  summary: "\nGets the a job sequence with a byte data type.\n"
  syntax:
    content: public static JobSequenceByRange<byte> GetJobSequenceByRange(byte start, byte end)
    parameters:
    - id: start
      type: System.Byte
      description: The start point for the job.
    - id: end
      type: System.Byte
      description: The end point for the job.
    return:
      type: Whipstaff.Runtime.JobSequencing.JobSequenceByRange{System.Byte}
      description: Job Sequence.
    content.vb: Public Shared Function GetJobSequenceByRange(start As Byte, end As Byte) As JobSequenceByRange(Of Byte)
  overload: Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1.GetJobSequenceByRange*
  nameWithType.vb: JobSequenceByRange(Of T).GetJobSequenceByRange(Byte, Byte)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Whipstaff.Runtime.JobSequencing.JobSequenceByRange(Of T).GetJobSequenceByRange(System.Byte, System.Byte)
- uid: Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1.GetJobSequenceByRange(System.Int16,System.Int16)
  commentId: M:Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1.GetJobSequenceByRange(System.Int16,System.Int16)
  id: GetJobSequenceByRange(System.Int16,System.Int16)
  parent: Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1
  langs:
  - csharp
  - vb
  name: GetJobSequenceByRange(Int16, Int16)
  nameWithType: JobSequenceByRange<T>.GetJobSequenceByRange(Int16, Int16)
  fullName: Whipstaff.Runtime.JobSequencing.JobSequenceByRange<T>.GetJobSequenceByRange(System.Int16, System.Int16)
  type: Method
  source:
    path: Whipstaff.Runtime
    isExternal: true
  assemblies:
  - Whipstaff.Runtime
  namespace: Whipstaff.Runtime.JobSequencing
  summary: "\nGets the a job sequence with a short data type.\n"
  syntax:
    content: public static JobSequenceByRange<short> GetJobSequenceByRange(short start, short end)
    parameters:
    - id: start
      type: System.Int16
      description: The start point for the job.
    - id: end
      type: System.Int16
      description: The end point for the job.
    return:
      type: Whipstaff.Runtime.JobSequencing.JobSequenceByRange{System.Int16}
      description: Job Sequence.
    content.vb: Public Shared Function GetJobSequenceByRange(start As Short, end As Short) As JobSequenceByRange(Of Short)
  overload: Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1.GetJobSequenceByRange*
  nameWithType.vb: JobSequenceByRange(Of T).GetJobSequenceByRange(Int16, Int16)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Whipstaff.Runtime.JobSequencing.JobSequenceByRange(Of T).GetJobSequenceByRange(System.Int16, System.Int16)
- uid: Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1.GetJobSequenceByRange(System.Int32,System.Int32)
  commentId: M:Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1.GetJobSequenceByRange(System.Int32,System.Int32)
  id: GetJobSequenceByRange(System.Int32,System.Int32)
  parent: Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1
  langs:
  - csharp
  - vb
  name: GetJobSequenceByRange(Int32, Int32)
  nameWithType: JobSequenceByRange<T>.GetJobSequenceByRange(Int32, Int32)
  fullName: Whipstaff.Runtime.JobSequencing.JobSequenceByRange<T>.GetJobSequenceByRange(System.Int32, System.Int32)
  type: Method
  source:
    path: Whipstaff.Runtime
    isExternal: true
  assemblies:
  - Whipstaff.Runtime
  namespace: Whipstaff.Runtime.JobSequencing
  summary: "\nGets the a job sequence with a int data type.\n"
  syntax:
    content: public static JobSequenceByRange<int> GetJobSequenceByRange(int start, int end)
    parameters:
    - id: start
      type: System.Int32
      description: The start point for the job.
    - id: end
      type: System.Int32
      description: The end point for the job.
    return:
      type: Whipstaff.Runtime.JobSequencing.JobSequenceByRange{System.Int32}
      description: Job Sequence.
    content.vb: Public Shared Function GetJobSequenceByRange(start As Integer, end As Integer) As JobSequenceByRange(Of Integer)
  overload: Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1.GetJobSequenceByRange*
  nameWithType.vb: JobSequenceByRange(Of T).GetJobSequenceByRange(Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Whipstaff.Runtime.JobSequencing.JobSequenceByRange(Of T).GetJobSequenceByRange(System.Int32, System.Int32)
- uid: Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1.GetJobSequenceByRange(System.Int64,System.Int64)
  commentId: M:Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1.GetJobSequenceByRange(System.Int64,System.Int64)
  id: GetJobSequenceByRange(System.Int64,System.Int64)
  parent: Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1
  langs:
  - csharp
  - vb
  name: GetJobSequenceByRange(Int64, Int64)
  nameWithType: JobSequenceByRange<T>.GetJobSequenceByRange(Int64, Int64)
  fullName: Whipstaff.Runtime.JobSequencing.JobSequenceByRange<T>.GetJobSequenceByRange(System.Int64, System.Int64)
  type: Method
  source:
    path: Whipstaff.Runtime
    isExternal: true
  assemblies:
  - Whipstaff.Runtime
  namespace: Whipstaff.Runtime.JobSequencing
  summary: "\nGets the a job sequence with a long data type.\n"
  syntax:
    content: public static JobSequenceByRange<long> GetJobSequenceByRange(long start, long end)
    parameters:
    - id: start
      type: System.Int64
      description: The start point for the job.
    - id: end
      type: System.Int64
      description: The end point for the job.
    return:
      type: Whipstaff.Runtime.JobSequencing.JobSequenceByRange{System.Int64}
      description: Job Sequence.
    content.vb: Public Shared Function GetJobSequenceByRange(start As Long, end As Long) As JobSequenceByRange(Of Long)
  overload: Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1.GetJobSequenceByRange*
  nameWithType.vb: JobSequenceByRange(Of T).GetJobSequenceByRange(Int64, Int64)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Whipstaff.Runtime.JobSequencing.JobSequenceByRange(Of T).GetJobSequenceByRange(System.Int64, System.Int64)
references:
- uid: Whipstaff.Runtime.JobSequencing
  commentId: N:Whipstaff.Runtime.JobSequencing
  isExternal: true
  name: Whipstaff.Runtime.JobSequencing
  nameWithType: Whipstaff.Runtime.JobSequencing
  fullName: Whipstaff.Runtime.JobSequencing
- uid: Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1.#ctor*
  commentId: Overload:Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1.#ctor
  isExternal: true
  name: JobSequenceByRange
  nameWithType: JobSequenceByRange<T>.JobSequenceByRange
  fullName: Whipstaff.Runtime.JobSequencing.JobSequenceByRange<T>.JobSequenceByRange
  nameWithType.vb: JobSequenceByRange(Of T).JobSequenceByRange
  fullName.vb: Whipstaff.Runtime.JobSequencing.JobSequenceByRange(Of T).JobSequenceByRange
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1.GetJobSequenceByRange*
  commentId: Overload:Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1.GetJobSequenceByRange
  isExternal: true
  name: GetJobSequenceByRange
  nameWithType: JobSequenceByRange<T>.GetJobSequenceByRange
  fullName: Whipstaff.Runtime.JobSequencing.JobSequenceByRange<T>.GetJobSequenceByRange
  nameWithType.vb: JobSequenceByRange(Of T).GetJobSequenceByRange
  fullName.vb: Whipstaff.Runtime.JobSequencing.JobSequenceByRange(Of T).GetJobSequenceByRange
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: Whipstaff.Runtime.JobSequencing.JobSequenceByRange{System.Byte}
  commentId: T:Whipstaff.Runtime.JobSequencing.JobSequenceByRange{System.Byte}
  parent: Whipstaff.Runtime.JobSequencing
  definition: Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1
  name: JobSequenceByRange<Byte>
  nameWithType: JobSequenceByRange<Byte>
  fullName: Whipstaff.Runtime.JobSequencing.JobSequenceByRange<System.Byte>
  nameWithType.vb: JobSequenceByRange(Of Byte)
  fullName.vb: Whipstaff.Runtime.JobSequencing.JobSequenceByRange(Of System.Byte)
  name.vb: JobSequenceByRange(Of Byte)
  spec.csharp:
  - uid: Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1
    name: JobSequenceByRange
    nameWithType: JobSequenceByRange
    fullName: Whipstaff.Runtime.JobSequencing.JobSequenceByRange
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1
    name: JobSequenceByRange
    nameWithType: JobSequenceByRange
    fullName: Whipstaff.Runtime.JobSequencing.JobSequenceByRange
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1
  commentId: T:Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1
  isExternal: true
  name: JobSequenceByRange<T>
  nameWithType: JobSequenceByRange<T>
  fullName: Whipstaff.Runtime.JobSequencing.JobSequenceByRange<T>
  nameWithType.vb: JobSequenceByRange(Of T)
  fullName.vb: Whipstaff.Runtime.JobSequencing.JobSequenceByRange(Of T)
  name.vb: JobSequenceByRange(Of T)
  spec.csharp:
  - uid: Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1
    name: JobSequenceByRange
    nameWithType: JobSequenceByRange
    fullName: Whipstaff.Runtime.JobSequencing.JobSequenceByRange
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1
    name: JobSequenceByRange
    nameWithType: JobSequenceByRange
    fullName: Whipstaff.Runtime.JobSequencing.JobSequenceByRange
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int16
  commentId: T:System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: Whipstaff.Runtime.JobSequencing.JobSequenceByRange{System.Int16}
  commentId: T:Whipstaff.Runtime.JobSequencing.JobSequenceByRange{System.Int16}
  parent: Whipstaff.Runtime.JobSequencing
  definition: Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1
  name: JobSequenceByRange<Int16>
  nameWithType: JobSequenceByRange<Int16>
  fullName: Whipstaff.Runtime.JobSequencing.JobSequenceByRange<System.Int16>
  nameWithType.vb: JobSequenceByRange(Of Int16)
  fullName.vb: Whipstaff.Runtime.JobSequencing.JobSequenceByRange(Of System.Int16)
  name.vb: JobSequenceByRange(Of Int16)
  spec.csharp:
  - uid: Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1
    name: JobSequenceByRange
    nameWithType: JobSequenceByRange
    fullName: Whipstaff.Runtime.JobSequencing.JobSequenceByRange
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int16
    name: Int16
    nameWithType: Int16
    fullName: System.Int16
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1
    name: JobSequenceByRange
    nameWithType: JobSequenceByRange
    fullName: Whipstaff.Runtime.JobSequencing.JobSequenceByRange
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int16
    name: Int16
    nameWithType: Int16
    fullName: System.Int16
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Whipstaff.Runtime.JobSequencing.JobSequenceByRange{System.Int32}
  commentId: T:Whipstaff.Runtime.JobSequencing.JobSequenceByRange{System.Int32}
  parent: Whipstaff.Runtime.JobSequencing
  definition: Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1
  name: JobSequenceByRange<Int32>
  nameWithType: JobSequenceByRange<Int32>
  fullName: Whipstaff.Runtime.JobSequencing.JobSequenceByRange<System.Int32>
  nameWithType.vb: JobSequenceByRange(Of Int32)
  fullName.vb: Whipstaff.Runtime.JobSequencing.JobSequenceByRange(Of System.Int32)
  name.vb: JobSequenceByRange(Of Int32)
  spec.csharp:
  - uid: Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1
    name: JobSequenceByRange
    nameWithType: JobSequenceByRange
    fullName: Whipstaff.Runtime.JobSequencing.JobSequenceByRange
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1
    name: JobSequenceByRange
    nameWithType: JobSequenceByRange
    fullName: Whipstaff.Runtime.JobSequencing.JobSequenceByRange
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Whipstaff.Runtime.JobSequencing.JobSequenceByRange{System.Int64}
  commentId: T:Whipstaff.Runtime.JobSequencing.JobSequenceByRange{System.Int64}
  parent: Whipstaff.Runtime.JobSequencing
  definition: Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1
  name: JobSequenceByRange<Int64>
  nameWithType: JobSequenceByRange<Int64>
  fullName: Whipstaff.Runtime.JobSequencing.JobSequenceByRange<System.Int64>
  nameWithType.vb: JobSequenceByRange(Of Int64)
  fullName.vb: Whipstaff.Runtime.JobSequencing.JobSequenceByRange(Of System.Int64)
  name.vb: JobSequenceByRange(Of Int64)
  spec.csharp:
  - uid: Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1
    name: JobSequenceByRange
    nameWithType: JobSequenceByRange
    fullName: Whipstaff.Runtime.JobSequencing.JobSequenceByRange
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Whipstaff.Runtime.JobSequencing.JobSequenceByRange`1
    name: JobSequenceByRange
    nameWithType: JobSequenceByRange
    fullName: Whipstaff.Runtime.JobSequencing.JobSequenceByRange
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
